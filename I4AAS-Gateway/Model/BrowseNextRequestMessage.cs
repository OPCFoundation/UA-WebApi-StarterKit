/*
 * OPC UA REST API
 *
 * This API provides simple REST based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using System.Data;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BrowseNextRequestMessage
    /// </summary>
    [DataContract(Name = "BrowseNextRequestMessage")]
    public partial class BrowseNextRequestMessage : IEquatable<BrowseNextRequestMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNextRequestMessage" /> class.
        /// </summary>
        /// <param name="namespaceUris">namespaceUris.</param>
        /// <param name="serverUris">serverUris.</param>
        /// <param name="localeIds">localeIds.</param>
        /// <param name="serviceId">serviceId.</param>
        /// <param name="body">body.</param>
        public BrowseNextRequestMessage(List<string> namespaceUris = default(List<string>), List<string> serverUris = default(List<string>), List<string> localeIds = default(List<string>), int? serviceId = null, BrowseNextRequest body = default(BrowseNextRequest))
        {
            this.NamespaceUris = namespaceUris;
            this.ServerUris = serverUris;
            this.LocaleIds = localeIds;
            this.ServiceId = serviceId;
            this.Body = body;
        }

        /// <summary>
        /// Gets or Sets NamespaceUris
        /// </summary>
        [DataMember(Name = "NamespaceUris", EmitDefaultValue = false)]
        public List<string> NamespaceUris { get; set; }

        /// <summary>
        /// Gets or Sets ServerUris
        /// </summary>
        [DataMember(Name = "ServerUris", EmitDefaultValue = false)]
        public List<string> ServerUris { get; set; }

        /// <summary>
        /// Gets or Sets LocaleIds
        /// </summary>
        [DataMember(Name = "LocaleIds", EmitDefaultValue = false)]
        public List<string> LocaleIds { get; set; }

        /// <summary>
        /// Gets or Sets ServiceId
        /// </summary>
        [DataMember(Name = "ServiceId", EmitDefaultValue = false)]
        public int? ServiceId { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "Body", EmitDefaultValue = false)]
        public BrowseNextRequest Body { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BrowseNextRequestMessage {\n");
            sb.Append("  NamespaceUris: ").Append(NamespaceUris).Append("\n");
            sb.Append("  ServerUris: ").Append(ServerUris).Append("\n");
            sb.Append("  LocaleIds: ").Append(LocaleIds).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrowseNextRequestMessage);
        }

        /// <summary>
        /// Returns true if BrowseNextRequestMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of BrowseNextRequestMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrowseNextRequestMessage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NamespaceUris == input.NamespaceUris ||
                    this.NamespaceUris != null &&
                    input.NamespaceUris != null &&
                    this.NamespaceUris.SequenceEqual(input.NamespaceUris)
                ) && 
                (
                    this.ServerUris == input.ServerUris ||
                    this.ServerUris != null &&
                    input.ServerUris != null &&
                    this.ServerUris.SequenceEqual(input.ServerUris)
                ) && 
                (
                    this.LocaleIds == input.LocaleIds ||
                    this.LocaleIds != null &&
                    input.LocaleIds != null &&
                    this.LocaleIds.SequenceEqual(input.LocaleIds)
                ) && 
                (
                    this.ServiceId == input.ServiceId ||
                    this.ServiceId.Equals(input.ServiceId)
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NamespaceUris != null)
                {
                    hashCode = (hashCode * 59) + this.NamespaceUris.GetHashCode();
                }
                if (this.ServerUris != null)
                {
                    hashCode = (hashCode * 59) + this.ServerUris.GetHashCode();
                }
                if (this.LocaleIds != null)
                {
                    hashCode = (hashCode * 59) + this.LocaleIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ServiceId.GetHashCode();
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
