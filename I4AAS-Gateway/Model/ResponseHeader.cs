/*
 * OPC UA REST API
 *
 * This API provides simple REST based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using System.Data;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ResponseHeader
    /// </summary>
    [DataContract(Name = "ResponseHeader")]
    public partial class ResponseHeader : IEquatable<ResponseHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseHeader" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="requestHandle">requestHandle.</param>
        /// <param name="serviceResult">serviceResult.</param>
        /// <param name="serviceDiagnostics">serviceDiagnostics.</param>
        /// <param name="stringTable">stringTable.</param>
        /// <param name="additionalHeader">additionalHeader.</param>
        public ResponseHeader(DateTime? timestamp = null, int? requestHandle = null, int? serviceResult = null, DiagnosticInfo serviceDiagnostics = default(DiagnosticInfo), List<string> stringTable = default(List<string>), ExtensionObject additionalHeader = default(ExtensionObject))
        {
            this.Timestamp = timestamp;
            this.RequestHandle = requestHandle;
            this.ServiceResult = serviceResult;
            this.ServiceDiagnostics = serviceDiagnostics;
            this.StringTable = stringTable;
            this.AdditionalHeader = additionalHeader;
        }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "Timestamp", EmitDefaultValue = false)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets RequestHandle
        /// </summary>
        [DataMember(Name = "RequestHandle", EmitDefaultValue = false)]
        public int? RequestHandle { get; set; }

        /// <summary>
        /// Gets or Sets ServiceResult
        /// </summary>
        [DataMember(Name = "ServiceResult", EmitDefaultValue = false)]
        public int? ServiceResult { get; set; }

        /// <summary>
        /// Gets or Sets ServiceDiagnostics
        /// </summary>
        [DataMember(Name = "ServiceDiagnostics", EmitDefaultValue = false)]
        public DiagnosticInfo ServiceDiagnostics { get; set; }

        /// <summary>
        /// Gets or Sets StringTable
        /// </summary>
        [DataMember(Name = "StringTable", EmitDefaultValue = false)]
        public List<string> StringTable { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalHeader
        /// </summary>
        [DataMember(Name = "AdditionalHeader", EmitDefaultValue = false)]
        public ExtensionObject AdditionalHeader { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseHeader {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  RequestHandle: ").Append(RequestHandle).Append("\n");
            sb.Append("  ServiceResult: ").Append(ServiceResult).Append("\n");
            sb.Append("  ServiceDiagnostics: ").Append(ServiceDiagnostics).Append("\n");
            sb.Append("  StringTable: ").Append(StringTable).Append("\n");
            sb.Append("  AdditionalHeader: ").Append(AdditionalHeader).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseHeader);
        }

        /// <summary>
        /// Returns true if ResponseHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseHeader input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.RequestHandle == input.RequestHandle ||
                    this.RequestHandle.Equals(input.RequestHandle)
                ) && 
                (
                    this.ServiceResult == input.ServiceResult ||
                    this.ServiceResult.Equals(input.ServiceResult)
                ) && 
                (
                    this.ServiceDiagnostics == input.ServiceDiagnostics ||
                    (this.ServiceDiagnostics != null &&
                    this.ServiceDiagnostics.Equals(input.ServiceDiagnostics))
                ) && 
                (
                    this.StringTable == input.StringTable ||
                    this.StringTable != null &&
                    input.StringTable != null &&
                    this.StringTable.SequenceEqual(input.StringTable)
                ) && 
                (
                    this.AdditionalHeader == input.AdditionalHeader ||
                    (this.AdditionalHeader != null &&
                    this.AdditionalHeader.Equals(input.AdditionalHeader))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RequestHandle.GetHashCode();
                hashCode = (hashCode * 59) + this.ServiceResult.GetHashCode();
                if (this.ServiceDiagnostics != null)
                {
                    hashCode = (hashCode * 59) + this.ServiceDiagnostics.GetHashCode();
                }
                if (this.StringTable != null)
                {
                    hashCode = (hashCode * 59) + this.StringTable.GetHashCode();
                }
                if (this.AdditionalHeader != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalHeader.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
