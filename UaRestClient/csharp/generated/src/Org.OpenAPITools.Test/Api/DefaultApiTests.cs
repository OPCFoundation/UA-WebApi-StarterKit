/*
 * OPC UA REST API
 *
 * This API provides simple REST based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private DefaultApi instance;

        public DefaultApiTests()
        {
            instance = new DefaultApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DefaultApi
            //Assert.IsType<DefaultApi>(instance);
        }

        /// <summary>
        /// Test ActivateSession
        /// </summary>
        [Fact]
        public void ActivateSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ActivateSessionRequestMessage? activateSessionRequestMessage = null;
            //var response = instance.ActivateSession(activateSessionRequestMessage);
            //Assert.IsType<ActivateSessionResponseMessage>(response);
        }

        /// <summary>
        /// Test Browse
        /// </summary>
        [Fact]
        public void BrowseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BrowseRequestMessage? browseRequestMessage = null;
            //var response = instance.Browse(browseRequestMessage);
            //Assert.IsType<BrowseResponseMessage>(response);
        }

        /// <summary>
        /// Test BrowseNext
        /// </summary>
        [Fact]
        public void BrowseNextTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BrowseNextRequestMessage? browseNextRequestMessage = null;
            //var response = instance.BrowseNext(browseNextRequestMessage);
            //Assert.IsType<BrowseNextResponseMessage>(response);
        }

        /// <summary>
        /// Test Call
        /// </summary>
        [Fact]
        public void CallTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CallRequestMessage? callRequestMessage = null;
            //var response = instance.Call(callRequestMessage);
            //Assert.IsType<CallResponseMessage>(response);
        }

        /// <summary>
        /// Test Cancel
        /// </summary>
        [Fact]
        public void CancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CancelRequestMessage? cancelRequestMessage = null;
            //var response = instance.Cancel(cancelRequestMessage);
            //Assert.IsType<CancelResponseMessage>(response);
        }

        /// <summary>
        /// Test CloseSession
        /// </summary>
        [Fact]
        public void CloseSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CloseSessionRequestMessage? closeSessionRequestMessage = null;
            //var response = instance.CloseSession(closeSessionRequestMessage);
            //Assert.IsType<CloseSessionResponseMessage>(response);
        }

        /// <summary>
        /// Test CreateMonitoredItems
        /// </summary>
        [Fact]
        public void CreateMonitoredItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateMonitoredItemsRequestMessage? createMonitoredItemsRequestMessage = null;
            //var response = instance.CreateMonitoredItems(createMonitoredItemsRequestMessage);
            //Assert.IsType<CreateMonitoredItemsResponseMessage>(response);
        }

        /// <summary>
        /// Test CreateSession
        /// </summary>
        [Fact]
        public void CreateSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateSessionRequestMessage? createSessionRequestMessage = null;
            //var response = instance.CreateSession(createSessionRequestMessage);
            //Assert.IsType<CreateSessionResponseMessage>(response);
        }

        /// <summary>
        /// Test CreateSubscription
        /// </summary>
        [Fact]
        public void CreateSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateSubscriptionRequestMessage? createSubscriptionRequestMessage = null;
            //var response = instance.CreateSubscription(createSubscriptionRequestMessage);
            //Assert.IsType<CreateSubscriptionResponseMessage>(response);
        }

        /// <summary>
        /// Test DeleteMonitoredItems
        /// </summary>
        [Fact]
        public void DeleteMonitoredItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteMonitoredItemsRequestMessage? deleteMonitoredItemsRequestMessage = null;
            //var response = instance.DeleteMonitoredItems(deleteMonitoredItemsRequestMessage);
            //Assert.IsType<DeleteMonitoredItemsResponseMessage>(response);
        }

        /// <summary>
        /// Test DeleteSubscriptions
        /// </summary>
        [Fact]
        public void DeleteSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteSubscriptionsRequestMessage? deleteSubscriptionsRequestMessage = null;
            //var response = instance.DeleteSubscriptions(deleteSubscriptionsRequestMessage);
            //Assert.IsType<DeleteSubscriptionsResponseMessage>(response);
        }

        /// <summary>
        /// Test FindServers
        /// </summary>
        [Fact]
        public void FindServersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FindServersRequestMessage? findServersRequestMessage = null;
            //var response = instance.FindServers(findServersRequestMessage);
            //Assert.IsType<FindServersResponseMessage>(response);
        }

        /// <summary>
        /// Test GetEndpoints
        /// </summary>
        [Fact]
        public void GetEndpointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetEndpointsRequestMessage? getEndpointsRequestMessage = null;
            //var response = instance.GetEndpoints(getEndpointsRequestMessage);
            //Assert.IsType<GetEndpointsResponseMessage>(response);
        }

        /// <summary>
        /// Test HistoryRead
        /// </summary>
        [Fact]
        public void HistoryReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //HistoryReadRequestMessage? historyReadRequestMessage = null;
            //var response = instance.HistoryRead(historyReadRequestMessage);
            //Assert.IsType<HistoryReadResponseMessage>(response);
        }

        /// <summary>
        /// Test HistoryUpdate
        /// </summary>
        [Fact]
        public void HistoryUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //HistoryUpdateRequestMessage? historyUpdateRequestMessage = null;
            //var response = instance.HistoryUpdate(historyUpdateRequestMessage);
            //Assert.IsType<HistoryUpdateResponseMessage>(response);
        }

        /// <summary>
        /// Test ModifyMonitoredItems
        /// </summary>
        [Fact]
        public void ModifyMonitoredItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModifyMonitoredItemsRequestMessage? modifyMonitoredItemsRequestMessage = null;
            //var response = instance.ModifyMonitoredItems(modifyMonitoredItemsRequestMessage);
            //Assert.IsType<ModifyMonitoredItemsResponseMessage>(response);
        }

        /// <summary>
        /// Test ModifySubscription
        /// </summary>
        [Fact]
        public void ModifySubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModifySubscriptionRequestMessage? modifySubscriptionRequestMessage = null;
            //var response = instance.ModifySubscription(modifySubscriptionRequestMessage);
            //Assert.IsType<ModifySubscriptionResponseMessage>(response);
        }

        /// <summary>
        /// Test Publish
        /// </summary>
        [Fact]
        public void PublishTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PublishRequestMessage? publishRequestMessage = null;
            //var response = instance.Publish(publishRequestMessage);
            //Assert.IsType<PublishResponseMessage>(response);
        }

        /// <summary>
        /// Test Read
        /// </summary>
        [Fact]
        public void ReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReadRequestMessage? readRequestMessage = null;
            //var response = instance.Read(readRequestMessage);
            //Assert.IsType<ReadResponseMessage>(response);
        }

        /// <summary>
        /// Test RegisterNodes
        /// </summary>
        [Fact]
        public void RegisterNodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RegisterNodesRequestMessage? registerNodesRequestMessage = null;
            //var response = instance.RegisterNodes(registerNodesRequestMessage);
            //Assert.IsType<RegisterNodesResponseMessage>(response);
        }

        /// <summary>
        /// Test Republish
        /// </summary>
        [Fact]
        public void RepublishTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RepublishRequestMessage? republishRequestMessage = null;
            //var response = instance.Republish(republishRequestMessage);
            //Assert.IsType<RepublishResponseMessage>(response);
        }

        /// <summary>
        /// Test SetMonitoringMode
        /// </summary>
        [Fact]
        public void SetMonitoringModeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetMonitoringModeRequestMessage? setMonitoringModeRequestMessage = null;
            //var response = instance.SetMonitoringMode(setMonitoringModeRequestMessage);
            //Assert.IsType<SetMonitoringModeResponseMessage>(response);
        }

        /// <summary>
        /// Test SetPublishingMode
        /// </summary>
        [Fact]
        public void SetPublishingModeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetPublishingModeRequestMessage? setPublishingModeRequestMessage = null;
            //var response = instance.SetPublishingMode(setPublishingModeRequestMessage);
            //Assert.IsType<SetPublishingModeResponseMessage>(response);
        }

        /// <summary>
        /// Test SetTriggering
        /// </summary>
        [Fact]
        public void SetTriggeringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetTriggeringRequestMessage? setTriggeringRequestMessage = null;
            //var response = instance.SetTriggering(setTriggeringRequestMessage);
            //Assert.IsType<SetTriggeringResponseMessage>(response);
        }

        /// <summary>
        /// Test TransferSubscriptions
        /// </summary>
        [Fact]
        public void TransferSubscriptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransferSubscriptionsRequestMessage? transferSubscriptionsRequestMessage = null;
            //var response = instance.TransferSubscriptions(transferSubscriptionsRequestMessage);
            //Assert.IsType<TransferSubscriptionsResponseMessage>(response);
        }

        /// <summary>
        /// Test TranslateBrowsePathsToNodeIds
        /// </summary>
        [Fact]
        public void TranslateBrowsePathsToNodeIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TranslateBrowsePathsToNodeIdsRequestMessage? translateBrowsePathsToNodeIdsRequestMessage = null;
            //var response = instance.TranslateBrowsePathsToNodeIds(translateBrowsePathsToNodeIdsRequestMessage);
            //Assert.IsType<TranslateBrowsePathsToNodeIdsResponseMessage>(response);
        }

        /// <summary>
        /// Test UnregisterNodes
        /// </summary>
        [Fact]
        public void UnregisterNodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UnregisterNodesRequestMessage? unregisterNodesRequestMessage = null;
            //var response = instance.UnregisterNodes(unregisterNodesRequestMessage);
            //Assert.IsType<UnregisterNodesResponseMessage>(response);
        }

        /// <summary>
        /// Test Write
        /// </summary>
        [Fact]
        public void WriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WriteRequestMessage? writeRequestMessage = null;
            //var response = instance.Write(writeRequestMessage);
            //Assert.IsType<WriteResponseMessage>(response);
        }
    }
}
