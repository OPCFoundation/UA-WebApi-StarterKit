/*
 * OPC UA REST API
 *
 * This API provides simple REST based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateSessionRequestMessage">ActivateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActivateSessionResponseMessage</returns>
        ActivateSessionResponseMessage ActivateSession(ActivateSessionRequestMessage? activateSessionRequestMessage = default(ActivateSessionRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateSessionRequestMessage">ActivateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActivateSessionResponseMessage</returns>
        ApiResponse<ActivateSessionResponseMessage> ActivateSessionWithHttpInfo(ActivateSessionRequestMessage? activateSessionRequestMessage = default(ActivateSessionRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseRequestMessage">BrowseRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BrowseResponseMessage</returns>
        BrowseResponseMessage Browse(BrowseRequestMessage? browseRequestMessage = default(BrowseRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseRequestMessage">BrowseRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BrowseResponseMessage</returns>
        ApiResponse<BrowseResponseMessage> BrowseWithHttpInfo(BrowseRequestMessage? browseRequestMessage = default(BrowseRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNextRequestMessage">BrowseNextRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BrowseNextResponseMessage</returns>
        BrowseNextResponseMessage BrowseNext(BrowseNextRequestMessage? browseNextRequestMessage = default(BrowseNextRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNextRequestMessage">BrowseNextRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BrowseNextResponseMessage</returns>
        ApiResponse<BrowseNextResponseMessage> BrowseNextWithHttpInfo(BrowseNextRequestMessage? browseNextRequestMessage = default(BrowseNextRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequestMessage">CallRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CallResponseMessage</returns>
        CallResponseMessage Call(CallRequestMessage? callRequestMessage = default(CallRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequestMessage">CallRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CallResponseMessage</returns>
        ApiResponse<CallResponseMessage> CallWithHttpInfo(CallRequestMessage? callRequestMessage = default(CallRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelRequestMessage">CancelRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelResponseMessage</returns>
        CancelResponseMessage Cancel(CancelRequestMessage? cancelRequestMessage = default(CancelRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelRequestMessage">CancelRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelResponseMessage</returns>
        ApiResponse<CancelResponseMessage> CancelWithHttpInfo(CancelRequestMessage? cancelRequestMessage = default(CancelRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeSessionRequestMessage">CloseSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloseSessionResponseMessage</returns>
        CloseSessionResponseMessage CloseSession(CloseSessionRequestMessage? closeSessionRequestMessage = default(CloseSessionRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeSessionRequestMessage">CloseSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloseSessionResponseMessage</returns>
        ApiResponse<CloseSessionResponseMessage> CloseSessionWithHttpInfo(CloseSessionRequestMessage? closeSessionRequestMessage = default(CloseSessionRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMonitoredItemsRequestMessage">CreateMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateMonitoredItemsResponseMessage</returns>
        CreateMonitoredItemsResponseMessage CreateMonitoredItems(CreateMonitoredItemsRequestMessage? createMonitoredItemsRequestMessage = default(CreateMonitoredItemsRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMonitoredItemsRequestMessage">CreateMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateMonitoredItemsResponseMessage</returns>
        ApiResponse<CreateMonitoredItemsResponseMessage> CreateMonitoredItemsWithHttpInfo(CreateMonitoredItemsRequestMessage? createMonitoredItemsRequestMessage = default(CreateMonitoredItemsRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequestMessage">CreateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSessionResponseMessage</returns>
        CreateSessionResponseMessage CreateSession(CreateSessionRequestMessage? createSessionRequestMessage = default(CreateSessionRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequestMessage">CreateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSessionResponseMessage</returns>
        ApiResponse<CreateSessionResponseMessage> CreateSessionWithHttpInfo(CreateSessionRequestMessage? createSessionRequestMessage = default(CreateSessionRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequestMessage">CreateSubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubscriptionResponseMessage</returns>
        CreateSubscriptionResponseMessage CreateSubscription(CreateSubscriptionRequestMessage? createSubscriptionRequestMessage = default(CreateSubscriptionRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequestMessage">CreateSubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubscriptionResponseMessage</returns>
        ApiResponse<CreateSubscriptionResponseMessage> CreateSubscriptionWithHttpInfo(CreateSubscriptionRequestMessage? createSubscriptionRequestMessage = default(CreateSubscriptionRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMonitoredItemsRequestMessage">DeleteMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteMonitoredItemsResponseMessage</returns>
        DeleteMonitoredItemsResponseMessage DeleteMonitoredItems(DeleteMonitoredItemsRequestMessage? deleteMonitoredItemsRequestMessage = default(DeleteMonitoredItemsRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMonitoredItemsRequestMessage">DeleteMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteMonitoredItemsResponseMessage</returns>
        ApiResponse<DeleteMonitoredItemsResponseMessage> DeleteMonitoredItemsWithHttpInfo(DeleteMonitoredItemsRequestMessage? deleteMonitoredItemsRequestMessage = default(DeleteMonitoredItemsRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSubscriptionsRequestMessage">DeleteSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteSubscriptionsResponseMessage</returns>
        DeleteSubscriptionsResponseMessage DeleteSubscriptions(DeleteSubscriptionsRequestMessage? deleteSubscriptionsRequestMessage = default(DeleteSubscriptionsRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSubscriptionsRequestMessage">DeleteSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteSubscriptionsResponseMessage</returns>
        ApiResponse<DeleteSubscriptionsResponseMessage> DeleteSubscriptionsWithHttpInfo(DeleteSubscriptionsRequestMessage? deleteSubscriptionsRequestMessage = default(DeleteSubscriptionsRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findServersRequestMessage">FindServersRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FindServersResponseMessage</returns>
        FindServersResponseMessage FindServers(FindServersRequestMessage? findServersRequestMessage = default(FindServersRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findServersRequestMessage">FindServersRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FindServersResponseMessage</returns>
        ApiResponse<FindServersResponseMessage> FindServersWithHttpInfo(FindServersRequestMessage? findServersRequestMessage = default(FindServersRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEndpointsRequestMessage">GetEndpointsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEndpointsResponseMessage</returns>
        GetEndpointsResponseMessage GetEndpoints(GetEndpointsRequestMessage? getEndpointsRequestMessage = default(GetEndpointsRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEndpointsRequestMessage">GetEndpointsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEndpointsResponseMessage</returns>
        ApiResponse<GetEndpointsResponseMessage> GetEndpointsWithHttpInfo(GetEndpointsRequestMessage? getEndpointsRequestMessage = default(GetEndpointsRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyReadRequestMessage">HistoryReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryReadResponseMessage</returns>
        HistoryReadResponseMessage HistoryRead(HistoryReadRequestMessage? historyReadRequestMessage = default(HistoryReadRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyReadRequestMessage">HistoryReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryReadResponseMessage</returns>
        ApiResponse<HistoryReadResponseMessage> HistoryReadWithHttpInfo(HistoryReadRequestMessage? historyReadRequestMessage = default(HistoryReadRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyUpdateRequestMessage">HistoryUpdateRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryUpdateResponseMessage</returns>
        HistoryUpdateResponseMessage HistoryUpdate(HistoryUpdateRequestMessage? historyUpdateRequestMessage = default(HistoryUpdateRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyUpdateRequestMessage">HistoryUpdateRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryUpdateResponseMessage</returns>
        ApiResponse<HistoryUpdateResponseMessage> HistoryUpdateWithHttpInfo(HistoryUpdateRequestMessage? historyUpdateRequestMessage = default(HistoryUpdateRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyMonitoredItemsRequestMessage">ModifyMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyMonitoredItemsResponseMessage</returns>
        ModifyMonitoredItemsResponseMessage ModifyMonitoredItems(ModifyMonitoredItemsRequestMessage? modifyMonitoredItemsRequestMessage = default(ModifyMonitoredItemsRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyMonitoredItemsRequestMessage">ModifyMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyMonitoredItemsResponseMessage</returns>
        ApiResponse<ModifyMonitoredItemsResponseMessage> ModifyMonitoredItemsWithHttpInfo(ModifyMonitoredItemsRequestMessage? modifyMonitoredItemsRequestMessage = default(ModifyMonitoredItemsRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifySubscriptionRequestMessage">ModifySubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifySubscriptionResponseMessage</returns>
        ModifySubscriptionResponseMessage ModifySubscription(ModifySubscriptionRequestMessage? modifySubscriptionRequestMessage = default(ModifySubscriptionRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifySubscriptionRequestMessage">ModifySubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifySubscriptionResponseMessage</returns>
        ApiResponse<ModifySubscriptionResponseMessage> ModifySubscriptionWithHttpInfo(ModifySubscriptionRequestMessage? modifySubscriptionRequestMessage = default(ModifySubscriptionRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishRequestMessage">PublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PublishResponseMessage</returns>
        PublishResponseMessage Publish(PublishRequestMessage? publishRequestMessage = default(PublishRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishRequestMessage">PublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PublishResponseMessage</returns>
        ApiResponse<PublishResponseMessage> PublishWithHttpInfo(PublishRequestMessage? publishRequestMessage = default(PublishRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readRequestMessage">ReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReadResponseMessage</returns>
        ReadResponseMessage Read(ReadRequestMessage? readRequestMessage = default(ReadRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readRequestMessage">ReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReadResponseMessage</returns>
        ApiResponse<ReadResponseMessage> ReadWithHttpInfo(ReadRequestMessage? readRequestMessage = default(ReadRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNodesRequestMessage">RegisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegisterNodesResponseMessage</returns>
        RegisterNodesResponseMessage RegisterNodes(RegisterNodesRequestMessage? registerNodesRequestMessage = default(RegisterNodesRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNodesRequestMessage">RegisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegisterNodesResponseMessage</returns>
        ApiResponse<RegisterNodesResponseMessage> RegisterNodesWithHttpInfo(RegisterNodesRequestMessage? registerNodesRequestMessage = default(RegisterNodesRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="republishRequestMessage">RepublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepublishResponseMessage</returns>
        RepublishResponseMessage Republish(RepublishRequestMessage? republishRequestMessage = default(RepublishRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="republishRequestMessage">RepublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepublishResponseMessage</returns>
        ApiResponse<RepublishResponseMessage> RepublishWithHttpInfo(RepublishRequestMessage? republishRequestMessage = default(RepublishRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setMonitoringModeRequestMessage">SetMonitoringModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetMonitoringModeResponseMessage</returns>
        SetMonitoringModeResponseMessage SetMonitoringMode(SetMonitoringModeRequestMessage? setMonitoringModeRequestMessage = default(SetMonitoringModeRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setMonitoringModeRequestMessage">SetMonitoringModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetMonitoringModeResponseMessage</returns>
        ApiResponse<SetMonitoringModeResponseMessage> SetMonitoringModeWithHttpInfo(SetMonitoringModeRequestMessage? setMonitoringModeRequestMessage = default(SetMonitoringModeRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPublishingModeRequestMessage">SetPublishingModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetPublishingModeResponseMessage</returns>
        SetPublishingModeResponseMessage SetPublishingMode(SetPublishingModeRequestMessage? setPublishingModeRequestMessage = default(SetPublishingModeRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPublishingModeRequestMessage">SetPublishingModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetPublishingModeResponseMessage</returns>
        ApiResponse<SetPublishingModeResponseMessage> SetPublishingModeWithHttpInfo(SetPublishingModeRequestMessage? setPublishingModeRequestMessage = default(SetPublishingModeRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTriggeringRequestMessage">SetTriggeringRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetTriggeringResponseMessage</returns>
        SetTriggeringResponseMessage SetTriggering(SetTriggeringRequestMessage? setTriggeringRequestMessage = default(SetTriggeringRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTriggeringRequestMessage">SetTriggeringRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetTriggeringResponseMessage</returns>
        ApiResponse<SetTriggeringResponseMessage> SetTriggeringWithHttpInfo(SetTriggeringRequestMessage? setTriggeringRequestMessage = default(SetTriggeringRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSubscriptionsRequestMessage">TransferSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferSubscriptionsResponseMessage</returns>
        TransferSubscriptionsResponseMessage TransferSubscriptions(TransferSubscriptionsRequestMessage? transferSubscriptionsRequestMessage = default(TransferSubscriptionsRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSubscriptionsRequestMessage">TransferSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferSubscriptionsResponseMessage</returns>
        ApiResponse<TransferSubscriptionsResponseMessage> TransferSubscriptionsWithHttpInfo(TransferSubscriptionsRequestMessage? transferSubscriptionsRequestMessage = default(TransferSubscriptionsRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translateBrowsePathsToNodeIdsRequestMessage">TranslateBrowsePathsToNodeIdsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TranslateBrowsePathsToNodeIdsResponseMessage</returns>
        TranslateBrowsePathsToNodeIdsResponseMessage TranslateBrowsePathsToNodeIds(TranslateBrowsePathsToNodeIdsRequestMessage? translateBrowsePathsToNodeIdsRequestMessage = default(TranslateBrowsePathsToNodeIdsRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translateBrowsePathsToNodeIdsRequestMessage">TranslateBrowsePathsToNodeIdsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TranslateBrowsePathsToNodeIdsResponseMessage</returns>
        ApiResponse<TranslateBrowsePathsToNodeIdsResponseMessage> TranslateBrowsePathsToNodeIdsWithHttpInfo(TranslateBrowsePathsToNodeIdsRequestMessage? translateBrowsePathsToNodeIdsRequestMessage = default(TranslateBrowsePathsToNodeIdsRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unregisterNodesRequestMessage">UnregisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UnregisterNodesResponseMessage</returns>
        UnregisterNodesResponseMessage UnregisterNodes(UnregisterNodesRequestMessage? unregisterNodesRequestMessage = default(UnregisterNodesRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unregisterNodesRequestMessage">UnregisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UnregisterNodesResponseMessage</returns>
        ApiResponse<UnregisterNodesResponseMessage> UnregisterNodesWithHttpInfo(UnregisterNodesRequestMessage? unregisterNodesRequestMessage = default(UnregisterNodesRequestMessage?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writeRequestMessage">WriteRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WriteResponseMessage</returns>
        WriteResponseMessage Write(WriteRequestMessage? writeRequestMessage = default(WriteRequestMessage?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writeRequestMessage">WriteRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WriteResponseMessage</returns>
        ApiResponse<WriteResponseMessage> WriteWithHttpInfo(WriteRequestMessage? writeRequestMessage = default(WriteRequestMessage?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateSessionRequestMessage">ActivateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActivateSessionResponseMessage</returns>
        System.Threading.Tasks.Task<ActivateSessionResponseMessage> ActivateSessionAsync(ActivateSessionRequestMessage? activateSessionRequestMessage = default(ActivateSessionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateSessionRequestMessage">ActivateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActivateSessionResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActivateSessionResponseMessage>> ActivateSessionWithHttpInfoAsync(ActivateSessionRequestMessage? activateSessionRequestMessage = default(ActivateSessionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseRequestMessage">BrowseRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BrowseResponseMessage</returns>
        System.Threading.Tasks.Task<BrowseResponseMessage> BrowseAsync(BrowseRequestMessage? browseRequestMessage = default(BrowseRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseRequestMessage">BrowseRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BrowseResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrowseResponseMessage>> BrowseWithHttpInfoAsync(BrowseRequestMessage? browseRequestMessage = default(BrowseRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNextRequestMessage">BrowseNextRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BrowseNextResponseMessage</returns>
        System.Threading.Tasks.Task<BrowseNextResponseMessage> BrowseNextAsync(BrowseNextRequestMessage? browseNextRequestMessage = default(BrowseNextRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNextRequestMessage">BrowseNextRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BrowseNextResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<BrowseNextResponseMessage>> BrowseNextWithHttpInfoAsync(BrowseNextRequestMessage? browseNextRequestMessage = default(BrowseNextRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequestMessage">CallRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallResponseMessage</returns>
        System.Threading.Tasks.Task<CallResponseMessage> CallAsync(CallRequestMessage? callRequestMessage = default(CallRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequestMessage">CallRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<CallResponseMessage>> CallWithHttpInfoAsync(CallRequestMessage? callRequestMessage = default(CallRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelRequestMessage">CancelRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelResponseMessage</returns>
        System.Threading.Tasks.Task<CancelResponseMessage> CancelAsync(CancelRequestMessage? cancelRequestMessage = default(CancelRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelRequestMessage">CancelRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelResponseMessage>> CancelWithHttpInfoAsync(CancelRequestMessage? cancelRequestMessage = default(CancelRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeSessionRequestMessage">CloseSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloseSessionResponseMessage</returns>
        System.Threading.Tasks.Task<CloseSessionResponseMessage> CloseSessionAsync(CloseSessionRequestMessage? closeSessionRequestMessage = default(CloseSessionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeSessionRequestMessage">CloseSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloseSessionResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloseSessionResponseMessage>> CloseSessionWithHttpInfoAsync(CloseSessionRequestMessage? closeSessionRequestMessage = default(CloseSessionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMonitoredItemsRequestMessage">CreateMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMonitoredItemsResponseMessage</returns>
        System.Threading.Tasks.Task<CreateMonitoredItemsResponseMessage> CreateMonitoredItemsAsync(CreateMonitoredItemsRequestMessage? createMonitoredItemsRequestMessage = default(CreateMonitoredItemsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMonitoredItemsRequestMessage">CreateMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMonitoredItemsResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateMonitoredItemsResponseMessage>> CreateMonitoredItemsWithHttpInfoAsync(CreateMonitoredItemsRequestMessage? createMonitoredItemsRequestMessage = default(CreateMonitoredItemsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequestMessage">CreateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSessionResponseMessage</returns>
        System.Threading.Tasks.Task<CreateSessionResponseMessage> CreateSessionAsync(CreateSessionRequestMessage? createSessionRequestMessage = default(CreateSessionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequestMessage">CreateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSessionResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSessionResponseMessage>> CreateSessionWithHttpInfoAsync(CreateSessionRequestMessage? createSessionRequestMessage = default(CreateSessionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequestMessage">CreateSubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubscriptionResponseMessage</returns>
        System.Threading.Tasks.Task<CreateSubscriptionResponseMessage> CreateSubscriptionAsync(CreateSubscriptionRequestMessage? createSubscriptionRequestMessage = default(CreateSubscriptionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequestMessage">CreateSubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubscriptionResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSubscriptionResponseMessage>> CreateSubscriptionWithHttpInfoAsync(CreateSubscriptionRequestMessage? createSubscriptionRequestMessage = default(CreateSubscriptionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMonitoredItemsRequestMessage">DeleteMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteMonitoredItemsResponseMessage</returns>
        System.Threading.Tasks.Task<DeleteMonitoredItemsResponseMessage> DeleteMonitoredItemsAsync(DeleteMonitoredItemsRequestMessage? deleteMonitoredItemsRequestMessage = default(DeleteMonitoredItemsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMonitoredItemsRequestMessage">DeleteMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteMonitoredItemsResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteMonitoredItemsResponseMessage>> DeleteMonitoredItemsWithHttpInfoAsync(DeleteMonitoredItemsRequestMessage? deleteMonitoredItemsRequestMessage = default(DeleteMonitoredItemsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSubscriptionsRequestMessage">DeleteSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteSubscriptionsResponseMessage</returns>
        System.Threading.Tasks.Task<DeleteSubscriptionsResponseMessage> DeleteSubscriptionsAsync(DeleteSubscriptionsRequestMessage? deleteSubscriptionsRequestMessage = default(DeleteSubscriptionsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSubscriptionsRequestMessage">DeleteSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteSubscriptionsResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteSubscriptionsResponseMessage>> DeleteSubscriptionsWithHttpInfoAsync(DeleteSubscriptionsRequestMessage? deleteSubscriptionsRequestMessage = default(DeleteSubscriptionsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findServersRequestMessage">FindServersRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindServersResponseMessage</returns>
        System.Threading.Tasks.Task<FindServersResponseMessage> FindServersAsync(FindServersRequestMessage? findServersRequestMessage = default(FindServersRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findServersRequestMessage">FindServersRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindServersResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<FindServersResponseMessage>> FindServersWithHttpInfoAsync(FindServersRequestMessage? findServersRequestMessage = default(FindServersRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEndpointsRequestMessage">GetEndpointsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEndpointsResponseMessage</returns>
        System.Threading.Tasks.Task<GetEndpointsResponseMessage> GetEndpointsAsync(GetEndpointsRequestMessage? getEndpointsRequestMessage = default(GetEndpointsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEndpointsRequestMessage">GetEndpointsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEndpointsResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEndpointsResponseMessage>> GetEndpointsWithHttpInfoAsync(GetEndpointsRequestMessage? getEndpointsRequestMessage = default(GetEndpointsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyReadRequestMessage">HistoryReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryReadResponseMessage</returns>
        System.Threading.Tasks.Task<HistoryReadResponseMessage> HistoryReadAsync(HistoryReadRequestMessage? historyReadRequestMessage = default(HistoryReadRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyReadRequestMessage">HistoryReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryReadResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryReadResponseMessage>> HistoryReadWithHttpInfoAsync(HistoryReadRequestMessage? historyReadRequestMessage = default(HistoryReadRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyUpdateRequestMessage">HistoryUpdateRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryUpdateResponseMessage</returns>
        System.Threading.Tasks.Task<HistoryUpdateResponseMessage> HistoryUpdateAsync(HistoryUpdateRequestMessage? historyUpdateRequestMessage = default(HistoryUpdateRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyUpdateRequestMessage">HistoryUpdateRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryUpdateResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryUpdateResponseMessage>> HistoryUpdateWithHttpInfoAsync(HistoryUpdateRequestMessage? historyUpdateRequestMessage = default(HistoryUpdateRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyMonitoredItemsRequestMessage">ModifyMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyMonitoredItemsResponseMessage</returns>
        System.Threading.Tasks.Task<ModifyMonitoredItemsResponseMessage> ModifyMonitoredItemsAsync(ModifyMonitoredItemsRequestMessage? modifyMonitoredItemsRequestMessage = default(ModifyMonitoredItemsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyMonitoredItemsRequestMessage">ModifyMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyMonitoredItemsResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyMonitoredItemsResponseMessage>> ModifyMonitoredItemsWithHttpInfoAsync(ModifyMonitoredItemsRequestMessage? modifyMonitoredItemsRequestMessage = default(ModifyMonitoredItemsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifySubscriptionRequestMessage">ModifySubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifySubscriptionResponseMessage</returns>
        System.Threading.Tasks.Task<ModifySubscriptionResponseMessage> ModifySubscriptionAsync(ModifySubscriptionRequestMessage? modifySubscriptionRequestMessage = default(ModifySubscriptionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifySubscriptionRequestMessage">ModifySubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifySubscriptionResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifySubscriptionResponseMessage>> ModifySubscriptionWithHttpInfoAsync(ModifySubscriptionRequestMessage? modifySubscriptionRequestMessage = default(ModifySubscriptionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishRequestMessage">PublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublishResponseMessage</returns>
        System.Threading.Tasks.Task<PublishResponseMessage> PublishAsync(PublishRequestMessage? publishRequestMessage = default(PublishRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishRequestMessage">PublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublishResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<PublishResponseMessage>> PublishWithHttpInfoAsync(PublishRequestMessage? publishRequestMessage = default(PublishRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readRequestMessage">ReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReadResponseMessage</returns>
        System.Threading.Tasks.Task<ReadResponseMessage> ReadAsync(ReadRequestMessage? readRequestMessage = default(ReadRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readRequestMessage">ReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReadResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReadResponseMessage>> ReadWithHttpInfoAsync(ReadRequestMessage? readRequestMessage = default(ReadRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNodesRequestMessage">RegisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegisterNodesResponseMessage</returns>
        System.Threading.Tasks.Task<RegisterNodesResponseMessage> RegisterNodesAsync(RegisterNodesRequestMessage? registerNodesRequestMessage = default(RegisterNodesRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNodesRequestMessage">RegisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegisterNodesResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterNodesResponseMessage>> RegisterNodesWithHttpInfoAsync(RegisterNodesRequestMessage? registerNodesRequestMessage = default(RegisterNodesRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="republishRequestMessage">RepublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepublishResponseMessage</returns>
        System.Threading.Tasks.Task<RepublishResponseMessage> RepublishAsync(RepublishRequestMessage? republishRequestMessage = default(RepublishRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="republishRequestMessage">RepublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepublishResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepublishResponseMessage>> RepublishWithHttpInfoAsync(RepublishRequestMessage? republishRequestMessage = default(RepublishRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setMonitoringModeRequestMessage">SetMonitoringModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetMonitoringModeResponseMessage</returns>
        System.Threading.Tasks.Task<SetMonitoringModeResponseMessage> SetMonitoringModeAsync(SetMonitoringModeRequestMessage? setMonitoringModeRequestMessage = default(SetMonitoringModeRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setMonitoringModeRequestMessage">SetMonitoringModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetMonitoringModeResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetMonitoringModeResponseMessage>> SetMonitoringModeWithHttpInfoAsync(SetMonitoringModeRequestMessage? setMonitoringModeRequestMessage = default(SetMonitoringModeRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPublishingModeRequestMessage">SetPublishingModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetPublishingModeResponseMessage</returns>
        System.Threading.Tasks.Task<SetPublishingModeResponseMessage> SetPublishingModeAsync(SetPublishingModeRequestMessage? setPublishingModeRequestMessage = default(SetPublishingModeRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPublishingModeRequestMessage">SetPublishingModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetPublishingModeResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetPublishingModeResponseMessage>> SetPublishingModeWithHttpInfoAsync(SetPublishingModeRequestMessage? setPublishingModeRequestMessage = default(SetPublishingModeRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTriggeringRequestMessage">SetTriggeringRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetTriggeringResponseMessage</returns>
        System.Threading.Tasks.Task<SetTriggeringResponseMessage> SetTriggeringAsync(SetTriggeringRequestMessage? setTriggeringRequestMessage = default(SetTriggeringRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTriggeringRequestMessage">SetTriggeringRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetTriggeringResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetTriggeringResponseMessage>> SetTriggeringWithHttpInfoAsync(SetTriggeringRequestMessage? setTriggeringRequestMessage = default(SetTriggeringRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSubscriptionsRequestMessage">TransferSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferSubscriptionsResponseMessage</returns>
        System.Threading.Tasks.Task<TransferSubscriptionsResponseMessage> TransferSubscriptionsAsync(TransferSubscriptionsRequestMessage? transferSubscriptionsRequestMessage = default(TransferSubscriptionsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSubscriptionsRequestMessage">TransferSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferSubscriptionsResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferSubscriptionsResponseMessage>> TransferSubscriptionsWithHttpInfoAsync(TransferSubscriptionsRequestMessage? transferSubscriptionsRequestMessage = default(TransferSubscriptionsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translateBrowsePathsToNodeIdsRequestMessage">TranslateBrowsePathsToNodeIdsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranslateBrowsePathsToNodeIdsResponseMessage</returns>
        System.Threading.Tasks.Task<TranslateBrowsePathsToNodeIdsResponseMessage> TranslateBrowsePathsToNodeIdsAsync(TranslateBrowsePathsToNodeIdsRequestMessage? translateBrowsePathsToNodeIdsRequestMessage = default(TranslateBrowsePathsToNodeIdsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translateBrowsePathsToNodeIdsRequestMessage">TranslateBrowsePathsToNodeIdsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranslateBrowsePathsToNodeIdsResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<TranslateBrowsePathsToNodeIdsResponseMessage>> TranslateBrowsePathsToNodeIdsWithHttpInfoAsync(TranslateBrowsePathsToNodeIdsRequestMessage? translateBrowsePathsToNodeIdsRequestMessage = default(TranslateBrowsePathsToNodeIdsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unregisterNodesRequestMessage">UnregisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UnregisterNodesResponseMessage</returns>
        System.Threading.Tasks.Task<UnregisterNodesResponseMessage> UnregisterNodesAsync(UnregisterNodesRequestMessage? unregisterNodesRequestMessage = default(UnregisterNodesRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unregisterNodesRequestMessage">UnregisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UnregisterNodesResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnregisterNodesResponseMessage>> UnregisterNodesWithHttpInfoAsync(UnregisterNodesRequestMessage? unregisterNodesRequestMessage = default(UnregisterNodesRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writeRequestMessage">WriteRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WriteResponseMessage</returns>
        System.Threading.Tasks.Task<WriteResponseMessage> WriteAsync(WriteRequestMessage? writeRequestMessage = default(WriteRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writeRequestMessage">WriteRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WriteResponseMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<WriteResponseMessage>> WriteWithHttpInfoAsync(WriteRequestMessage? writeRequestMessage = default(WriteRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateSessionRequestMessage">ActivateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActivateSessionResponseMessage</returns>
        public ActivateSessionResponseMessage ActivateSession(ActivateSessionRequestMessage? activateSessionRequestMessage = default(ActivateSessionRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ActivateSessionResponseMessage> localVarResponse = ActivateSessionWithHttpInfo(activateSessionRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateSessionRequestMessage">ActivateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActivateSessionResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<ActivateSessionResponseMessage> ActivateSessionWithHttpInfo(ActivateSessionRequestMessage? activateSessionRequestMessage = default(ActivateSessionRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = activateSessionRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.ActivateSession";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ActivateSessionResponseMessage>("/activatesession", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateSessionRequestMessage">ActivateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActivateSessionResponseMessage</returns>
        public async System.Threading.Tasks.Task<ActivateSessionResponseMessage> ActivateSessionAsync(ActivateSessionRequestMessage? activateSessionRequestMessage = default(ActivateSessionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ActivateSessionResponseMessage> localVarResponse = await ActivateSessionWithHttpInfoAsync(activateSessionRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activateSessionRequestMessage">ActivateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActivateSessionResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ActivateSessionResponseMessage>> ActivateSessionWithHttpInfoAsync(ActivateSessionRequestMessage? activateSessionRequestMessage = default(ActivateSessionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = activateSessionRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.ActivateSession";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ActivateSessionResponseMessage>("/activatesession", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseRequestMessage">BrowseRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BrowseResponseMessage</returns>
        public BrowseResponseMessage Browse(BrowseRequestMessage? browseRequestMessage = default(BrowseRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BrowseResponseMessage> localVarResponse = BrowseWithHttpInfo(browseRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseRequestMessage">BrowseRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BrowseResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<BrowseResponseMessage> BrowseWithHttpInfo(BrowseRequestMessage? browseRequestMessage = default(BrowseRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = browseRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.Browse";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BrowseResponseMessage>("/browse", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Browse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseRequestMessage">BrowseRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BrowseResponseMessage</returns>
        public async System.Threading.Tasks.Task<BrowseResponseMessage> BrowseAsync(BrowseRequestMessage? browseRequestMessage = default(BrowseRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BrowseResponseMessage> localVarResponse = await BrowseWithHttpInfoAsync(browseRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseRequestMessage">BrowseRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BrowseResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BrowseResponseMessage>> BrowseWithHttpInfoAsync(BrowseRequestMessage? browseRequestMessage = default(BrowseRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = browseRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.Browse";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BrowseResponseMessage>("/browse", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Browse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNextRequestMessage">BrowseNextRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BrowseNextResponseMessage</returns>
        public BrowseNextResponseMessage BrowseNext(BrowseNextRequestMessage? browseNextRequestMessage = default(BrowseNextRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<BrowseNextResponseMessage> localVarResponse = BrowseNextWithHttpInfo(browseNextRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNextRequestMessage">BrowseNextRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BrowseNextResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<BrowseNextResponseMessage> BrowseNextWithHttpInfo(BrowseNextRequestMessage? browseNextRequestMessage = default(BrowseNextRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = browseNextRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.BrowseNext";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BrowseNextResponseMessage>("/browsenext", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BrowseNext", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNextRequestMessage">BrowseNextRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BrowseNextResponseMessage</returns>
        public async System.Threading.Tasks.Task<BrowseNextResponseMessage> BrowseNextAsync(BrowseNextRequestMessage? browseNextRequestMessage = default(BrowseNextRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BrowseNextResponseMessage> localVarResponse = await BrowseNextWithHttpInfoAsync(browseNextRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="browseNextRequestMessage">BrowseNextRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BrowseNextResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BrowseNextResponseMessage>> BrowseNextWithHttpInfoAsync(BrowseNextRequestMessage? browseNextRequestMessage = default(BrowseNextRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = browseNextRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.BrowseNext";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BrowseNextResponseMessage>("/browsenext", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BrowseNext", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequestMessage">CallRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CallResponseMessage</returns>
        public CallResponseMessage Call(CallRequestMessage? callRequestMessage = default(CallRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CallResponseMessage> localVarResponse = CallWithHttpInfo(callRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequestMessage">CallRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CallResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<CallResponseMessage> CallWithHttpInfo(CallRequestMessage? callRequestMessage = default(CallRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = callRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.Call";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CallResponseMessage>("/call", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Call", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequestMessage">CallRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CallResponseMessage</returns>
        public async System.Threading.Tasks.Task<CallResponseMessage> CallAsync(CallRequestMessage? callRequestMessage = default(CallRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CallResponseMessage> localVarResponse = await CallWithHttpInfoAsync(callRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="callRequestMessage">CallRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CallResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CallResponseMessage>> CallWithHttpInfoAsync(CallRequestMessage? callRequestMessage = default(CallRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = callRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.Call";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CallResponseMessage>("/call", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Call", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelRequestMessage">CancelRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelResponseMessage</returns>
        public CancelResponseMessage Cancel(CancelRequestMessage? cancelRequestMessage = default(CancelRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CancelResponseMessage> localVarResponse = CancelWithHttpInfo(cancelRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelRequestMessage">CancelRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<CancelResponseMessage> CancelWithHttpInfo(CancelRequestMessage? cancelRequestMessage = default(CancelRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = cancelRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.Cancel";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CancelResponseMessage>("/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Cancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelRequestMessage">CancelRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelResponseMessage</returns>
        public async System.Threading.Tasks.Task<CancelResponseMessage> CancelAsync(CancelRequestMessage? cancelRequestMessage = default(CancelRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CancelResponseMessage> localVarResponse = await CancelWithHttpInfoAsync(cancelRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelRequestMessage">CancelRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CancelResponseMessage>> CancelWithHttpInfoAsync(CancelRequestMessage? cancelRequestMessage = default(CancelRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = cancelRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.Cancel";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CancelResponseMessage>("/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Cancel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeSessionRequestMessage">CloseSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloseSessionResponseMessage</returns>
        public CloseSessionResponseMessage CloseSession(CloseSessionRequestMessage? closeSessionRequestMessage = default(CloseSessionRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CloseSessionResponseMessage> localVarResponse = CloseSessionWithHttpInfo(closeSessionRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeSessionRequestMessage">CloseSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloseSessionResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<CloseSessionResponseMessage> CloseSessionWithHttpInfo(CloseSessionRequestMessage? closeSessionRequestMessage = default(CloseSessionRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = closeSessionRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.CloseSession";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CloseSessionResponseMessage>("/closesession", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CloseSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeSessionRequestMessage">CloseSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloseSessionResponseMessage</returns>
        public async System.Threading.Tasks.Task<CloseSessionResponseMessage> CloseSessionAsync(CloseSessionRequestMessage? closeSessionRequestMessage = default(CloseSessionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CloseSessionResponseMessage> localVarResponse = await CloseSessionWithHttpInfoAsync(closeSessionRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeSessionRequestMessage">CloseSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloseSessionResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CloseSessionResponseMessage>> CloseSessionWithHttpInfoAsync(CloseSessionRequestMessage? closeSessionRequestMessage = default(CloseSessionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = closeSessionRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.CloseSession";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CloseSessionResponseMessage>("/closesession", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CloseSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMonitoredItemsRequestMessage">CreateMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateMonitoredItemsResponseMessage</returns>
        public CreateMonitoredItemsResponseMessage CreateMonitoredItems(CreateMonitoredItemsRequestMessage? createMonitoredItemsRequestMessage = default(CreateMonitoredItemsRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CreateMonitoredItemsResponseMessage> localVarResponse = CreateMonitoredItemsWithHttpInfo(createMonitoredItemsRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMonitoredItemsRequestMessage">CreateMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateMonitoredItemsResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<CreateMonitoredItemsResponseMessage> CreateMonitoredItemsWithHttpInfo(CreateMonitoredItemsRequestMessage? createMonitoredItemsRequestMessage = default(CreateMonitoredItemsRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createMonitoredItemsRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.CreateMonitoredItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateMonitoredItemsResponseMessage>("/createmonitoreditems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMonitoredItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMonitoredItemsRequestMessage">CreateMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMonitoredItemsResponseMessage</returns>
        public async System.Threading.Tasks.Task<CreateMonitoredItemsResponseMessage> CreateMonitoredItemsAsync(CreateMonitoredItemsRequestMessage? createMonitoredItemsRequestMessage = default(CreateMonitoredItemsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CreateMonitoredItemsResponseMessage> localVarResponse = await CreateMonitoredItemsWithHttpInfoAsync(createMonitoredItemsRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMonitoredItemsRequestMessage">CreateMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMonitoredItemsResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CreateMonitoredItemsResponseMessage>> CreateMonitoredItemsWithHttpInfoAsync(CreateMonitoredItemsRequestMessage? createMonitoredItemsRequestMessage = default(CreateMonitoredItemsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createMonitoredItemsRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.CreateMonitoredItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateMonitoredItemsResponseMessage>("/createmonitoreditems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMonitoredItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequestMessage">CreateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSessionResponseMessage</returns>
        public CreateSessionResponseMessage CreateSession(CreateSessionRequestMessage? createSessionRequestMessage = default(CreateSessionRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CreateSessionResponseMessage> localVarResponse = CreateSessionWithHttpInfo(createSessionRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequestMessage">CreateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSessionResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<CreateSessionResponseMessage> CreateSessionWithHttpInfo(CreateSessionRequestMessage? createSessionRequestMessage = default(CreateSessionRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createSessionRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.CreateSession";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSessionResponseMessage>("/createsession", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequestMessage">CreateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSessionResponseMessage</returns>
        public async System.Threading.Tasks.Task<CreateSessionResponseMessage> CreateSessionAsync(CreateSessionRequestMessage? createSessionRequestMessage = default(CreateSessionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CreateSessionResponseMessage> localVarResponse = await CreateSessionWithHttpInfoAsync(createSessionRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSessionRequestMessage">CreateSessionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSessionResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CreateSessionResponseMessage>> CreateSessionWithHttpInfoAsync(CreateSessionRequestMessage? createSessionRequestMessage = default(CreateSessionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createSessionRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.CreateSession";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSessionResponseMessage>("/createsession", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSession", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequestMessage">CreateSubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSubscriptionResponseMessage</returns>
        public CreateSubscriptionResponseMessage CreateSubscription(CreateSubscriptionRequestMessage? createSubscriptionRequestMessage = default(CreateSubscriptionRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<CreateSubscriptionResponseMessage> localVarResponse = CreateSubscriptionWithHttpInfo(createSubscriptionRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequestMessage">CreateSubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSubscriptionResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<CreateSubscriptionResponseMessage> CreateSubscriptionWithHttpInfo(CreateSubscriptionRequestMessage? createSubscriptionRequestMessage = default(CreateSubscriptionRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createSubscriptionRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.CreateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSubscriptionResponseMessage>("/createsubscription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequestMessage">CreateSubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSubscriptionResponseMessage</returns>
        public async System.Threading.Tasks.Task<CreateSubscriptionResponseMessage> CreateSubscriptionAsync(CreateSubscriptionRequestMessage? createSubscriptionRequestMessage = default(CreateSubscriptionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CreateSubscriptionResponseMessage> localVarResponse = await CreateSubscriptionWithHttpInfoAsync(createSubscriptionRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequestMessage">CreateSubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSubscriptionResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CreateSubscriptionResponseMessage>> CreateSubscriptionWithHttpInfoAsync(CreateSubscriptionRequestMessage? createSubscriptionRequestMessage = default(CreateSubscriptionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createSubscriptionRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.CreateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSubscriptionResponseMessage>("/createsubscription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMonitoredItemsRequestMessage">DeleteMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteMonitoredItemsResponseMessage</returns>
        public DeleteMonitoredItemsResponseMessage DeleteMonitoredItems(DeleteMonitoredItemsRequestMessage? deleteMonitoredItemsRequestMessage = default(DeleteMonitoredItemsRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteMonitoredItemsResponseMessage> localVarResponse = DeleteMonitoredItemsWithHttpInfo(deleteMonitoredItemsRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMonitoredItemsRequestMessage">DeleteMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteMonitoredItemsResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeleteMonitoredItemsResponseMessage> DeleteMonitoredItemsWithHttpInfo(DeleteMonitoredItemsRequestMessage? deleteMonitoredItemsRequestMessage = default(DeleteMonitoredItemsRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteMonitoredItemsRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.DeleteMonitoredItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeleteMonitoredItemsResponseMessage>("/deletemonitoreditems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMonitoredItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMonitoredItemsRequestMessage">DeleteMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteMonitoredItemsResponseMessage</returns>
        public async System.Threading.Tasks.Task<DeleteMonitoredItemsResponseMessage> DeleteMonitoredItemsAsync(DeleteMonitoredItemsRequestMessage? deleteMonitoredItemsRequestMessage = default(DeleteMonitoredItemsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteMonitoredItemsResponseMessage> localVarResponse = await DeleteMonitoredItemsWithHttpInfoAsync(deleteMonitoredItemsRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMonitoredItemsRequestMessage">DeleteMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteMonitoredItemsResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeleteMonitoredItemsResponseMessage>> DeleteMonitoredItemsWithHttpInfoAsync(DeleteMonitoredItemsRequestMessage? deleteMonitoredItemsRequestMessage = default(DeleteMonitoredItemsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteMonitoredItemsRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.DeleteMonitoredItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteMonitoredItemsResponseMessage>("/deletemonitoreditems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMonitoredItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSubscriptionsRequestMessage">DeleteSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteSubscriptionsResponseMessage</returns>
        public DeleteSubscriptionsResponseMessage DeleteSubscriptions(DeleteSubscriptionsRequestMessage? deleteSubscriptionsRequestMessage = default(DeleteSubscriptionsRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteSubscriptionsResponseMessage> localVarResponse = DeleteSubscriptionsWithHttpInfo(deleteSubscriptionsRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSubscriptionsRequestMessage">DeleteSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteSubscriptionsResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeleteSubscriptionsResponseMessage> DeleteSubscriptionsWithHttpInfo(DeleteSubscriptionsRequestMessage? deleteSubscriptionsRequestMessage = default(DeleteSubscriptionsRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteSubscriptionsRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.DeleteSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeleteSubscriptionsResponseMessage>("/deletesubscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSubscriptionsRequestMessage">DeleteSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteSubscriptionsResponseMessage</returns>
        public async System.Threading.Tasks.Task<DeleteSubscriptionsResponseMessage> DeleteSubscriptionsAsync(DeleteSubscriptionsRequestMessage? deleteSubscriptionsRequestMessage = default(DeleteSubscriptionsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteSubscriptionsResponseMessage> localVarResponse = await DeleteSubscriptionsWithHttpInfoAsync(deleteSubscriptionsRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteSubscriptionsRequestMessage">DeleteSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteSubscriptionsResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeleteSubscriptionsResponseMessage>> DeleteSubscriptionsWithHttpInfoAsync(DeleteSubscriptionsRequestMessage? deleteSubscriptionsRequestMessage = default(DeleteSubscriptionsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteSubscriptionsRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.DeleteSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DeleteSubscriptionsResponseMessage>("/deletesubscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findServersRequestMessage">FindServersRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FindServersResponseMessage</returns>
        public FindServersResponseMessage FindServers(FindServersRequestMessage? findServersRequestMessage = default(FindServersRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<FindServersResponseMessage> localVarResponse = FindServersWithHttpInfo(findServersRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findServersRequestMessage">FindServersRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FindServersResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<FindServersResponseMessage> FindServersWithHttpInfo(FindServersRequestMessage? findServersRequestMessage = default(FindServersRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = findServersRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.FindServers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FindServersResponseMessage>("/findservers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindServers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findServersRequestMessage">FindServersRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FindServersResponseMessage</returns>
        public async System.Threading.Tasks.Task<FindServersResponseMessage> FindServersAsync(FindServersRequestMessage? findServersRequestMessage = default(FindServersRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<FindServersResponseMessage> localVarResponse = await FindServersWithHttpInfoAsync(findServersRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findServersRequestMessage">FindServersRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FindServersResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<FindServersResponseMessage>> FindServersWithHttpInfoAsync(FindServersRequestMessage? findServersRequestMessage = default(FindServersRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = findServersRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.FindServers";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FindServersResponseMessage>("/findservers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FindServers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEndpointsRequestMessage">GetEndpointsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEndpointsResponseMessage</returns>
        public GetEndpointsResponseMessage GetEndpoints(GetEndpointsRequestMessage? getEndpointsRequestMessage = default(GetEndpointsRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetEndpointsResponseMessage> localVarResponse = GetEndpointsWithHttpInfo(getEndpointsRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEndpointsRequestMessage">GetEndpointsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEndpointsResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetEndpointsResponseMessage> GetEndpointsWithHttpInfo(GetEndpointsRequestMessage? getEndpointsRequestMessage = default(GetEndpointsRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEndpointsRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.GetEndpoints";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<GetEndpointsResponseMessage>("/getendpoints", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEndpoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEndpointsRequestMessage">GetEndpointsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEndpointsResponseMessage</returns>
        public async System.Threading.Tasks.Task<GetEndpointsResponseMessage> GetEndpointsAsync(GetEndpointsRequestMessage? getEndpointsRequestMessage = default(GetEndpointsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetEndpointsResponseMessage> localVarResponse = await GetEndpointsWithHttpInfoAsync(getEndpointsRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEndpointsRequestMessage">GetEndpointsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEndpointsResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetEndpointsResponseMessage>> GetEndpointsWithHttpInfoAsync(GetEndpointsRequestMessage? getEndpointsRequestMessage = default(GetEndpointsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEndpointsRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.GetEndpoints";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetEndpointsResponseMessage>("/getendpoints", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEndpoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyReadRequestMessage">HistoryReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryReadResponseMessage</returns>
        public HistoryReadResponseMessage HistoryRead(HistoryReadRequestMessage? historyReadRequestMessage = default(HistoryReadRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryReadResponseMessage> localVarResponse = HistoryReadWithHttpInfo(historyReadRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyReadRequestMessage">HistoryReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryReadResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryReadResponseMessage> HistoryReadWithHttpInfo(HistoryReadRequestMessage? historyReadRequestMessage = default(HistoryReadRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = historyReadRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.HistoryRead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<HistoryReadResponseMessage>("/historyread", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HistoryRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyReadRequestMessage">HistoryReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryReadResponseMessage</returns>
        public async System.Threading.Tasks.Task<HistoryReadResponseMessage> HistoryReadAsync(HistoryReadRequestMessage? historyReadRequestMessage = default(HistoryReadRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryReadResponseMessage> localVarResponse = await HistoryReadWithHttpInfoAsync(historyReadRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyReadRequestMessage">HistoryReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryReadResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryReadResponseMessage>> HistoryReadWithHttpInfoAsync(HistoryReadRequestMessage? historyReadRequestMessage = default(HistoryReadRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = historyReadRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.HistoryRead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HistoryReadResponseMessage>("/historyread", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HistoryRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyUpdateRequestMessage">HistoryUpdateRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HistoryUpdateResponseMessage</returns>
        public HistoryUpdateResponseMessage HistoryUpdate(HistoryUpdateRequestMessage? historyUpdateRequestMessage = default(HistoryUpdateRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryUpdateResponseMessage> localVarResponse = HistoryUpdateWithHttpInfo(historyUpdateRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyUpdateRequestMessage">HistoryUpdateRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HistoryUpdateResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<HistoryUpdateResponseMessage> HistoryUpdateWithHttpInfo(HistoryUpdateRequestMessage? historyUpdateRequestMessage = default(HistoryUpdateRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = historyUpdateRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.HistoryUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<HistoryUpdateResponseMessage>("/historyupdate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HistoryUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyUpdateRequestMessage">HistoryUpdateRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HistoryUpdateResponseMessage</returns>
        public async System.Threading.Tasks.Task<HistoryUpdateResponseMessage> HistoryUpdateAsync(HistoryUpdateRequestMessage? historyUpdateRequestMessage = default(HistoryUpdateRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<HistoryUpdateResponseMessage> localVarResponse = await HistoryUpdateWithHttpInfoAsync(historyUpdateRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="historyUpdateRequestMessage">HistoryUpdateRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HistoryUpdateResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<HistoryUpdateResponseMessage>> HistoryUpdateWithHttpInfoAsync(HistoryUpdateRequestMessage? historyUpdateRequestMessage = default(HistoryUpdateRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = historyUpdateRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.HistoryUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HistoryUpdateResponseMessage>("/historyupdate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HistoryUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyMonitoredItemsRequestMessage">ModifyMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyMonitoredItemsResponseMessage</returns>
        public ModifyMonitoredItemsResponseMessage ModifyMonitoredItems(ModifyMonitoredItemsRequestMessage? modifyMonitoredItemsRequestMessage = default(ModifyMonitoredItemsRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModifyMonitoredItemsResponseMessage> localVarResponse = ModifyMonitoredItemsWithHttpInfo(modifyMonitoredItemsRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyMonitoredItemsRequestMessage">ModifyMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyMonitoredItemsResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModifyMonitoredItemsResponseMessage> ModifyMonitoredItemsWithHttpInfo(ModifyMonitoredItemsRequestMessage? modifyMonitoredItemsRequestMessage = default(ModifyMonitoredItemsRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modifyMonitoredItemsRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.ModifyMonitoredItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ModifyMonitoredItemsResponseMessage>("/modifymonitoreditems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyMonitoredItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyMonitoredItemsRequestMessage">ModifyMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyMonitoredItemsResponseMessage</returns>
        public async System.Threading.Tasks.Task<ModifyMonitoredItemsResponseMessage> ModifyMonitoredItemsAsync(ModifyMonitoredItemsRequestMessage? modifyMonitoredItemsRequestMessage = default(ModifyMonitoredItemsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModifyMonitoredItemsResponseMessage> localVarResponse = await ModifyMonitoredItemsWithHttpInfoAsync(modifyMonitoredItemsRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifyMonitoredItemsRequestMessage">ModifyMonitoredItemsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyMonitoredItemsResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModifyMonitoredItemsResponseMessage>> ModifyMonitoredItemsWithHttpInfoAsync(ModifyMonitoredItemsRequestMessage? modifyMonitoredItemsRequestMessage = default(ModifyMonitoredItemsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modifyMonitoredItemsRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.ModifyMonitoredItems";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModifyMonitoredItemsResponseMessage>("/modifymonitoreditems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyMonitoredItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifySubscriptionRequestMessage">ModifySubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifySubscriptionResponseMessage</returns>
        public ModifySubscriptionResponseMessage ModifySubscription(ModifySubscriptionRequestMessage? modifySubscriptionRequestMessage = default(ModifySubscriptionRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ModifySubscriptionResponseMessage> localVarResponse = ModifySubscriptionWithHttpInfo(modifySubscriptionRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifySubscriptionRequestMessage">ModifySubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifySubscriptionResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<ModifySubscriptionResponseMessage> ModifySubscriptionWithHttpInfo(ModifySubscriptionRequestMessage? modifySubscriptionRequestMessage = default(ModifySubscriptionRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modifySubscriptionRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.ModifySubscription";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ModifySubscriptionResponseMessage>("/modifysubscription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifySubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifySubscriptionRequestMessage">ModifySubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifySubscriptionResponseMessage</returns>
        public async System.Threading.Tasks.Task<ModifySubscriptionResponseMessage> ModifySubscriptionAsync(ModifySubscriptionRequestMessage? modifySubscriptionRequestMessage = default(ModifySubscriptionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ModifySubscriptionResponseMessage> localVarResponse = await ModifySubscriptionWithHttpInfoAsync(modifySubscriptionRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modifySubscriptionRequestMessage">ModifySubscriptionRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifySubscriptionResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ModifySubscriptionResponseMessage>> ModifySubscriptionWithHttpInfoAsync(ModifySubscriptionRequestMessage? modifySubscriptionRequestMessage = default(ModifySubscriptionRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = modifySubscriptionRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.ModifySubscription";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ModifySubscriptionResponseMessage>("/modifysubscription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifySubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishRequestMessage">PublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PublishResponseMessage</returns>
        public PublishResponseMessage Publish(PublishRequestMessage? publishRequestMessage = default(PublishRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PublishResponseMessage> localVarResponse = PublishWithHttpInfo(publishRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishRequestMessage">PublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PublishResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<PublishResponseMessage> PublishWithHttpInfo(PublishRequestMessage? publishRequestMessage = default(PublishRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publishRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.Publish";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PublishResponseMessage>("/publish", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Publish", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishRequestMessage">PublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PublishResponseMessage</returns>
        public async System.Threading.Tasks.Task<PublishResponseMessage> PublishAsync(PublishRequestMessage? publishRequestMessage = default(PublishRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PublishResponseMessage> localVarResponse = await PublishWithHttpInfoAsync(publishRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishRequestMessage">PublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PublishResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PublishResponseMessage>> PublishWithHttpInfoAsync(PublishRequestMessage? publishRequestMessage = default(PublishRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = publishRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.Publish";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PublishResponseMessage>("/publish", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Publish", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readRequestMessage">ReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReadResponseMessage</returns>
        public ReadResponseMessage Read(ReadRequestMessage? readRequestMessage = default(ReadRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ReadResponseMessage> localVarResponse = ReadWithHttpInfo(readRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readRequestMessage">ReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReadResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<ReadResponseMessage> ReadWithHttpInfo(ReadRequestMessage? readRequestMessage = default(ReadRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = readRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.Read";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ReadResponseMessage>("/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Read", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readRequestMessage">ReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReadResponseMessage</returns>
        public async System.Threading.Tasks.Task<ReadResponseMessage> ReadAsync(ReadRequestMessage? readRequestMessage = default(ReadRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ReadResponseMessage> localVarResponse = await ReadWithHttpInfoAsync(readRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readRequestMessage">ReadRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReadResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ReadResponseMessage>> ReadWithHttpInfoAsync(ReadRequestMessage? readRequestMessage = default(ReadRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = readRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.Read";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReadResponseMessage>("/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Read", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNodesRequestMessage">RegisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegisterNodesResponseMessage</returns>
        public RegisterNodesResponseMessage RegisterNodes(RegisterNodesRequestMessage? registerNodesRequestMessage = default(RegisterNodesRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RegisterNodesResponseMessage> localVarResponse = RegisterNodesWithHttpInfo(registerNodesRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNodesRequestMessage">RegisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegisterNodesResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<RegisterNodesResponseMessage> RegisterNodesWithHttpInfo(RegisterNodesRequestMessage? registerNodesRequestMessage = default(RegisterNodesRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = registerNodesRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.RegisterNodes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RegisterNodesResponseMessage>("/registernodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNodesRequestMessage">RegisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegisterNodesResponseMessage</returns>
        public async System.Threading.Tasks.Task<RegisterNodesResponseMessage> RegisterNodesAsync(RegisterNodesRequestMessage? registerNodesRequestMessage = default(RegisterNodesRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RegisterNodesResponseMessage> localVarResponse = await RegisterNodesWithHttpInfoAsync(registerNodesRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerNodesRequestMessage">RegisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegisterNodesResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RegisterNodesResponseMessage>> RegisterNodesWithHttpInfoAsync(RegisterNodesRequestMessage? registerNodesRequestMessage = default(RegisterNodesRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = registerNodesRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.RegisterNodes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RegisterNodesResponseMessage>("/registernodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegisterNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="republishRequestMessage">RepublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RepublishResponseMessage</returns>
        public RepublishResponseMessage Republish(RepublishRequestMessage? republishRequestMessage = default(RepublishRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RepublishResponseMessage> localVarResponse = RepublishWithHttpInfo(republishRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="republishRequestMessage">RepublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RepublishResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<RepublishResponseMessage> RepublishWithHttpInfo(RepublishRequestMessage? republishRequestMessage = default(RepublishRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = republishRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.Republish";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RepublishResponseMessage>("/republish", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Republish", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="republishRequestMessage">RepublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RepublishResponseMessage</returns>
        public async System.Threading.Tasks.Task<RepublishResponseMessage> RepublishAsync(RepublishRequestMessage? republishRequestMessage = default(RepublishRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RepublishResponseMessage> localVarResponse = await RepublishWithHttpInfoAsync(republishRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="republishRequestMessage">RepublishRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RepublishResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RepublishResponseMessage>> RepublishWithHttpInfoAsync(RepublishRequestMessage? republishRequestMessage = default(RepublishRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = republishRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.Republish";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RepublishResponseMessage>("/republish", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Republish", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setMonitoringModeRequestMessage">SetMonitoringModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetMonitoringModeResponseMessage</returns>
        public SetMonitoringModeResponseMessage SetMonitoringMode(SetMonitoringModeRequestMessage? setMonitoringModeRequestMessage = default(SetMonitoringModeRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SetMonitoringModeResponseMessage> localVarResponse = SetMonitoringModeWithHttpInfo(setMonitoringModeRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setMonitoringModeRequestMessage">SetMonitoringModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetMonitoringModeResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<SetMonitoringModeResponseMessage> SetMonitoringModeWithHttpInfo(SetMonitoringModeRequestMessage? setMonitoringModeRequestMessage = default(SetMonitoringModeRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setMonitoringModeRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.SetMonitoringMode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SetMonitoringModeResponseMessage>("/setmonitoringmode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetMonitoringMode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setMonitoringModeRequestMessage">SetMonitoringModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetMonitoringModeResponseMessage</returns>
        public async System.Threading.Tasks.Task<SetMonitoringModeResponseMessage> SetMonitoringModeAsync(SetMonitoringModeRequestMessage? setMonitoringModeRequestMessage = default(SetMonitoringModeRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SetMonitoringModeResponseMessage> localVarResponse = await SetMonitoringModeWithHttpInfoAsync(setMonitoringModeRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setMonitoringModeRequestMessage">SetMonitoringModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetMonitoringModeResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SetMonitoringModeResponseMessage>> SetMonitoringModeWithHttpInfoAsync(SetMonitoringModeRequestMessage? setMonitoringModeRequestMessage = default(SetMonitoringModeRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setMonitoringModeRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.SetMonitoringMode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetMonitoringModeResponseMessage>("/setmonitoringmode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetMonitoringMode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPublishingModeRequestMessage">SetPublishingModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetPublishingModeResponseMessage</returns>
        public SetPublishingModeResponseMessage SetPublishingMode(SetPublishingModeRequestMessage? setPublishingModeRequestMessage = default(SetPublishingModeRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SetPublishingModeResponseMessage> localVarResponse = SetPublishingModeWithHttpInfo(setPublishingModeRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPublishingModeRequestMessage">SetPublishingModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetPublishingModeResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<SetPublishingModeResponseMessage> SetPublishingModeWithHttpInfo(SetPublishingModeRequestMessage? setPublishingModeRequestMessage = default(SetPublishingModeRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setPublishingModeRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.SetPublishingMode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SetPublishingModeResponseMessage>("/setpublishingmode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPublishingMode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPublishingModeRequestMessage">SetPublishingModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetPublishingModeResponseMessage</returns>
        public async System.Threading.Tasks.Task<SetPublishingModeResponseMessage> SetPublishingModeAsync(SetPublishingModeRequestMessage? setPublishingModeRequestMessage = default(SetPublishingModeRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SetPublishingModeResponseMessage> localVarResponse = await SetPublishingModeWithHttpInfoAsync(setPublishingModeRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setPublishingModeRequestMessage">SetPublishingModeRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetPublishingModeResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SetPublishingModeResponseMessage>> SetPublishingModeWithHttpInfoAsync(SetPublishingModeRequestMessage? setPublishingModeRequestMessage = default(SetPublishingModeRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setPublishingModeRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.SetPublishingMode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetPublishingModeResponseMessage>("/setpublishingmode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetPublishingMode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTriggeringRequestMessage">SetTriggeringRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetTriggeringResponseMessage</returns>
        public SetTriggeringResponseMessage SetTriggering(SetTriggeringRequestMessage? setTriggeringRequestMessage = default(SetTriggeringRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<SetTriggeringResponseMessage> localVarResponse = SetTriggeringWithHttpInfo(setTriggeringRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTriggeringRequestMessage">SetTriggeringRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetTriggeringResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<SetTriggeringResponseMessage> SetTriggeringWithHttpInfo(SetTriggeringRequestMessage? setTriggeringRequestMessage = default(SetTriggeringRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setTriggeringRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.SetTriggering";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SetTriggeringResponseMessage>("/settriggering", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetTriggering", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTriggeringRequestMessage">SetTriggeringRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetTriggeringResponseMessage</returns>
        public async System.Threading.Tasks.Task<SetTriggeringResponseMessage> SetTriggeringAsync(SetTriggeringRequestMessage? setTriggeringRequestMessage = default(SetTriggeringRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<SetTriggeringResponseMessage> localVarResponse = await SetTriggeringWithHttpInfoAsync(setTriggeringRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setTriggeringRequestMessage">SetTriggeringRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetTriggeringResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<SetTriggeringResponseMessage>> SetTriggeringWithHttpInfoAsync(SetTriggeringRequestMessage? setTriggeringRequestMessage = default(SetTriggeringRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = setTriggeringRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.SetTriggering";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetTriggeringResponseMessage>("/settriggering", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetTriggering", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSubscriptionsRequestMessage">TransferSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransferSubscriptionsResponseMessage</returns>
        public TransferSubscriptionsResponseMessage TransferSubscriptions(TransferSubscriptionsRequestMessage? transferSubscriptionsRequestMessage = default(TransferSubscriptionsRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransferSubscriptionsResponseMessage> localVarResponse = TransferSubscriptionsWithHttpInfo(transferSubscriptionsRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSubscriptionsRequestMessage">TransferSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransferSubscriptionsResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransferSubscriptionsResponseMessage> TransferSubscriptionsWithHttpInfo(TransferSubscriptionsRequestMessage? transferSubscriptionsRequestMessage = default(TransferSubscriptionsRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferSubscriptionsRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.TransferSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferSubscriptionsResponseMessage>("/transfersubscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSubscriptionsRequestMessage">TransferSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferSubscriptionsResponseMessage</returns>
        public async System.Threading.Tasks.Task<TransferSubscriptionsResponseMessage> TransferSubscriptionsAsync(TransferSubscriptionsRequestMessage? transferSubscriptionsRequestMessage = default(TransferSubscriptionsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransferSubscriptionsResponseMessage> localVarResponse = await TransferSubscriptionsWithHttpInfoAsync(transferSubscriptionsRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferSubscriptionsRequestMessage">TransferSubscriptionsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferSubscriptionsResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransferSubscriptionsResponseMessage>> TransferSubscriptionsWithHttpInfoAsync(TransferSubscriptionsRequestMessage? transferSubscriptionsRequestMessage = default(TransferSubscriptionsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transferSubscriptionsRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.TransferSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferSubscriptionsResponseMessage>("/transfersubscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translateBrowsePathsToNodeIdsRequestMessage">TranslateBrowsePathsToNodeIdsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TranslateBrowsePathsToNodeIdsResponseMessage</returns>
        public TranslateBrowsePathsToNodeIdsResponseMessage TranslateBrowsePathsToNodeIds(TranslateBrowsePathsToNodeIdsRequestMessage? translateBrowsePathsToNodeIdsRequestMessage = default(TranslateBrowsePathsToNodeIdsRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TranslateBrowsePathsToNodeIdsResponseMessage> localVarResponse = TranslateBrowsePathsToNodeIdsWithHttpInfo(translateBrowsePathsToNodeIdsRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translateBrowsePathsToNodeIdsRequestMessage">TranslateBrowsePathsToNodeIdsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TranslateBrowsePathsToNodeIdsResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<TranslateBrowsePathsToNodeIdsResponseMessage> TranslateBrowsePathsToNodeIdsWithHttpInfo(TranslateBrowsePathsToNodeIdsRequestMessage? translateBrowsePathsToNodeIdsRequestMessage = default(TranslateBrowsePathsToNodeIdsRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = translateBrowsePathsToNodeIdsRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.TranslateBrowsePathsToNodeIds";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<TranslateBrowsePathsToNodeIdsResponseMessage>("/translate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TranslateBrowsePathsToNodeIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translateBrowsePathsToNodeIdsRequestMessage">TranslateBrowsePathsToNodeIdsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TranslateBrowsePathsToNodeIdsResponseMessage</returns>
        public async System.Threading.Tasks.Task<TranslateBrowsePathsToNodeIdsResponseMessage> TranslateBrowsePathsToNodeIdsAsync(TranslateBrowsePathsToNodeIdsRequestMessage? translateBrowsePathsToNodeIdsRequestMessage = default(TranslateBrowsePathsToNodeIdsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TranslateBrowsePathsToNodeIdsResponseMessage> localVarResponse = await TranslateBrowsePathsToNodeIdsWithHttpInfoAsync(translateBrowsePathsToNodeIdsRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="translateBrowsePathsToNodeIdsRequestMessage">TranslateBrowsePathsToNodeIdsRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TranslateBrowsePathsToNodeIdsResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TranslateBrowsePathsToNodeIdsResponseMessage>> TranslateBrowsePathsToNodeIdsWithHttpInfoAsync(TranslateBrowsePathsToNodeIdsRequestMessage? translateBrowsePathsToNodeIdsRequestMessage = default(TranslateBrowsePathsToNodeIdsRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = translateBrowsePathsToNodeIdsRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.TranslateBrowsePathsToNodeIds";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TranslateBrowsePathsToNodeIdsResponseMessage>("/translate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TranslateBrowsePathsToNodeIds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unregisterNodesRequestMessage">UnregisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UnregisterNodesResponseMessage</returns>
        public UnregisterNodesResponseMessage UnregisterNodes(UnregisterNodesRequestMessage? unregisterNodesRequestMessage = default(UnregisterNodesRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<UnregisterNodesResponseMessage> localVarResponse = UnregisterNodesWithHttpInfo(unregisterNodesRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unregisterNodesRequestMessage">UnregisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UnregisterNodesResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<UnregisterNodesResponseMessage> UnregisterNodesWithHttpInfo(UnregisterNodesRequestMessage? unregisterNodesRequestMessage = default(UnregisterNodesRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = unregisterNodesRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.UnregisterNodes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UnregisterNodesResponseMessage>("/unregisternodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnregisterNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unregisterNodesRequestMessage">UnregisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UnregisterNodesResponseMessage</returns>
        public async System.Threading.Tasks.Task<UnregisterNodesResponseMessage> UnregisterNodesAsync(UnregisterNodesRequestMessage? unregisterNodesRequestMessage = default(UnregisterNodesRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<UnregisterNodesResponseMessage> localVarResponse = await UnregisterNodesWithHttpInfoAsync(unregisterNodesRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unregisterNodesRequestMessage">UnregisterNodesRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UnregisterNodesResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UnregisterNodesResponseMessage>> UnregisterNodesWithHttpInfoAsync(UnregisterNodesRequestMessage? unregisterNodesRequestMessage = default(UnregisterNodesRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = unregisterNodesRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.UnregisterNodes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UnregisterNodesResponseMessage>("/unregisternodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnregisterNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writeRequestMessage">WriteRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WriteResponseMessage</returns>
        public WriteResponseMessage Write(WriteRequestMessage? writeRequestMessage = default(WriteRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<WriteResponseMessage> localVarResponse = WriteWithHttpInfo(writeRequestMessage);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writeRequestMessage">WriteRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WriteResponseMessage</returns>
        public Org.OpenAPITools.Client.ApiResponse<WriteResponseMessage> WriteWithHttpInfo(WriteRequestMessage? writeRequestMessage = default(WriteRequestMessage?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = writeRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.Write";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<WriteResponseMessage>("/write", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Write", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writeRequestMessage">WriteRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WriteResponseMessage</returns>
        public async System.Threading.Tasks.Task<WriteResponseMessage> WriteAsync(WriteRequestMessage? writeRequestMessage = default(WriteRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<WriteResponseMessage> localVarResponse = await WriteWithHttpInfoAsync(writeRequestMessage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="writeRequestMessage">WriteRequestMessage (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WriteResponseMessage)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<WriteResponseMessage>> WriteWithHttpInfoAsync(WriteRequestMessage? writeRequestMessage = default(WriteRequestMessage?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = writeRequestMessage;

            localVarRequestOptions.Operation = "DefaultApi.Write";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WriteResponseMessage>("/write", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Write", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
