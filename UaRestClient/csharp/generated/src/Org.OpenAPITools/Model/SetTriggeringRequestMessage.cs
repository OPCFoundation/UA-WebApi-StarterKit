/*
 * OPC UA REST API
 *
 * This API provides simple REST based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 1.05.4
 * Contact: office@opcfoundation.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SetTriggeringRequestMessage
    /// </summary>
    [DataContract(Name = "SetTriggeringRequestMessage")]
    public partial class SetTriggeringRequestMessage : IEquatable<SetTriggeringRequestMessage>, IValidatableObject
    {
        /// <summary>
        /// Defines ServiceId
        /// </summary>
        public enum ServiceIdEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_773 for value: 773
            /// </summary>
            NUMBER_773 = 773
        }


        /// <summary>
        /// Gets or Sets ServiceId
        /// </summary>
        [DataMember(Name = "ServiceId", EmitDefaultValue = false)]
        public ServiceIdEnum? ServiceId { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetTriggeringRequestMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SetTriggeringRequestMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetTriggeringRequestMessage" /> class.
        /// </summary>
        /// <param name="namespaceUris">namespaceUris.</param>
        /// <param name="serverUris">serverUris.</param>
        /// <param name="localeIds">localeIds.</param>
        /// <param name="serviceId">serviceId.</param>
        /// <param name="body">body (required).</param>
        public SetTriggeringRequestMessage(List<string> namespaceUris = default(List<string>), List<string> serverUris = default(List<string>), List<string> localeIds = default(List<string>), ServiceIdEnum? serviceId = default(ServiceIdEnum?), SetTriggeringRequest body = default(SetTriggeringRequest))
        {
            // to ensure "body" is required (not null)
            if (body == null)
            {
                throw new ArgumentNullException("body is a required property for SetTriggeringRequestMessage and cannot be null");
            }
            this.Body = body;
            this.NamespaceUris = namespaceUris;
            this.ServerUris = serverUris;
            this.LocaleIds = localeIds;
            this.ServiceId = serviceId;
        }

        /// <summary>
        /// Gets or Sets NamespaceUris
        /// </summary>
        [DataMember(Name = "NamespaceUris", EmitDefaultValue = false)]
        public List<string> NamespaceUris { get; set; }

        /// <summary>
        /// Gets or Sets ServerUris
        /// </summary>
        [DataMember(Name = "ServerUris", EmitDefaultValue = false)]
        public List<string> ServerUris { get; set; }

        /// <summary>
        /// Gets or Sets LocaleIds
        /// </summary>
        [DataMember(Name = "LocaleIds", EmitDefaultValue = false)]
        public List<string> LocaleIds { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "Body", IsRequired = true, EmitDefaultValue = true)]
        public SetTriggeringRequest Body { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetTriggeringRequestMessage {\n");
            sb.Append("  NamespaceUris: ").Append(NamespaceUris).Append("\n");
            sb.Append("  ServerUris: ").Append(ServerUris).Append("\n");
            sb.Append("  LocaleIds: ").Append(LocaleIds).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetTriggeringRequestMessage);
        }

        /// <summary>
        /// Returns true if SetTriggeringRequestMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of SetTriggeringRequestMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetTriggeringRequestMessage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NamespaceUris == input.NamespaceUris ||
                    this.NamespaceUris != null &&
                    input.NamespaceUris != null &&
                    this.NamespaceUris.SequenceEqual(input.NamespaceUris)
                ) && 
                (
                    this.ServerUris == input.ServerUris ||
                    this.ServerUris != null &&
                    input.ServerUris != null &&
                    this.ServerUris.SequenceEqual(input.ServerUris)
                ) && 
                (
                    this.LocaleIds == input.LocaleIds ||
                    this.LocaleIds != null &&
                    input.LocaleIds != null &&
                    this.LocaleIds.SequenceEqual(input.LocaleIds)
                ) && 
                (
                    this.ServiceId == input.ServiceId ||
                    this.ServiceId.Equals(input.ServiceId)
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NamespaceUris != null)
                {
                    hashCode = (hashCode * 59) + this.NamespaceUris.GetHashCode();
                }
                if (this.ServerUris != null)
                {
                    hashCode = (hashCode * 59) + this.ServerUris.GetHashCode();
                }
                if (this.LocaleIds != null)
                {
                    hashCode = (hashCode * 59) + this.LocaleIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ServiceId.GetHashCode();
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
