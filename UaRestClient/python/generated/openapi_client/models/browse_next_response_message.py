# coding: utf-8

"""
    OPC UA REST API

    This API provides simple REST based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from openapi_client.models.browse_next_response import BrowseNextResponse

class BrowseNextResponseMessage(BaseModel):
    """
    BrowseNextResponseMessage
    """
    namespace_uris: Optional[conlist(StrictStr)] = Field(None, alias="NamespaceUris")
    server_uris: Optional[conlist(StrictStr)] = Field(None, alias="ServerUris")
    service_id: Optional[StrictInt] = Field(None, alias="ServiceId")
    body: Optional[BrowseNextResponse] = Field(None, alias="Body")
    __properties = ["NamespaceUris", "ServerUris", "ServiceId", "Body"]

    @validator('service_id')
    def service_id_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (0, 534, 395):
            raise ValueError("must be one of enum values (0, 534, 395)")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BrowseNextResponseMessage:
        """Create an instance of BrowseNextResponseMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of body
        if self.body:
            _dict['Body'] = self.body.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BrowseNextResponseMessage:
        """Create an instance of BrowseNextResponseMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BrowseNextResponseMessage.parse_obj(obj)

        _obj = BrowseNextResponseMessage.parse_obj({
            "namespace_uris": obj.get("NamespaceUris"),
            "server_uris": obj.get("ServerUris"),
            "service_id": obj.get("ServiceId"),
            "body": BrowseNextResponse.from_dict(obj.get("Body")) if obj.get("Body") is not None else None
        })
        return _obj


