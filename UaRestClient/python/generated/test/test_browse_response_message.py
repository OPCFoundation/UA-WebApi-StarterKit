# coding: utf-8

"""
    OPC UA REST API

    This API provides simple REST based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.browse_response_message import BrowseResponseMessage  # noqa: E501

class TestBrowseResponseMessage(unittest.TestCase):
    """BrowseResponseMessage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BrowseResponseMessage:
        """Test BrowseResponseMessage
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BrowseResponseMessage`
        """
        model = BrowseResponseMessage()  # noqa: E501
        if include_optional:
            return BrowseResponseMessage(
                namespace_uris = [
                    ''
                    ],
                server_uris = [
                    ''
                    ],
                service_id = 0,
                body = openapi_client.models.browse_response.BrowseResponse(
                    response_header = openapi_client.models.response_header.ResponseHeader(
                        timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        request_handle = 0, 
                        service_result = 0, 
                        service_diagnostics = openapi_client.models.diagnostic_info.DiagnosticInfo(
                            symbolic_id = 56, 
                            namespace_uri = 56, 
                            locale = 56, 
                            localized_text = 56, 
                            additional_info = '', 
                            inner_status_code = 0, 
                            inner_diagnostic_info = openapi_client.models.diagnostic_info.DiagnosticInfo(
                                symbolic_id = 56, 
                                namespace_uri = 56, 
                                locale = 56, 
                                localized_text = 56, 
                                additional_info = '', 
                                inner_status_code = 0, ), ), 
                        string_table = [
                            ''
                            ], 
                        additional_header = openapi_client.models.extension_object.ExtensionObject(
                            type_id = '', 
                            encoding = 0, 
                            body = openapi_client.models.body.Body(), ), ), 
                    results = [
                        openapi_client.models.browse_result.BrowseResult(
                            status_code = 0, 
                            continuation_point = 'YQ==', 
                            references = [
                                openapi_client.models.reference_description.ReferenceDescription(
                                    reference_type_id = '', 
                                    is_forward = True, 
                                    node_id = '', 
                                    browse_name = '', 
                                    display_name = openapi_client.models.localized_text.LocalizedText(
                                        locale = '', 
                                        text = '', ), 
                                    node_class = 56, 
                                    type_definition = '', )
                                ], )
                        ], 
                    diagnostic_infos = [
                        
                        ], )
            )
        else:
            return BrowseResponseMessage(
        )
        """

    def testBrowseResponseMessage(self):
        """Test BrowseResponseMessage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
