# coding: utf-8

"""
    OPC UA REST API

    This API provides simple REST based access to an OPC UA server.

    The version of the OpenAPI document: 1.05.4
    Contact: office@opcfoundation.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.set_monitoring_mode_request_message import SetMonitoringModeRequestMessage  # noqa: E501

class TestSetMonitoringModeRequestMessage(unittest.TestCase):
    """SetMonitoringModeRequestMessage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SetMonitoringModeRequestMessage:
        """Test SetMonitoringModeRequestMessage
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SetMonitoringModeRequestMessage`
        """
        model = SetMonitoringModeRequestMessage()  # noqa: E501
        if include_optional:
            return SetMonitoringModeRequestMessage(
                namespace_uris = [
                    ''
                    ],
                server_uris = [
                    ''
                    ],
                locale_ids = [
                    ''
                    ],
                service_id = 0,
                body = openapi_client.models.set_monitoring_mode_request.SetMonitoringModeRequest(
                    request_header = openapi_client.models.request_header.RequestHeader(
                        authentication_token = '', 
                        timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        request_handle = 0, 
                        return_diagnostics = 0, 
                        audit_entry_id = '', 
                        timeout_hint = 0, 
                        additional_header = openapi_client.models.extension_object.ExtensionObject(
                            type_id = '', 
                            encoding = 0, 
                            body = openapi_client.models.body.Body(), ), ), 
                    subscription_id = 0, 
                    monitoring_mode = 56, 
                    monitored_item_ids = [
                        0
                        ], )
            )
        else:
            return SetMonitoringModeRequestMessage(
                body = openapi_client.models.set_monitoring_mode_request.SetMonitoringModeRequest(
                    request_header = openapi_client.models.request_header.RequestHeader(
                        authentication_token = '', 
                        timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        request_handle = 0, 
                        return_diagnostics = 0, 
                        audit_entry_id = '', 
                        timeout_hint = 0, 
                        additional_header = openapi_client.models.extension_object.ExtensionObject(
                            type_id = '', 
                            encoding = 0, 
                            body = openapi_client.models.body.Body(), ), ), 
                    subscription_id = 0, 
                    monitoring_mode = 56, 
                    monitored_item_ids = [
                        0
                        ], ),
        )
        """

    def testSetMonitoringModeRequestMessage(self):
        """Test SetMonitoringModeRequestMessage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
