/* tslint:disable */
/* eslint-disable */
/**
 * OPC UA REST API
 * This API provides simple REST based access to an OPC UA server.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: office@opcfoundation.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BrowseNextRequestMessage,
  BrowseNextResponseMessage,
  BrowseRequestMessage,
  BrowseResponseMessage,
  CallRequestMessage,
  CallResponseMessage,
  HistoryReadRequestMessage,
  HistoryReadResponseMessage,
  HistoryUpdateRequestMessage,
  HistoryUpdateResponseMessage,
  ReadRequestMessage,
  ReadResponseMessage,
  TranslateBrowsePathsToNodeIdsRequestMessage,
  TranslateBrowsePathsToNodeIdsResponseMessage,
  WriteRequestMessage,
  WriteResponseMessage,
} from '../models/index';
import {
    BrowseNextRequestMessageFromJSON,
    BrowseNextRequestMessageToJSON,
    BrowseNextResponseMessageFromJSON,
    BrowseNextResponseMessageToJSON,
    BrowseRequestMessageFromJSON,
    BrowseRequestMessageToJSON,
    BrowseResponseMessageFromJSON,
    BrowseResponseMessageToJSON,
    CallRequestMessageFromJSON,
    CallRequestMessageToJSON,
    CallResponseMessageFromJSON,
    CallResponseMessageToJSON,
    HistoryReadRequestMessageFromJSON,
    HistoryReadRequestMessageToJSON,
    HistoryReadResponseMessageFromJSON,
    HistoryReadResponseMessageToJSON,
    HistoryUpdateRequestMessageFromJSON,
    HistoryUpdateRequestMessageToJSON,
    HistoryUpdateResponseMessageFromJSON,
    HistoryUpdateResponseMessageToJSON,
    ReadRequestMessageFromJSON,
    ReadRequestMessageToJSON,
    ReadResponseMessageFromJSON,
    ReadResponseMessageToJSON,
    TranslateBrowsePathsToNodeIdsRequestMessageFromJSON,
    TranslateBrowsePathsToNodeIdsRequestMessageToJSON,
    TranslateBrowsePathsToNodeIdsResponseMessageFromJSON,
    TranslateBrowsePathsToNodeIdsResponseMessageToJSON,
    WriteRequestMessageFromJSON,
    WriteRequestMessageToJSON,
    WriteResponseMessageFromJSON,
    WriteResponseMessageToJSON,
} from '../models/index';

export interface BrowseRequest {
    browseRequestMessage?: BrowseRequestMessage;
}

export interface BrowseNextRequest {
    browseNextRequestMessage?: BrowseNextRequestMessage;
}

export interface CallRequest {
    callRequestMessage?: CallRequestMessage;
}

export interface HistoryReadRequest {
    historyReadRequestMessage?: HistoryReadRequestMessage;
}

export interface HistoryUpdateRequest {
    historyUpdateRequestMessage?: HistoryUpdateRequestMessage;
}

export interface ReadRequest {
    readRequestMessage?: ReadRequestMessage;
}

export interface TranslateBrowsePathsToNodeIdsRequest {
    translateBrowsePathsToNodeIdsRequestMessage?: TranslateBrowsePathsToNodeIdsRequestMessage;
}

export interface WriteRequest {
    writeRequestMessage?: WriteRequestMessage;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async browseRaw(requestParameters: BrowseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrowseResponseMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/opcua/browse`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BrowseRequestMessageToJSON(requestParameters.browseRequestMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrowseResponseMessageFromJSON(jsonValue));
    }

    /**
     */
    async browse(requestParameters: BrowseRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrowseResponseMessage> {
        const response = await this.browseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async browseNextRaw(requestParameters: BrowseNextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BrowseNextResponseMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/opcua/browsenext`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BrowseNextRequestMessageToJSON(requestParameters.browseNextRequestMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrowseNextResponseMessageFromJSON(jsonValue));
    }

    /**
     */
    async browseNext(requestParameters: BrowseNextRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BrowseNextResponseMessage> {
        const response = await this.browseNextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async callRaw(requestParameters: CallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CallResponseMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/opcua/call`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CallRequestMessageToJSON(requestParameters.callRequestMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CallResponseMessageFromJSON(jsonValue));
    }

    /**
     */
    async call(requestParameters: CallRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CallResponseMessage> {
        const response = await this.callRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async historyReadRaw(requestParameters: HistoryReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HistoryReadResponseMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/opcua/historyread`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HistoryReadRequestMessageToJSON(requestParameters.historyReadRequestMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HistoryReadResponseMessageFromJSON(jsonValue));
    }

    /**
     */
    async historyRead(requestParameters: HistoryReadRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HistoryReadResponseMessage> {
        const response = await this.historyReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async historyUpdateRaw(requestParameters: HistoryUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HistoryUpdateResponseMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/opcua/historyupdate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HistoryUpdateRequestMessageToJSON(requestParameters.historyUpdateRequestMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HistoryUpdateResponseMessageFromJSON(jsonValue));
    }

    /**
     */
    async historyUpdate(requestParameters: HistoryUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HistoryUpdateResponseMessage> {
        const response = await this.historyUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readRaw(requestParameters: ReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadResponseMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/opcua/read`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReadRequestMessageToJSON(requestParameters.readRequestMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadResponseMessageFromJSON(jsonValue));
    }

    /**
     */
    async read(requestParameters: ReadRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadResponseMessage> {
        const response = await this.readRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async translateBrowsePathsToNodeIdsRaw(requestParameters: TranslateBrowsePathsToNodeIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TranslateBrowsePathsToNodeIdsResponseMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/opcua/translate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TranslateBrowsePathsToNodeIdsRequestMessageToJSON(requestParameters.translateBrowsePathsToNodeIdsRequestMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TranslateBrowsePathsToNodeIdsResponseMessageFromJSON(jsonValue));
    }

    /**
     */
    async translateBrowsePathsToNodeIds(requestParameters: TranslateBrowsePathsToNodeIdsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TranslateBrowsePathsToNodeIdsResponseMessage> {
        const response = await this.translateBrowsePathsToNodeIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async writeRaw(requestParameters: WriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WriteResponseMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/opcua/write`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WriteRequestMessageToJSON(requestParameters.writeRequestMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WriteResponseMessageFromJSON(jsonValue));
    }

    /**
     */
    async write(requestParameters: WriteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WriteResponseMessage> {
        const response = await this.writeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
