/* ========================================================================
 * Copyright (c) 2005-2024 The OPC Foundation, Inc. All rights reserved.
 *
 * OPC Foundation MIT License 1.00
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * The complete license agreement can be found here:
 * http://opcfoundation.org/License/MIT/1.00/
 * ======================================================================*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Runtime.Serialization;
using Opc.Ua;

namespace BatteryPassport
{
    #region DataType Identifiers
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public static partial class DataTypes
    {
        /// <remarks />
        public const uint BatteryPassportDataType = 3857;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionDataType = 3858;

        /// <remarks />
        public const uint CarbonFootprintDataType = 3859;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyDataType = 3860;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsDataType = 3861;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationDataType = 3862;

        /// <remarks />
        public const uint PerformanceAndDurabilityDataType = 3863;

        /// <remarks />
        public const uint SupplyChainDueDiligenceDataType = 3864;
    }
    #endregion

    #region Method Identifiers
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public static partial class Methods
    {
        /// <remarks />
        public const uint BatteryType_Package_Open = 5393;

        /// <remarks />
        public const uint BatteryType_Package_Close = 5396;

        /// <remarks />
        public const uint BatteryType_Package_Read = 5398;

        /// <remarks />
        public const uint BatteryType_Package_Write = 5401;

        /// <remarks />
        public const uint BatteryType_Package_GetPosition = 5403;

        /// <remarks />
        public const uint BatteryType_Package_SetPosition = 5406;
    }
    #endregion

    #region Object Identifiers
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public static partial class Objects
    {
        /// <remarks />
        public const uint Batteries = 3937;

        /// <remarks />
        public const uint BatteryType_Package = 5385;

        /// <remarks />
        public const uint BatteryType_CurrentState = 5408;

        /// <remarks />
        public const uint BatteryType_Passport = 5439;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition = 5440;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint = 5584;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency = 5676;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications = 5937;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation = 6016;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability = 6108;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence = 6746;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition = 2498;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint = 2642;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency = 2734;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications = 2995;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation = 3074;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability = 3166;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence = 3804;

        /// <remarks />
        public const uint BatteryPassportDataType_Encoding_DefaultBinary = 3865;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionDataType_Encoding_DefaultBinary = 3866;

        /// <remarks />
        public const uint CarbonFootprintDataType_Encoding_DefaultBinary = 3867;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyDataType_Encoding_DefaultBinary = 3868;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsDataType_Encoding_DefaultBinary = 3869;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationDataType_Encoding_DefaultBinary = 3870;

        /// <remarks />
        public const uint PerformanceAndDurabilityDataType_Encoding_DefaultBinary = 3871;

        /// <remarks />
        public const uint SupplyChainDueDiligenceDataType_Encoding_DefaultBinary = 3872;

        /// <remarks />
        public const uint BatteryPassportDataType_Encoding_DefaultXml = 3897;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionDataType_Encoding_DefaultXml = 3898;

        /// <remarks />
        public const uint CarbonFootprintDataType_Encoding_DefaultXml = 3899;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyDataType_Encoding_DefaultXml = 3900;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsDataType_Encoding_DefaultXml = 3901;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationDataType_Encoding_DefaultXml = 3902;

        /// <remarks />
        public const uint PerformanceAndDurabilityDataType_Encoding_DefaultXml = 3903;

        /// <remarks />
        public const uint SupplyChainDueDiligenceDataType_Encoding_DefaultXml = 3904;

        /// <remarks />
        public const uint BatteryPassportDataType_Encoding_DefaultJson = 3929;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionDataType_Encoding_DefaultJson = 3930;

        /// <remarks />
        public const uint CarbonFootprintDataType_Encoding_DefaultJson = 3931;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyDataType_Encoding_DefaultJson = 3932;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsDataType_Encoding_DefaultJson = 3933;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationDataType_Encoding_DefaultJson = 3934;

        /// <remarks />
        public const uint PerformanceAndDurabilityDataType_Encoding_DefaultJson = 3935;

        /// <remarks />
        public const uint SupplyChainDueDiligenceDataType_Encoding_DefaultJson = 3936;
    }
    #endregion

    #region ObjectType Identifiers
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public static partial class ObjectTypes
    {
        /// <remarks />
        public const uint BatteryCurrentStateType = 3938;

        /// <remarks />
        public const uint BatteryType = 5384;

        /// <remarks />
        public const uint SubmodelType = 2;

        /// <remarks />
        public const uint BatteryPassportType = 2497;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType = 16;

        /// <remarks />
        public const uint CarbonFootprintType = 160;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType = 252;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType = 2146;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType = 592;

        /// <remarks />
        public const uint PerformanceAndDurabilityType = 684;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType = 1322;
    }
    #endregion

    #region Variable Identifiers
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public static partial class Variables
    {
        /// <remarks />
        public const uint BatteryCurrentStateType_Temperature = 3939;

        /// <remarks />
        public const uint BatteryCurrentStateType_Temperature_EURange = 3943;

        /// <remarks />
        public const uint BatteryCurrentStateType_Temperature_EngineeringUnits = 3944;

        /// <remarks />
        public const uint BatteryCurrentStateType_Voltage = 3945;

        /// <remarks />
        public const uint BatteryCurrentStateType_Voltage_EURange = 3949;

        /// <remarks />
        public const uint BatteryCurrentStateType_Voltage_EngineeringUnits = 3950;

        /// <remarks />
        public const uint BatteryCurrentStateType_ChargeRemaining = 3951;

        /// <remarks />
        public const uint BatteryCurrentStateType_ChargeRemaining_EURange = 3955;

        /// <remarks />
        public const uint BatteryCurrentStateType_ChargeRemaining_EngineeringUnits = 3956;

        /// <remarks />
        public const uint BatteryCurrentStateType_TimeRemaining = 6799;

        /// <remarks />
        public const uint BatteryCurrentStateType_TimeRemaining_EURange = 6803;

        /// <remarks />
        public const uint BatteryCurrentStateType_PowerOut = 3957;

        /// <remarks />
        public const uint BatteryCurrentStateType_PowerOut_EURange = 3961;

        /// <remarks />
        public const uint BatteryCurrentStateType_PowerOut_EngineeringUnits = 3962;

        /// <remarks />
        public const uint BatteryCurrentStateType_PowerIn = 3963;

        /// <remarks />
        public const uint BatteryCurrentStateType_PowerIn_EURange = 3967;

        /// <remarks />
        public const uint BatteryCurrentStateType_PowerIn_EngineeringUnits = 3968;

        /// <remarks />
        public const uint BatteryType_Package_Size = 5386;

        /// <remarks />
        public const uint BatteryType_Package_Writable = 5387;

        /// <remarks />
        public const uint BatteryType_Package_UserWritable = 5388;

        /// <remarks />
        public const uint BatteryType_Package_OpenCount = 5389;

        /// <remarks />
        public const uint BatteryType_Package_Open_InputArguments = 5394;

        /// <remarks />
        public const uint BatteryType_Package_Open_OutputArguments = 5395;

        /// <remarks />
        public const uint BatteryType_Package_Close_InputArguments = 5397;

        /// <remarks />
        public const uint BatteryType_Package_Read_InputArguments = 5399;

        /// <remarks />
        public const uint BatteryType_Package_Read_OutputArguments = 5400;

        /// <remarks />
        public const uint BatteryType_Package_Write_InputArguments = 5402;

        /// <remarks />
        public const uint BatteryType_Package_GetPosition_InputArguments = 5404;

        /// <remarks />
        public const uint BatteryType_Package_GetPosition_OutputArguments = 5405;

        /// <remarks />
        public const uint BatteryType_Package_SetPosition_InputArguments = 5407;

        /// <remarks />
        public const uint BatteryType_CurrentState_Temperature = 5409;

        /// <remarks />
        public const uint BatteryType_CurrentState_Temperature_EURange = 5413;

        /// <remarks />
        public const uint BatteryType_CurrentState_Temperature_EngineeringUnits = 5414;

        /// <remarks />
        public const uint BatteryType_CurrentState_Voltage = 5415;

        /// <remarks />
        public const uint BatteryType_CurrentState_Voltage_EURange = 5419;

        /// <remarks />
        public const uint BatteryType_CurrentState_Voltage_EngineeringUnits = 5420;

        /// <remarks />
        public const uint BatteryType_CurrentState_ChargeRemaining = 5421;

        /// <remarks />
        public const uint BatteryType_CurrentState_ChargeRemaining_EURange = 5425;

        /// <remarks />
        public const uint BatteryType_CurrentState_ChargeRemaining_EngineeringUnits = 5426;

        /// <remarks />
        public const uint BatteryType_CurrentState_TimeRemaining = 6805;

        /// <remarks />
        public const uint BatteryType_CurrentState_TimeRemaining_EURange = 6809;

        /// <remarks />
        public const uint BatteryType_CurrentState_PowerOut = 5427;

        /// <remarks />
        public const uint BatteryType_CurrentState_PowerOut_EURange = 5431;

        /// <remarks />
        public const uint BatteryType_CurrentState_PowerOut_EngineeringUnits = 5432;

        /// <remarks />
        public const uint BatteryType_CurrentState_PowerIn = 5433;

        /// <remarks />
        public const uint BatteryType_CurrentState_PowerIn_EURange = 5437;

        /// <remarks />
        public const uint BatteryType_CurrentState_PowerIn_EngineeringUnits = 5438;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials = 5441;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Id = 5442;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_SubCategory = 5443;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Definition = 5444;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Requirements = 5445;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Regulations = 5446;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_AccessRights = 5447;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Behaviour = 5448;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Granularity = 5449;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Pack = 5450;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Module = 5451;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Cell = 5452;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry = 5454;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Id = 5455;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_SubCategory = 5456;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Definition = 5457;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Requirements = 5458;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Regulations = 5459;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_AccessRights = 5460;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Behaviour = 5461;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Granularity = 5462;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Pack = 5463;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Module = 5464;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Cell = 5465;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials = 5467;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Id = 5468;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = 5469;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Definition = 5470;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Requirements = 5471;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Regulations = 5472;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = 5473;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = 5474;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Granularity = 5475;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Pack = 5476;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Module = 5477;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Cell = 5478;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials = 5480;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Id = 5481;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = 5482;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Definition = 5483;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Requirements = 5484;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Regulations = 5485;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = 5486;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = 5487;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Granularity = 5488;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Pack = 5489;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Module = 5490;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Cell = 5491;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials = 5493;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Id = 5494;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = 5495;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Definition = 5496;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Requirements = 5497;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Regulations = 5498;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = 5499;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = 5500;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Granularity = 5501;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Pack = 5502;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Module = 5503;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Cell = 5504;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_EngineeringUnits = 5505;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances = 5506;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Id = 5507;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_SubCategory = 5508;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Definition = 5509;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Requirements = 5510;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Regulations = 5511;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_AccessRights = 5512;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Behaviour = 5513;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Granularity = 5514;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Pack = 5515;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Module = 5516;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Cell = 5517;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances = 5519;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Id = 5520;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_SubCategory = 5521;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Definition = 5522;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Requirements = 5523;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Regulations = 5524;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_AccessRights = 5525;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Behaviour = 5526;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Granularity = 5527;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Pack = 5528;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Module = 5529;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Cell = 5530;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances = 5532;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Id = 5533;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_SubCategory = 5534;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Definition = 5535;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Requirements = 5536;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Regulations = 5537;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_AccessRights = 5538;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Behaviour = 5539;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Granularity = 5540;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Pack = 5541;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Module = 5542;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Cell = 5543;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances = 5545;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Id = 5546;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_SubCategory = 5547;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Definition = 5548;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Requirements = 5549;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Regulations = 5550;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_AccessRights = 5551;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Behaviour = 5552;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Granularity = 5553;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Pack = 5554;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Module = 5555;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Cell = 5556;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances = 5558;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Id = 5559;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_SubCategory = 5560;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Definition = 5561;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Requirements = 5562;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Regulations = 5563;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_AccessRights = 5564;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Behaviour = 5565;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Granularity = 5566;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Pack = 5567;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Module = 5568;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Cell = 5569;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_EngineeringUnits = 5570;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety = 5571;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Id = 5572;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_SubCategory = 5573;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Definition = 5574;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Requirements = 5575;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Regulations = 5576;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_AccessRights = 5577;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Behaviour = 5578;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Granularity = 5579;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Pack = 5580;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Module = 5581;

        /// <remarks />
        public const uint BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Cell = 5582;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint = 5585;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Id = 5586;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_SubCategory = 5587;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Definition = 5588;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Requirements = 5589;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Regulations = 5590;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_AccessRights = 5591;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Behaviour = 5592;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Granularity = 5593;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Pack = 5594;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Module = 5595;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Cell = 5596;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_EngineeringUnits = 5597;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing = 5598;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Id = 5599;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_SubCategory = 5600;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Definition = 5601;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Requirements = 5602;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Regulations = 5603;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_AccessRights = 5604;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Behaviour = 5605;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Granularity = 5606;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Pack = 5607;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Module = 5608;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Cell = 5609;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_EngineeringUnits = 5610;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction = 5611;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Id = 5612;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_SubCategory = 5613;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Definition = 5614;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Requirements = 5615;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Regulations = 5616;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_AccessRights = 5617;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Behaviour = 5618;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Granularity = 5619;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Pack = 5620;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Module = 5621;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Cell = 5622;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_EngineeringUnits = 5623;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution = 5624;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Id = 5625;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_SubCategory = 5626;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Definition = 5627;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Requirements = 5628;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Regulations = 5629;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_AccessRights = 5630;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Behaviour = 5631;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Granularity = 5632;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Pack = 5633;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Module = 5634;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Cell = 5635;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_EngineeringUnits = 5636;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling = 5637;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Id = 5638;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_SubCategory = 5639;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Definition = 5640;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Requirements = 5641;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Regulations = 5642;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_AccessRights = 5643;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Behaviour = 5644;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Granularity = 5645;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Pack = 5646;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Module = 5647;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Cell = 5648;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_EngineeringUnits = 5649;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass = 5650;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Id = 5651;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_SubCategory = 5652;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Definition = 5653;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Requirements = 5654;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Regulations = 5655;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_AccessRights = 5656;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Behaviour = 5657;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Granularity = 5658;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Pack = 5659;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Module = 5660;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Cell = 5661;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy = 5663;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Id = 5664;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_SubCategory = 5665;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Definition = 5666;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Requirements = 5667;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Regulations = 5668;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_AccessRights = 5669;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Behaviour = 5670;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Granularity = 5671;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Pack = 5672;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Module = 5673;

        /// <remarks />
        public const uint BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Cell = 5674;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance = 5677;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Id = 5678;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_SubCategory = 5679;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Definition = 5680;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Requirements = 5681;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Regulations = 5682;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_AccessRights = 5683;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Behaviour = 5684;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Granularity = 5685;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Pack = 5686;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Module = 5687;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Cell = 5688;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack = 5690;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Id = 5691;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_SubCategory = 5692;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Definition = 5693;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Requirements = 5694;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Regulations = 5695;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_AccessRights = 5696;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Behaviour = 5697;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Granularity = 5698;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Pack = 5699;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Module = 5700;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Cell = 5701;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts = 5703;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Id = 5704;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_SubCategory = 5705;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Definition = 5706;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Requirements = 5707;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Regulations = 5708;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_AccessRights = 5709;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Behaviour = 5710;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Granularity = 5711;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Pack = 5712;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Module = 5713;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Cell = 5714;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts = 5716;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Id = 5717;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_SubCategory = 5718;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Definition = 5719;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Requirements = 5720;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Regulations = 5721;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_AccessRights = 5722;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Behaviour = 5723;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Granularity = 5724;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Pack = 5725;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Module = 5726;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Cell = 5727;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts = 5729;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Id = 5730;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_SubCategory = 5731;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Definition = 5732;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Requirements = 5733;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Regulations = 5734;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_AccessRights = 5735;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Behaviour = 5736;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Granularity = 5737;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Pack = 5738;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Module = 5739;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Cell = 5740;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents = 5742;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Id = 5743;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_SubCategory = 5744;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Definition = 5745;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Requirements = 5746;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Regulations = 5747;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_AccessRights = 5748;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Behaviour = 5749;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Granularity = 5750;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Pack = 5751;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Module = 5752;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Cell = 5753;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent = 5755;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Id = 5756;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_SubCategory = 5757;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Definition = 5758;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Requirements = 5759;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Regulations = 5760;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_AccessRights = 5761;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Behaviour = 5762;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Granularity = 5763;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Pack = 5764;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Module = 5765;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Cell = 5766;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions = 5768;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Id = 5769;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_SubCategory = 5770;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Definition = 5771;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Requirements = 5772;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Regulations = 5773;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_AccessRights = 5774;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Behaviour = 5775;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Granularity = 5776;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Pack = 5777;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Module = 5778;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Cell = 5779;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare = 5781;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Id = 5782;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_SubCategory = 5783;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Definition = 5784;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Requirements = 5785;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Regulations = 5786;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_AccessRights = 5787;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Behaviour = 5788;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Granularity = 5789;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Pack = 5790;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Module = 5791;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Cell = 5792;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_EngineeringUnits = 5793;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare = 5794;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Id = 5795;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_SubCategory = 5796;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Definition = 5797;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Requirements = 5798;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Regulations = 5799;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_AccessRights = 5800;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Behaviour = 5801;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Granularity = 5802;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Pack = 5803;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Module = 5804;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Cell = 5805;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_EngineeringUnits = 5806;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare = 5807;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Id = 5808;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_SubCategory = 5809;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Definition = 5810;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Requirements = 5811;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Regulations = 5812;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_AccessRights = 5813;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Behaviour = 5814;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Granularity = 5815;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Pack = 5816;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Module = 5817;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Cell = 5818;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_EngineeringUnits = 5819;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare = 5820;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Id = 5821;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_SubCategory = 5822;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Definition = 5823;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Requirements = 5824;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Regulations = 5825;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_AccessRights = 5826;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Behaviour = 5827;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Granularity = 5828;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Pack = 5829;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Module = 5830;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Cell = 5831;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_EngineeringUnits = 5832;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare = 5833;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Id = 5834;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_SubCategory = 5835;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Definition = 5836;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Requirements = 5837;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Regulations = 5838;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_AccessRights = 5839;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Behaviour = 5840;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Granularity = 5841;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Pack = 5842;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Module = 5843;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Cell = 5844;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_EngineeringUnits = 5845;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare = 5846;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Id = 5847;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_SubCategory = 5848;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Definition = 5849;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Requirements = 5850;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Regulations = 5851;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_AccessRights = 5852;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Behaviour = 5853;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Granularity = 5854;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Pack = 5855;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Module = 5856;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Cell = 5857;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_EngineeringUnits = 5858;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare = 5859;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Id = 5860;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_SubCategory = 5861;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Definition = 5862;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Requirements = 5863;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Regulations = 5864;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_AccessRights = 5865;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Behaviour = 5866;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Granularity = 5867;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Pack = 5868;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Module = 5869;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Cell = 5870;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_EngineeringUnits = 5871;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare = 5872;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Id = 5873;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_SubCategory = 5874;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Definition = 5875;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Requirements = 5876;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Regulations = 5877;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_AccessRights = 5878;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Behaviour = 5879;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Granularity = 5880;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Pack = 5881;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Module = 5882;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Cell = 5883;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_EngineeringUnits = 5884;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare = 5885;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Id = 5886;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_SubCategory = 5887;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Definition = 5888;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Requirements = 5889;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Regulations = 5890;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_AccessRights = 5891;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Behaviour = 5892;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Granularity = 5893;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Pack = 5894;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Module = 5895;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Cell = 5896;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_EngineeringUnits = 5897;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention = 5898;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Id = 5899;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_SubCategory = 5900;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Definition = 5901;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Requirements = 5902;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Regulations = 5903;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_AccessRights = 5904;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Behaviour = 5905;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Granularity = 5906;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Pack = 5907;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Module = 5908;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Cell = 5909;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries = 5911;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Id = 5912;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_SubCategory = 5913;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Definition = 5914;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Requirements = 5915;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Regulations = 5916;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_AccessRights = 5917;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Behaviour = 5918;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Granularity = 5919;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Pack = 5920;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Module = 5921;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Cell = 5922;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations = 5924;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Id = 5925;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_SubCategory = 5926;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Definition = 5927;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Requirements = 5928;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Regulations = 5929;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_AccessRights = 5930;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Behaviour = 5931;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Granularity = 5932;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Pack = 5933;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Module = 5934;

        /// <remarks />
        public const uint BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Cell = 5935;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports = 5938;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Id = 5939;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_SubCategory = 5940;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Definition = 5941;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Requirements = 5942;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Regulations = 5943;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_AccessRights = 5944;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Behaviour = 5945;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Granularity = 5946;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Pack = 5947;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Module = 5948;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Cell = 5949;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol = 5951;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Id = 5952;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_SubCategory = 5953;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Definition = 5954;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Requirements = 5955;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Regulations = 5956;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_AccessRights = 5957;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Behaviour = 5958;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Granularity = 5959;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Pack = 5960;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Module = 5961;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Cell = 5962;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols = 5964;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Id = 5965;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_SubCategory = 5966;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Definition = 5967;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Requirements = 5968;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Regulations = 5969;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_AccessRights = 5970;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Behaviour = 5971;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Granularity = 5972;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Pack = 5973;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Module = 5974;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Cell = 5975;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols = 5977;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Id = 5978;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_SubCategory = 5979;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Definition = 5980;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Requirements = 5981;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Regulations = 5982;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_AccessRights = 5983;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Behaviour = 5984;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Granularity = 5985;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Pack = 5986;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Module = 5987;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Cell = 5988;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity = 5990;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Id = 5991;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_SubCategory = 5992;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Definition = 5993;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Requirements = 5994;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Regulations = 5995;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_AccessRights = 5996;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Behaviour = 5997;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Granularity = 5998;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Pack = 5999;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Module = 6000;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Cell = 6001;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity = 6003;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Id = 6004;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_SubCategory = 6005;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Definition = 6006;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Requirements = 6007;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Regulations = 6008;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_AccessRights = 6009;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Behaviour = 6010;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Granularity = 6011;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Pack = 6012;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Module = 6013;

        /// <remarks />
        public const uint BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Cell = 6014;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier = 6017;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Id = 6018;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_SubCategory = 6019;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Definition = 6020;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Requirements = 6021;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Regulations = 6022;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_AccessRights = 6023;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Behaviour = 6024;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Granularity = 6025;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Pack = 6026;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Module = 6027;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Cell = 6028;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification = 6030;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Id = 6031;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_SubCategory = 6032;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Definition = 6033;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Requirements = 6034;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Regulations = 6035;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_AccessRights = 6036;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Behaviour = 6037;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Granularity = 6038;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Pack = 6039;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Module = 6040;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Cell = 6041;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate = 6043;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Id = 6044;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_SubCategory = 6045;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Definition = 6046;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Requirements = 6047;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Regulations = 6048;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_AccessRights = 6049;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Behaviour = 6050;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Granularity = 6051;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Pack = 6052;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Module = 6053;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Cell = 6054;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace = 6056;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Id = 6057;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_SubCategory = 6058;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Definition = 6059;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Requirements = 6060;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Regulations = 6061;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_AccessRights = 6062;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Behaviour = 6063;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Granularity = 6064;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Pack = 6065;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Module = 6066;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Cell = 6067;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory = 6069;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Id = 6070;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_SubCategory = 6071;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Definition = 6072;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Requirements = 6073;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Regulations = 6074;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_AccessRights = 6075;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Behaviour = 6076;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Granularity = 6077;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Pack = 6078;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Module = 6079;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Cell = 6080;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight = 6082;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Id = 6083;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_SubCategory = 6084;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Definition = 6085;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Requirements = 6086;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Regulations = 6087;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_AccessRights = 6088;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Behaviour = 6089;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Granularity = 6090;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Pack = 6091;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Module = 6092;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Cell = 6093;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_EngineeringUnits = 6094;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus = 6095;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Id = 6096;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_SubCategory = 6097;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Definition = 6098;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Requirements = 6099;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Regulations = 6100;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_AccessRights = 6101;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Behaviour = 6102;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Granularity = 6103;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Pack = 6104;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Module = 6105;

        /// <remarks />
        public const uint BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Cell = 6106;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary = 6109;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Id = 6110;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_SubCategory = 6111;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Definition = 6112;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Requirements = 6113;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Regulations = 6114;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_AccessRights = 6115;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Behaviour = 6116;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Granularity = 6117;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Pack = 6118;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Module = 6119;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Cell = 6120;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_EngineeringUnits = 6121;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary = 6122;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Id = 6123;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_SubCategory = 6124;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Definition = 6125;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Requirements = 6126;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Regulations = 6127;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_AccessRights = 6128;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Behaviour = 6129;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Granularity = 6130;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Pack = 6131;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Module = 6132;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Cell = 6133;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_EngineeringUnits = 6134;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents = 6135;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Id = 6136;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_SubCategory = 6137;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Definition = 6138;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Requirements = 6139;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Regulations = 6140;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_AccessRights = 6141;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Behaviour = 6142;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Granularity = 6143;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Pack = 6144;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Module = 6145;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Cell = 6146;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents = 6148;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Id = 6149;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_SubCategory = 6150;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Definition = 6151;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Requirements = 6152;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Regulations = 6153;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_AccessRights = 6154;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Behaviour = 6155;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Granularity = 6156;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Pack = 6157;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Module = 6158;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Cell = 6159;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents = 6161;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Id = 6162;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_SubCategory = 6163;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Definition = 6164;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Requirements = 6165;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Regulations = 6166;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_AccessRights = 6167;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Behaviour = 6168;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Granularity = 6169;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Pack = 6170;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Module = 6171;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Cell = 6172;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified = 6174;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Id = 6175;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_SubCategory = 6176;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Definition = 6177;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Requirements = 6178;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Regulations = 6179;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_AccessRights = 6180;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Behaviour = 6181;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Granularity = 6182;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Pack = 6183;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Module = 6184;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Cell = 6185;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_EngineeringUnits = 6186;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured = 6187;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Id = 6188;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_SubCategory = 6189;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Definition = 6190;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Requirements = 6191;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Regulations = 6192;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_AccessRights = 6193;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Behaviour = 6194;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Granularity = 6195;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Pack = 6196;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Module = 6197;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Cell = 6198;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_EngineeringUnits = 6199;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE = 6200;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Id = 6201;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_SubCategory = 6202;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Definition = 6203;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Requirements = 6204;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Regulations = 6205;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_AccessRights = 6206;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Behaviour = 6207;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Granularity = 6208;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Pack = 6209;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Module = 6210;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Cell = 6211;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_EngineeringUnits = 6212;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate = 6213;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Id = 6214;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_SubCategory = 6215;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Definition = 6216;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Requirements = 6217;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Regulations = 6218;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_AccessRights = 6219;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Behaviour = 6220;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Granularity = 6221;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Pack = 6222;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Module = 6223;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Cell = 6224;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_EngineeringUnits = 6225;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate = 6226;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Id = 6227;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_SubCategory = 6228;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Definition = 6229;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Requirements = 6230;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Regulations = 6231;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_AccessRights = 6232;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Behaviour = 6233;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Granularity = 6234;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Pack = 6235;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Module = 6236;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Cell = 6237;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_EngineeringUnits = 6238;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates = 6239;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Id = 6240;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_SubCategory = 6241;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Definition = 6242;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Requirements = 6243;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Regulations = 6244;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_AccessRights = 6245;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Behaviour = 6246;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Granularity = 6247;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Pack = 6248;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Module = 6249;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Cell = 6250;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_EngineeringUnits = 6251;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatedCapacity = 6252;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Id = 6253;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatedCapacity_SubCategory = 6254;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Definition = 6255;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Requirements = 6256;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Regulations = 6257;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatedCapacity_AccessRights = 6258;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Behaviour = 6259;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Granularity = 6260;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Pack = 6261;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Module = 6262;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Cell = 6263;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatedCapacity_EngineeringUnits = 6264;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingCapacity = 6265;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Id = 6266;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_SubCategory = 6267;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Definition = 6268;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Requirements = 6269;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Regulations = 6270;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_AccessRights = 6271;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Behaviour = 6272;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Granularity = 6273;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Pack = 6274;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Module = 6275;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Cell = 6276;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_EngineeringUnits = 6277;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityFade = 6278;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityFade_Id = 6279;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityFade_SubCategory = 6280;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityFade_Definition = 6281;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityFade_Requirements = 6282;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityFade_Regulations = 6283;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityFade_AccessRights = 6284;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityFade_Behaviour = 6285;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityFade_Granularity = 6286;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityFade_Pack = 6287;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityFade_Module = 6288;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityFade_Cell = 6289;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityFade_EngineeringUnits = 6290;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC = 6291;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Id = 6292;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_SubCategory = 6293;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Definition = 6294;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Requirements = 6295;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Regulations = 6296;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_AccessRights = 6297;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Behaviour = 6298;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Granularity = 6299;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Pack = 6300;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Module = 6301;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Cell = 6302;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_EngineeringUnits = 6303;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NominalVoltage = 6304;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Id = 6305;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NominalVoltage_SubCategory = 6306;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Definition = 6307;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Requirements = 6308;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Regulations = 6309;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NominalVoltage_AccessRights = 6310;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Behaviour = 6311;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Granularity = 6312;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Pack = 6313;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Module = 6314;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Cell = 6315;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NominalVoltage_EngineeringUnits = 6316;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MinimumVoltage = 6317;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Id = 6318;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_SubCategory = 6319;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Definition = 6320;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Requirements = 6321;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Regulations = 6322;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_AccessRights = 6323;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Behaviour = 6324;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Granularity = 6325;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Pack = 6326;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Module = 6327;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Cell = 6328;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_EngineeringUnits = 6329;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumVoltage = 6330;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Id = 6331;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_SubCategory = 6332;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Definition = 6333;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Requirements = 6334;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Regulations = 6335;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_AccessRights = 6336;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Behaviour = 6337;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Granularity = 6338;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Pack = 6339;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Module = 6340;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Cell = 6341;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_EngineeringUnits = 6342;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability = 6343;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Id = 6344;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_SubCategory = 6345;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Definition = 6346;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Requirements = 6347;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Regulations = 6348;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_AccessRights = 6349;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Behaviour = 6350;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Granularity = 6351;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Pack = 6352;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Module = 6353;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Cell = 6354;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_EngineeringUnits = 6355;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability = 6356;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Id = 6357;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_SubCategory = 6358;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Definition = 6359;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Requirements = 6360;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Regulations = 6361;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_AccessRights = 6362;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Behaviour = 6363;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Granularity = 6364;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Pack = 6365;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Module = 6366;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Cell = 6367;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_EngineeringUnits = 6368;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade = 6369;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Id = 6370;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_SubCategory = 6371;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Definition = 6372;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Requirements = 6373;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Regulations = 6374;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_AccessRights = 6375;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Behaviour = 6376;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Granularity = 6377;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Pack = 6378;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Module = 6379;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Cell = 6380;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_EngineeringUnits = 6381;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower = 6382;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Id = 6383;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_SubCategory = 6384;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Definition = 6385;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Requirements = 6386;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Regulations = 6387;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_AccessRights = 6388;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Behaviour = 6389;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Granularity = 6390;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Pack = 6391;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Module = 6392;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Cell = 6393;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_EngineeringUnits = 6394;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh = 6395;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Id = 6396;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_SubCategory = 6397;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Definition = 6398;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Requirements = 6399;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Regulations = 6400;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_AccessRights = 6401;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Behaviour = 6402;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Granularity = 6403;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Pack = 6404;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Module = 6405;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Cell = 6406;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_EngineeringUnits = 6407;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency = 6408;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Id = 6409;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_SubCategory = 6410;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Definition = 6411;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Requirements = 6412;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Regulations = 6413;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_AccessRights = 6414;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Behaviour = 6415;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Granularity = 6416;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Pack = 6417;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Module = 6418;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Cell = 6419;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_EngineeringUnits = 6420;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife = 6421;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Id = 6422;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_SubCategory = 6423;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Definition = 6424;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Requirements = 6425;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Regulations = 6426;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_AccessRights = 6427;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Behaviour = 6428;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Granularity = 6429;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Pack = 6430;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Module = 6431;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Cell = 6432;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_EngineeringUnits = 6433;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency = 6434;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Id = 6435;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_SubCategory = 6436;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Definition = 6437;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Requirements = 6438;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Regulations = 6439;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_AccessRights = 6440;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Behaviour = 6441;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Granularity = 6442;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Pack = 6443;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Module = 6444;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Cell = 6445;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_EngineeringUnits = 6446;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade = 6447;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Id = 6448;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_SubCategory = 6449;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Definition = 6450;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Requirements = 6451;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Regulations = 6452;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_AccessRights = 6453;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Behaviour = 6454;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Granularity = 6455;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Pack = 6456;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Module = 6457;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Cell = 6458;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_EngineeringUnits = 6459;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel = 6460;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Id = 6461;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_SubCategory = 6462;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Definition = 6463;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Requirements = 6464;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Regulations = 6465;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_AccessRights = 6466;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Behaviour = 6467;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Granularity = 6468;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Pack = 6469;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Module = 6470;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Cell = 6471;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_EngineeringUnits = 6472;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel = 6473;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Id = 6474;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_SubCategory = 6475;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Definition = 6476;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Requirements = 6477;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Regulations = 6478;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_AccessRights = 6479;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Behaviour = 6480;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Granularity = 6481;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Pack = 6482;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Module = 6483;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Cell = 6484;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_EngineeringUnits = 6485;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel = 6486;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Id = 6487;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_SubCategory = 6488;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Definition = 6489;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Requirements = 6490;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Regulations = 6491;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_AccessRights = 6492;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Behaviour = 6493;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Granularity = 6494;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Pack = 6495;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Module = 6496;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Cell = 6497;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_EngineeringUnits = 6498;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel = 6499;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Id = 6500;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_SubCategory = 6501;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Definition = 6502;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Requirements = 6503;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Regulations = 6504;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_AccessRights = 6505;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Behaviour = 6506;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Granularity = 6507;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Pack = 6508;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Module = 6509;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Cell = 6510;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_EngineeringUnits = 6511;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel = 6512;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Id = 6513;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_SubCategory = 6514;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Definition = 6515;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Requirements = 6516;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Regulations = 6517;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_AccessRights = 6518;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Behaviour = 6519;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Granularity = 6520;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Pack = 6521;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Module = 6522;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Cell = 6523;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_EngineeringUnits = 6524;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel = 6525;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Id = 6526;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_SubCategory = 6527;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Definition = 6528;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Requirements = 6529;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Regulations = 6530;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_AccessRights = 6531;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Behaviour = 6532;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Granularity = 6533;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Pack = 6534;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Module = 6535;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Cell = 6536;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_EngineeringUnits = 6537;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel = 6538;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Id = 6539;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_SubCategory = 6540;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Definition = 6541;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Requirements = 6542;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Regulations = 6543;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_AccessRights = 6544;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Behaviour = 6545;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Granularity = 6546;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Pack = 6547;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Module = 6548;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Cell = 6549;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_EngineeringUnits = 6550;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel = 6551;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Id = 6552;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_SubCategory = 6553;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Definition = 6554;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Requirements = 6555;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Regulations = 6556;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_AccessRights = 6557;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Behaviour = 6558;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Granularity = 6559;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Pack = 6560;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Module = 6561;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Cell = 6562;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_EngineeringUnits = 6563;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles = 6564;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Id = 6565;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_SubCategory = 6566;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Definition = 6567;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Requirements = 6568;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Regulations = 6569;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_AccessRights = 6570;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Behaviour = 6571;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Granularity = 6572;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Pack = 6573;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Module = 6574;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Cell = 6575;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles = 6577;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Id = 6578;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_SubCategory = 6579;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Definition = 6580;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Requirements = 6581;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Regulations = 6582;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_AccessRights = 6583;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Behaviour = 6584;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Granularity = 6585;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Pack = 6586;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Module = 6587;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Cell = 6588;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest = 6590;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Id = 6591;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_SubCategory = 6592;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Definition = 6593;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Requirements = 6594;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Regulations = 6595;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_AccessRights = 6596;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Behaviour = 6597;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Granularity = 6598;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Pack = 6599;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Module = 6600;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Cell = 6601;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest = 6603;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Id = 6604;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_SubCategory = 6605;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Definition = 6606;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Requirements = 6607;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Regulations = 6608;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_AccessRights = 6609;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Behaviour = 6610;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Granularity = 6611;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Pack = 6612;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Module = 6613;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Cell = 6614;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_EngineeringUnits = 6615;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EnergyThroughput = 6616;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Id = 6617;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_SubCategory = 6618;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Definition = 6619;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Requirements = 6620;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Regulations = 6621;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_AccessRights = 6622;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Behaviour = 6623;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Granularity = 6624;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Pack = 6625;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Module = 6626;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Cell = 6627;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_EngineeringUnits = 6628;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThroughput = 6629;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Id = 6630;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_SubCategory = 6631;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Definition = 6632;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Requirements = 6633;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Regulations = 6634;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_AccessRights = 6635;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Behaviour = 6636;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Granularity = 6637;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Pack = 6638;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Module = 6639;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Cell = 6640;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_EngineeringUnits = 6641;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion = 6642;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Id = 6643;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_SubCategory = 6644;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Definition = 6645;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Requirements = 6646;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Regulations = 6647;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_AccessRights = 6648;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Behaviour = 6649;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Granularity = 6650;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Pack = 6651;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Module = 6652;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Cell = 6653;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_EngineeringUnits = 6654;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion = 6655;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Id = 6656;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_SubCategory = 6657;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Definition = 6658;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Requirements = 6659;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Regulations = 6660;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_AccessRights = 6661;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Behaviour = 6662;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Granularity = 6663;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Pack = 6664;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Module = 6665;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Cell = 6666;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_EngineeringUnits = 6667;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery = 6668;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Id = 6669;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_SubCategory = 6670;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Definition = 6671;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Requirements = 6672;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Regulations = 6673;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_AccessRights = 6674;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Behaviour = 6675;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Granularity = 6676;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Pack = 6677;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Module = 6678;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Cell = 6679;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_EngineeringUnits = 6680;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService = 6681;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Id = 6682;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_SubCategory = 6683;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Definition = 6684;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Requirements = 6685;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Regulations = 6686;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_AccessRights = 6687;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Behaviour = 6688;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Granularity = 6689;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Pack = 6690;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Module = 6691;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Cell = 6692;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary = 6694;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Id = 6695;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_SubCategory = 6696;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Definition = 6697;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Requirements = 6698;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Regulations = 6699;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_AccessRights = 6700;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Behaviour = 6701;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Granularity = 6702;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Pack = 6703;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Module = 6704;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Cell = 6705;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_EngineeringUnits = 6706;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary = 6707;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Id = 6708;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_SubCategory = 6709;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Definition = 6710;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Requirements = 6711;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Regulations = 6712;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_AccessRights = 6713;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Behaviour = 6714;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Granularity = 6715;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Pack = 6716;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Module = 6717;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Cell = 6718;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_EngineeringUnits = 6719;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary = 6720;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Id = 6721;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_SubCategory = 6722;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Definition = 6723;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Requirements = 6724;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Regulations = 6725;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_AccessRights = 6726;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Behaviour = 6727;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Granularity = 6728;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Pack = 6729;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Module = 6730;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Cell = 6731;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_EngineeringUnits = 6732;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary = 6733;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Id = 6734;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_SubCategory = 6735;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Definition = 6736;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Requirements = 6737;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Regulations = 6738;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_AccessRights = 6739;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Behaviour = 6740;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Granularity = 6741;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Pack = 6742;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Module = 6743;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Cell = 6744;

        /// <remarks />
        public const uint BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_EngineeringUnits = 6745;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport = 6747;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Id = 6748;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_SubCategory = 6749;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Definition = 6750;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Requirements = 6751;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Regulations = 6752;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_AccessRights = 6753;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Behaviour = 6754;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Granularity = 6755;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Pack = 6756;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Module = 6757;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Cell = 6758;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances = 6760;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Id = 6761;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_SubCategory = 6762;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Definition = 6763;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Requirements = 6764;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Regulations = 6765;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_AccessRights = 6766;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Behaviour = 6767;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Granularity = 6768;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Pack = 6769;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Module = 6770;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Cell = 6771;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement = 6773;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Id = 6774;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_SubCategory = 6775;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Definition = 6776;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Requirements = 6777;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Regulations = 6778;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_AccessRights = 6779;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Behaviour = 6780;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Granularity = 6781;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Pack = 6782;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Module = 6783;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Cell = 6784;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport = 6786;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Id = 6787;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_SubCategory = 6788;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Definition = 6789;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Requirements = 6790;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Regulations = 6791;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_AccessRights = 6792;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Behaviour = 6793;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Granularity = 6794;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Pack = 6795;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Module = 6796;

        /// <remarks />
        public const uint BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Cell = 6797;

        /// <remarks />
        public const uint SubmodelPropertyType_Id = 4;

        /// <remarks />
        public const uint SubmodelPropertyType_SubCategory = 5;

        /// <remarks />
        public const uint SubmodelPropertyType_Definition = 6;

        /// <remarks />
        public const uint SubmodelPropertyType_Requirements = 7;

        /// <remarks />
        public const uint SubmodelPropertyType_Regulations = 8;

        /// <remarks />
        public const uint SubmodelPropertyType_AccessRights = 9;

        /// <remarks />
        public const uint SubmodelPropertyType_Behaviour = 10;

        /// <remarks />
        public const uint SubmodelPropertyType_Granularity = 11;

        /// <remarks />
        public const uint SubmodelPropertyType_Pack = 12;

        /// <remarks />
        public const uint SubmodelPropertyType_Module = 13;

        /// <remarks />
        public const uint SubmodelPropertyType_Cell = 14;

        /// <remarks />
        public const uint SubmodelPropertyType_EngineeringUnits = 15;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials = 2499;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Id = 2500;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_SubCategory = 2501;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Definition = 2502;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Requirements = 2503;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Regulations = 2504;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_AccessRights = 2505;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Behaviour = 2506;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Granularity = 2507;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Pack = 2508;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Module = 2509;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Cell = 2510;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry = 2512;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Id = 2513;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_SubCategory = 2514;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Definition = 2515;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Requirements = 2516;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Regulations = 2517;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_AccessRights = 2518;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Behaviour = 2519;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Granularity = 2520;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Pack = 2521;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Module = 2522;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Cell = 2523;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials = 2525;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Id = 2526;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = 2527;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Definition = 2528;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Requirements = 2529;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Regulations = 2530;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = 2531;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = 2532;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Granularity = 2533;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Pack = 2534;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Module = 2535;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Cell = 2536;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials = 2538;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Id = 2539;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = 2540;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Definition = 2541;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Requirements = 2542;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Regulations = 2543;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = 2544;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = 2545;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Granularity = 2546;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Pack = 2547;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Module = 2548;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Cell = 2549;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials = 2551;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Id = 2552;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = 2553;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Definition = 2554;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Requirements = 2555;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Regulations = 2556;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = 2557;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = 2558;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Granularity = 2559;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Pack = 2560;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Module = 2561;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Cell = 2562;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_EngineeringUnits = 2563;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances = 2564;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Id = 2565;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_SubCategory = 2566;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Definition = 2567;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Requirements = 2568;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Regulations = 2569;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_AccessRights = 2570;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Behaviour = 2571;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Granularity = 2572;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Pack = 2573;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Module = 2574;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Cell = 2575;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances = 2577;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Id = 2578;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_SubCategory = 2579;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Definition = 2580;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Requirements = 2581;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Regulations = 2582;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_AccessRights = 2583;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Behaviour = 2584;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Granularity = 2585;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Pack = 2586;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Module = 2587;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Cell = 2588;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances = 2590;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Id = 2591;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_SubCategory = 2592;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Definition = 2593;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Requirements = 2594;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Regulations = 2595;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_AccessRights = 2596;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Behaviour = 2597;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Granularity = 2598;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Pack = 2599;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Module = 2600;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Cell = 2601;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances = 2603;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Id = 2604;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_SubCategory = 2605;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Definition = 2606;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Requirements = 2607;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Regulations = 2608;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_AccessRights = 2609;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Behaviour = 2610;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Granularity = 2611;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Pack = 2612;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Module = 2613;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Cell = 2614;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances = 2616;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Id = 2617;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_SubCategory = 2618;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Definition = 2619;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Requirements = 2620;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Regulations = 2621;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_AccessRights = 2622;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Behaviour = 2623;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Granularity = 2624;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Pack = 2625;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Module = 2626;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Cell = 2627;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_EngineeringUnits = 2628;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety = 2629;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Id = 2630;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_SubCategory = 2631;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Definition = 2632;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Requirements = 2633;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Regulations = 2634;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_AccessRights = 2635;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Behaviour = 2636;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Granularity = 2637;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Pack = 2638;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Module = 2639;

        /// <remarks />
        public const uint BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Cell = 2640;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint = 2643;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Id = 2644;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_SubCategory = 2645;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Definition = 2646;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Requirements = 2647;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Regulations = 2648;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_AccessRights = 2649;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Behaviour = 2650;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Granularity = 2651;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Pack = 2652;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Module = 2653;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Cell = 2654;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_EngineeringUnits = 2655;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing = 2656;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Id = 2657;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_SubCategory = 2658;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Definition = 2659;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Requirements = 2660;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Regulations = 2661;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_AccessRights = 2662;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Behaviour = 2663;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Granularity = 2664;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Pack = 2665;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Module = 2666;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Cell = 2667;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_EngineeringUnits = 2668;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction = 2669;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Id = 2670;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_SubCategory = 2671;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Definition = 2672;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Requirements = 2673;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Regulations = 2674;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_AccessRights = 2675;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Behaviour = 2676;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Granularity = 2677;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Pack = 2678;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Module = 2679;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Cell = 2680;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_EngineeringUnits = 2681;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution = 2682;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Id = 2683;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_SubCategory = 2684;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Definition = 2685;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Requirements = 2686;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Regulations = 2687;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_AccessRights = 2688;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Behaviour = 2689;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Granularity = 2690;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Pack = 2691;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Module = 2692;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Cell = 2693;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_EngineeringUnits = 2694;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling = 2695;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Id = 2696;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_SubCategory = 2697;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Definition = 2698;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Requirements = 2699;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Regulations = 2700;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_AccessRights = 2701;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Behaviour = 2702;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Granularity = 2703;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Pack = 2704;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Module = 2705;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Cell = 2706;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_EngineeringUnits = 2707;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass = 2708;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Id = 2709;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_SubCategory = 2710;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Definition = 2711;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Requirements = 2712;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Regulations = 2713;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_AccessRights = 2714;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Behaviour = 2715;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Granularity = 2716;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Pack = 2717;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Module = 2718;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Cell = 2719;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy = 2721;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Id = 2722;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_SubCategory = 2723;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Definition = 2724;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Requirements = 2725;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Regulations = 2726;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_AccessRights = 2727;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Behaviour = 2728;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Granularity = 2729;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Pack = 2730;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Module = 2731;

        /// <remarks />
        public const uint BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Cell = 2732;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance = 2735;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Id = 2736;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_SubCategory = 2737;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Definition = 2738;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Requirements = 2739;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Regulations = 2740;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_AccessRights = 2741;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Behaviour = 2742;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Granularity = 2743;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Pack = 2744;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Module = 2745;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Cell = 2746;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack = 2748;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Id = 2749;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_SubCategory = 2750;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Definition = 2751;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Requirements = 2752;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Regulations = 2753;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_AccessRights = 2754;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Behaviour = 2755;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Granularity = 2756;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Pack = 2757;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Module = 2758;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Cell = 2759;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts = 2761;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Id = 2762;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_SubCategory = 2763;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Definition = 2764;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Requirements = 2765;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Regulations = 2766;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_AccessRights = 2767;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Behaviour = 2768;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Granularity = 2769;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Pack = 2770;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Module = 2771;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Cell = 2772;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts = 2774;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Id = 2775;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_SubCategory = 2776;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Definition = 2777;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Requirements = 2778;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Regulations = 2779;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_AccessRights = 2780;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Behaviour = 2781;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Granularity = 2782;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Pack = 2783;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Module = 2784;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Cell = 2785;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts = 2787;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Id = 2788;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_SubCategory = 2789;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Definition = 2790;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Requirements = 2791;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Regulations = 2792;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_AccessRights = 2793;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Behaviour = 2794;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Granularity = 2795;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Pack = 2796;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Module = 2797;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Cell = 2798;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents = 2800;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Id = 2801;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_SubCategory = 2802;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Definition = 2803;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Requirements = 2804;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Regulations = 2805;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_AccessRights = 2806;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Behaviour = 2807;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Granularity = 2808;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Pack = 2809;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Module = 2810;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Cell = 2811;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent = 2813;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Id = 2814;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_SubCategory = 2815;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Definition = 2816;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Requirements = 2817;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Regulations = 2818;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_AccessRights = 2819;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Behaviour = 2820;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Granularity = 2821;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Pack = 2822;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Module = 2823;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Cell = 2824;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions = 2826;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Id = 2827;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_SubCategory = 2828;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Definition = 2829;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Requirements = 2830;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Regulations = 2831;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_AccessRights = 2832;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Behaviour = 2833;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Granularity = 2834;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Pack = 2835;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Module = 2836;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Cell = 2837;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare = 2839;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Id = 2840;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_SubCategory = 2841;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Definition = 2842;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Requirements = 2843;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Regulations = 2844;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_AccessRights = 2845;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Behaviour = 2846;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Granularity = 2847;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Pack = 2848;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Module = 2849;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Cell = 2850;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_EngineeringUnits = 2851;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare = 2852;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Id = 2853;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_SubCategory = 2854;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Definition = 2855;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Requirements = 2856;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Regulations = 2857;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_AccessRights = 2858;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Behaviour = 2859;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Granularity = 2860;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Pack = 2861;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Module = 2862;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Cell = 2863;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_EngineeringUnits = 2864;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare = 2865;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Id = 2866;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_SubCategory = 2867;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Definition = 2868;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Requirements = 2869;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Regulations = 2870;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_AccessRights = 2871;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Behaviour = 2872;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Granularity = 2873;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Pack = 2874;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Module = 2875;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Cell = 2876;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_EngineeringUnits = 2877;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare = 2878;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Id = 2879;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_SubCategory = 2880;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Definition = 2881;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Requirements = 2882;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Regulations = 2883;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_AccessRights = 2884;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Behaviour = 2885;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Granularity = 2886;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Pack = 2887;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Module = 2888;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Cell = 2889;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_EngineeringUnits = 2890;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare = 2891;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Id = 2892;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_SubCategory = 2893;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Definition = 2894;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Requirements = 2895;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Regulations = 2896;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_AccessRights = 2897;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Behaviour = 2898;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Granularity = 2899;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Pack = 2900;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Module = 2901;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Cell = 2902;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_EngineeringUnits = 2903;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare = 2904;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Id = 2905;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_SubCategory = 2906;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Definition = 2907;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Requirements = 2908;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Regulations = 2909;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_AccessRights = 2910;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Behaviour = 2911;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Granularity = 2912;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Pack = 2913;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Module = 2914;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Cell = 2915;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_EngineeringUnits = 2916;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare = 2917;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Id = 2918;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_SubCategory = 2919;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Definition = 2920;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Requirements = 2921;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Regulations = 2922;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_AccessRights = 2923;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Behaviour = 2924;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Granularity = 2925;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Pack = 2926;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Module = 2927;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Cell = 2928;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_EngineeringUnits = 2929;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare = 2930;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Id = 2931;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_SubCategory = 2932;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Definition = 2933;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Requirements = 2934;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Regulations = 2935;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_AccessRights = 2936;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Behaviour = 2937;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Granularity = 2938;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Pack = 2939;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Module = 2940;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Cell = 2941;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_EngineeringUnits = 2942;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare = 2943;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Id = 2944;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_SubCategory = 2945;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Definition = 2946;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Requirements = 2947;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Regulations = 2948;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_AccessRights = 2949;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Behaviour = 2950;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Granularity = 2951;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Pack = 2952;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Module = 2953;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Cell = 2954;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_EngineeringUnits = 2955;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention = 2956;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Id = 2957;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_SubCategory = 2958;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Definition = 2959;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Requirements = 2960;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Regulations = 2961;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_AccessRights = 2962;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Behaviour = 2963;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Granularity = 2964;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Pack = 2965;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Module = 2966;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Cell = 2967;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries = 2969;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Id = 2970;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_SubCategory = 2971;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Definition = 2972;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Requirements = 2973;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Regulations = 2974;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_AccessRights = 2975;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Behaviour = 2976;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Granularity = 2977;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Pack = 2978;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Module = 2979;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Cell = 2980;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations = 2982;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Id = 2983;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_SubCategory = 2984;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Definition = 2985;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Requirements = 2986;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Regulations = 2987;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_AccessRights = 2988;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Behaviour = 2989;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Granularity = 2990;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Pack = 2991;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Module = 2992;

        /// <remarks />
        public const uint BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Cell = 2993;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports = 2996;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Id = 2997;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_SubCategory = 2998;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Definition = 2999;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Requirements = 3000;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Regulations = 3001;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_AccessRights = 3002;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Behaviour = 3003;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Granularity = 3004;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Pack = 3005;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Module = 3006;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Cell = 3007;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol = 3009;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Id = 3010;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_SubCategory = 3011;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Definition = 3012;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Requirements = 3013;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Regulations = 3014;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_AccessRights = 3015;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Behaviour = 3016;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Granularity = 3017;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Pack = 3018;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Module = 3019;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Cell = 3020;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols = 3022;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Id = 3023;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_SubCategory = 3024;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Definition = 3025;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Requirements = 3026;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Regulations = 3027;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_AccessRights = 3028;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Behaviour = 3029;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Granularity = 3030;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Pack = 3031;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Module = 3032;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Cell = 3033;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols = 3035;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Id = 3036;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_SubCategory = 3037;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Definition = 3038;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Requirements = 3039;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Regulations = 3040;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_AccessRights = 3041;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Behaviour = 3042;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Granularity = 3043;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Pack = 3044;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Module = 3045;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Cell = 3046;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity = 3048;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Id = 3049;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_SubCategory = 3050;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Definition = 3051;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Requirements = 3052;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Regulations = 3053;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_AccessRights = 3054;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Behaviour = 3055;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Granularity = 3056;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Pack = 3057;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Module = 3058;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Cell = 3059;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity = 3061;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Id = 3062;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_SubCategory = 3063;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Definition = 3064;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Requirements = 3065;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Regulations = 3066;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_AccessRights = 3067;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Behaviour = 3068;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Granularity = 3069;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Pack = 3070;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Module = 3071;

        /// <remarks />
        public const uint BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Cell = 3072;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier = 3075;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Id = 3076;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_SubCategory = 3077;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Definition = 3078;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Requirements = 3079;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Regulations = 3080;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_AccessRights = 3081;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Behaviour = 3082;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Granularity = 3083;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Pack = 3084;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Module = 3085;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Cell = 3086;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification = 3088;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Id = 3089;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_SubCategory = 3090;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Definition = 3091;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Requirements = 3092;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Regulations = 3093;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_AccessRights = 3094;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Behaviour = 3095;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Granularity = 3096;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Pack = 3097;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Module = 3098;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Cell = 3099;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate = 3101;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Id = 3102;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_SubCategory = 3103;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Definition = 3104;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Requirements = 3105;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Regulations = 3106;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_AccessRights = 3107;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Behaviour = 3108;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Granularity = 3109;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Pack = 3110;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Module = 3111;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Cell = 3112;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace = 3114;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Id = 3115;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_SubCategory = 3116;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Definition = 3117;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Requirements = 3118;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Regulations = 3119;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_AccessRights = 3120;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Behaviour = 3121;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Granularity = 3122;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Pack = 3123;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Module = 3124;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Cell = 3125;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory = 3127;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Id = 3128;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_SubCategory = 3129;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Definition = 3130;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Requirements = 3131;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Regulations = 3132;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_AccessRights = 3133;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Behaviour = 3134;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Granularity = 3135;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Pack = 3136;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Module = 3137;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Cell = 3138;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight = 3140;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Id = 3141;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_SubCategory = 3142;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Definition = 3143;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Requirements = 3144;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Regulations = 3145;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_AccessRights = 3146;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Behaviour = 3147;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Granularity = 3148;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Pack = 3149;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Module = 3150;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Cell = 3151;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_EngineeringUnits = 3152;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus = 3153;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Id = 3154;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_SubCategory = 3155;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Definition = 3156;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Requirements = 3157;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Regulations = 3158;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_AccessRights = 3159;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Behaviour = 3160;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Granularity = 3161;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Pack = 3162;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Module = 3163;

        /// <remarks />
        public const uint BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Cell = 3164;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary = 3167;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Id = 3168;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_SubCategory = 3169;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Definition = 3170;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Requirements = 3171;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Regulations = 3172;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_AccessRights = 3173;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Behaviour = 3174;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Granularity = 3175;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Pack = 3176;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Module = 3177;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Cell = 3178;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_EngineeringUnits = 3179;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary = 3180;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Id = 3181;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_SubCategory = 3182;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Definition = 3183;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Requirements = 3184;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Regulations = 3185;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_AccessRights = 3186;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Behaviour = 3187;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Granularity = 3188;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Pack = 3189;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Module = 3190;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Cell = 3191;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_EngineeringUnits = 3192;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InformationOnAccidents = 3193;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Id = 3194;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_SubCategory = 3195;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Definition = 3196;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Requirements = 3197;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Regulations = 3198;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_AccessRights = 3199;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Behaviour = 3200;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Granularity = 3201;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Pack = 3202;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Module = 3203;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Cell = 3204;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents = 3206;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Id = 3207;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_SubCategory = 3208;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Definition = 3209;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Requirements = 3210;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Regulations = 3211;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_AccessRights = 3212;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Behaviour = 3213;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Granularity = 3214;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Pack = 3215;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Module = 3216;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Cell = 3217;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents = 3219;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Id = 3220;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_SubCategory = 3221;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Definition = 3222;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Requirements = 3223;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Regulations = 3224;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_AccessRights = 3225;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Behaviour = 3226;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Granularity = 3227;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Pack = 3228;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Module = 3229;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Cell = 3230;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified = 3232;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Id = 3233;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_SubCategory = 3234;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Definition = 3235;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Requirements = 3236;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Regulations = 3237;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_AccessRights = 3238;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Behaviour = 3239;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Granularity = 3240;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Pack = 3241;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Module = 3242;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Cell = 3243;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_EngineeringUnits = 3244;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured = 3245;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Id = 3246;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_SubCategory = 3247;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Definition = 3248;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Requirements = 3249;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Regulations = 3250;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_AccessRights = 3251;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Behaviour = 3252;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Granularity = 3253;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Pack = 3254;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Module = 3255;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Cell = 3256;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_EngineeringUnits = 3257;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE = 3258;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Id = 3259;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_SubCategory = 3260;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Definition = 3261;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Requirements = 3262;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Regulations = 3263;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_AccessRights = 3264;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Behaviour = 3265;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Granularity = 3266;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Pack = 3267;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Module = 3268;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Cell = 3269;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_EngineeringUnits = 3270;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate = 3271;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Id = 3272;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_SubCategory = 3273;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Definition = 3274;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Requirements = 3275;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Regulations = 3276;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_AccessRights = 3277;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Behaviour = 3278;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Granularity = 3279;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Pack = 3280;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Module = 3281;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Cell = 3282;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_EngineeringUnits = 3283;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate = 3284;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Id = 3285;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_SubCategory = 3286;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Definition = 3287;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Requirements = 3288;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Regulations = 3289;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_AccessRights = 3290;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Behaviour = 3291;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Granularity = 3292;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Pack = 3293;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Module = 3294;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Cell = 3295;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_EngineeringUnits = 3296;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates = 3297;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Id = 3298;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_SubCategory = 3299;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Definition = 3300;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Requirements = 3301;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Regulations = 3302;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_AccessRights = 3303;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Behaviour = 3304;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Granularity = 3305;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Pack = 3306;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Module = 3307;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Cell = 3308;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_EngineeringUnits = 3309;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatedCapacity = 3310;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatedCapacity_Id = 3311;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatedCapacity_SubCategory = 3312;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatedCapacity_Definition = 3313;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatedCapacity_Requirements = 3314;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatedCapacity_Regulations = 3315;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatedCapacity_AccessRights = 3316;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatedCapacity_Behaviour = 3317;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatedCapacity_Granularity = 3318;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatedCapacity_Pack = 3319;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatedCapacity_Module = 3320;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatedCapacity_Cell = 3321;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatedCapacity_EngineeringUnits = 3322;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingCapacity = 3323;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Id = 3324;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingCapacity_SubCategory = 3325;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Definition = 3326;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Requirements = 3327;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Regulations = 3328;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingCapacity_AccessRights = 3329;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Behaviour = 3330;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Granularity = 3331;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Pack = 3332;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Module = 3333;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Cell = 3334;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingCapacity_EngineeringUnits = 3335;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityFade = 3336;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityFade_Id = 3337;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityFade_SubCategory = 3338;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityFade_Definition = 3339;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityFade_Requirements = 3340;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityFade_Regulations = 3341;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityFade_AccessRights = 3342;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityFade_Behaviour = 3343;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityFade_Granularity = 3344;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityFade_Pack = 3345;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityFade_Module = 3346;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityFade_Cell = 3347;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityFade_EngineeringUnits = 3348;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC = 3349;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Id = 3350;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_SubCategory = 3351;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Definition = 3352;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Requirements = 3353;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Regulations = 3354;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_AccessRights = 3355;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Behaviour = 3356;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Granularity = 3357;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Pack = 3358;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Module = 3359;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Cell = 3360;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_EngineeringUnits = 3361;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NominalVoltage = 3362;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NominalVoltage_Id = 3363;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NominalVoltage_SubCategory = 3364;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NominalVoltage_Definition = 3365;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NominalVoltage_Requirements = 3366;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NominalVoltage_Regulations = 3367;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NominalVoltage_AccessRights = 3368;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NominalVoltage_Behaviour = 3369;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NominalVoltage_Granularity = 3370;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NominalVoltage_Pack = 3371;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NominalVoltage_Module = 3372;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NominalVoltage_Cell = 3373;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NominalVoltage_EngineeringUnits = 3374;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MinimumVoltage = 3375;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Id = 3376;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MinimumVoltage_SubCategory = 3377;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Definition = 3378;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Requirements = 3379;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Regulations = 3380;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MinimumVoltage_AccessRights = 3381;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Behaviour = 3382;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Granularity = 3383;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Pack = 3384;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Module = 3385;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Cell = 3386;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MinimumVoltage_EngineeringUnits = 3387;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumVoltage = 3388;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Id = 3389;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumVoltage_SubCategory = 3390;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Definition = 3391;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Requirements = 3392;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Regulations = 3393;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumVoltage_AccessRights = 3394;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Behaviour = 3395;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Granularity = 3396;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Pack = 3397;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Module = 3398;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Cell = 3399;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumVoltage_EngineeringUnits = 3400;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability = 3401;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Id = 3402;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_SubCategory = 3403;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Definition = 3404;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Requirements = 3405;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Regulations = 3406;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_AccessRights = 3407;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Behaviour = 3408;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Granularity = 3409;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Pack = 3410;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Module = 3411;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Cell = 3412;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_EngineeringUnits = 3413;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability = 3414;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Id = 3415;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_SubCategory = 3416;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Definition = 3417;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Requirements = 3418;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Regulations = 3419;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_AccessRights = 3420;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Behaviour = 3421;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Granularity = 3422;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Pack = 3423;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Module = 3424;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Cell = 3425;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_EngineeringUnits = 3426;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade = 3427;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Id = 3428;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_SubCategory = 3429;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Definition = 3430;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Requirements = 3431;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Regulations = 3432;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_AccessRights = 3433;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Behaviour = 3434;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Granularity = 3435;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Pack = 3436;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Module = 3437;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Cell = 3438;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_EngineeringUnits = 3439;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower = 3440;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Id = 3441;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_SubCategory = 3442;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Definition = 3443;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Requirements = 3444;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Regulations = 3445;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_AccessRights = 3446;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Behaviour = 3447;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Granularity = 3448;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Pack = 3449;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Module = 3450;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Cell = 3451;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_EngineeringUnits = 3452;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh = 3453;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Id = 3454;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_SubCategory = 3455;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Definition = 3456;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Requirements = 3457;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Regulations = 3458;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_AccessRights = 3459;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Behaviour = 3460;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Granularity = 3461;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Pack = 3462;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Module = 3463;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Cell = 3464;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_EngineeringUnits = 3465;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency = 3466;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Id = 3467;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_SubCategory = 3468;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Definition = 3469;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Requirements = 3470;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Regulations = 3471;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_AccessRights = 3472;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Behaviour = 3473;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Granularity = 3474;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Pack = 3475;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Module = 3476;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Cell = 3477;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_EngineeringUnits = 3478;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife = 3479;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Id = 3480;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_SubCategory = 3481;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Definition = 3482;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Requirements = 3483;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Regulations = 3484;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_AccessRights = 3485;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Behaviour = 3486;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Granularity = 3487;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Pack = 3488;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Module = 3489;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Cell = 3490;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_EngineeringUnits = 3491;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency = 3492;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Id = 3493;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_SubCategory = 3494;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Definition = 3495;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Requirements = 3496;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Regulations = 3497;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_AccessRights = 3498;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Behaviour = 3499;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Granularity = 3500;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Pack = 3501;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Module = 3502;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Cell = 3503;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_EngineeringUnits = 3504;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade = 3505;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Id = 3506;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_SubCategory = 3507;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Definition = 3508;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Requirements = 3509;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Regulations = 3510;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_AccessRights = 3511;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Behaviour = 3512;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Granularity = 3513;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Pack = 3514;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Module = 3515;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Cell = 3516;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_EngineeringUnits = 3517;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel = 3518;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Id = 3519;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_SubCategory = 3520;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Definition = 3521;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Requirements = 3522;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Regulations = 3523;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_AccessRights = 3524;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Behaviour = 3525;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Granularity = 3526;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Pack = 3527;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Module = 3528;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Cell = 3529;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_EngineeringUnits = 3530;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel = 3531;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Id = 3532;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_SubCategory = 3533;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Definition = 3534;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Requirements = 3535;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Regulations = 3536;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_AccessRights = 3537;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Behaviour = 3538;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Granularity = 3539;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Pack = 3540;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Module = 3541;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Cell = 3542;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_EngineeringUnits = 3543;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel = 3544;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Id = 3545;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_SubCategory = 3546;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Definition = 3547;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Requirements = 3548;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Regulations = 3549;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_AccessRights = 3550;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Behaviour = 3551;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Granularity = 3552;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Pack = 3553;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Module = 3554;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Cell = 3555;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_EngineeringUnits = 3556;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel = 3557;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Id = 3558;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_SubCategory = 3559;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Definition = 3560;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Requirements = 3561;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Regulations = 3562;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_AccessRights = 3563;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Behaviour = 3564;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Granularity = 3565;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Pack = 3566;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Module = 3567;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Cell = 3568;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_EngineeringUnits = 3569;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel = 3570;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Id = 3571;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_SubCategory = 3572;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Definition = 3573;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Requirements = 3574;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Regulations = 3575;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_AccessRights = 3576;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Behaviour = 3577;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Granularity = 3578;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Pack = 3579;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Module = 3580;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Cell = 3581;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_EngineeringUnits = 3582;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel = 3583;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Id = 3584;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_SubCategory = 3585;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Definition = 3586;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Requirements = 3587;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Regulations = 3588;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_AccessRights = 3589;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Behaviour = 3590;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Granularity = 3591;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Pack = 3592;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Module = 3593;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Cell = 3594;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_EngineeringUnits = 3595;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel = 3596;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Id = 3597;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_SubCategory = 3598;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Definition = 3599;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Requirements = 3600;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Regulations = 3601;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_AccessRights = 3602;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Behaviour = 3603;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Granularity = 3604;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Pack = 3605;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Module = 3606;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Cell = 3607;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_EngineeringUnits = 3608;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel = 3609;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Id = 3610;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_SubCategory = 3611;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Definition = 3612;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Requirements = 3613;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Regulations = 3614;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_AccessRights = 3615;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Behaviour = 3616;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Granularity = 3617;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Pack = 3618;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Module = 3619;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Cell = 3620;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_EngineeringUnits = 3621;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles = 3622;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Id = 3623;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_SubCategory = 3624;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Definition = 3625;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Requirements = 3626;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Regulations = 3627;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_AccessRights = 3628;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Behaviour = 3629;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Granularity = 3630;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Pack = 3631;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Module = 3632;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Cell = 3633;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles = 3635;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Id = 3636;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_SubCategory = 3637;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Definition = 3638;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Requirements = 3639;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Regulations = 3640;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_AccessRights = 3641;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Behaviour = 3642;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Granularity = 3643;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Pack = 3644;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Module = 3645;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Cell = 3646;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest = 3648;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Id = 3649;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_SubCategory = 3650;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Definition = 3651;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Requirements = 3652;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Regulations = 3653;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_AccessRights = 3654;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Behaviour = 3655;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Granularity = 3656;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Pack = 3657;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Module = 3658;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Cell = 3659;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest = 3661;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Id = 3662;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_SubCategory = 3663;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Definition = 3664;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Requirements = 3665;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Regulations = 3666;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_AccessRights = 3667;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Behaviour = 3668;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Granularity = 3669;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Pack = 3670;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Module = 3671;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Cell = 3672;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_EngineeringUnits = 3673;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EnergyThroughput = 3674;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Id = 3675;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EnergyThroughput_SubCategory = 3676;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Definition = 3677;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Requirements = 3678;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Regulations = 3679;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EnergyThroughput_AccessRights = 3680;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Behaviour = 3681;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Granularity = 3682;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Pack = 3683;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Module = 3684;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Cell = 3685;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_EnergyThroughput_EngineeringUnits = 3686;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThroughput = 3687;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Id = 3688;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThroughput_SubCategory = 3689;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Definition = 3690;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Requirements = 3691;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Regulations = 3692;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThroughput_AccessRights = 3693;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Behaviour = 3694;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Granularity = 3695;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Pack = 3696;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Module = 3697;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Cell = 3698;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThroughput_EngineeringUnits = 3699;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion = 3700;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Id = 3701;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_SubCategory = 3702;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Definition = 3703;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Requirements = 3704;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Regulations = 3705;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_AccessRights = 3706;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Behaviour = 3707;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Granularity = 3708;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Pack = 3709;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Module = 3710;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Cell = 3711;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_EngineeringUnits = 3712;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion = 3713;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Id = 3714;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_SubCategory = 3715;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Definition = 3716;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Requirements = 3717;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Regulations = 3718;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_AccessRights = 3719;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Behaviour = 3720;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Granularity = 3721;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Pack = 3722;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Module = 3723;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Cell = 3724;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_EngineeringUnits = 3725;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery = 3726;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Id = 3727;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_SubCategory = 3728;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Definition = 3729;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Requirements = 3730;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Regulations = 3731;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_AccessRights = 3732;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Behaviour = 3733;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Granularity = 3734;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Pack = 3735;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Module = 3736;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Cell = 3737;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_EngineeringUnits = 3738;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService = 3739;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Id = 3740;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_SubCategory = 3741;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Definition = 3742;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Requirements = 3743;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Regulations = 3744;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_AccessRights = 3745;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Behaviour = 3746;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Granularity = 3747;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Pack = 3748;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Module = 3749;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Cell = 3750;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary = 3752;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Id = 3753;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_SubCategory = 3754;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Definition = 3755;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Requirements = 3756;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Regulations = 3757;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_AccessRights = 3758;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Behaviour = 3759;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Granularity = 3760;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Pack = 3761;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Module = 3762;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Cell = 3763;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_EngineeringUnits = 3764;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary = 3765;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Id = 3766;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_SubCategory = 3767;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Definition = 3768;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Requirements = 3769;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Regulations = 3770;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_AccessRights = 3771;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Behaviour = 3772;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Granularity = 3773;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Pack = 3774;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Module = 3775;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Cell = 3776;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_EngineeringUnits = 3777;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary = 3778;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Id = 3779;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_SubCategory = 3780;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Definition = 3781;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Requirements = 3782;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Regulations = 3783;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_AccessRights = 3784;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Behaviour = 3785;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Granularity = 3786;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Pack = 3787;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Module = 3788;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Cell = 3789;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_EngineeringUnits = 3790;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary = 3791;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Id = 3792;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_SubCategory = 3793;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Definition = 3794;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Requirements = 3795;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Regulations = 3796;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_AccessRights = 3797;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Behaviour = 3798;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Granularity = 3799;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Pack = 3800;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Module = 3801;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Cell = 3802;

        /// <remarks />
        public const uint BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_EngineeringUnits = 3803;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport = 3805;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Id = 3806;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_SubCategory = 3807;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Definition = 3808;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Requirements = 3809;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Regulations = 3810;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_AccessRights = 3811;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Behaviour = 3812;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Granularity = 3813;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Pack = 3814;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Module = 3815;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Cell = 3816;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances = 3818;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Id = 3819;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_SubCategory = 3820;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Definition = 3821;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Requirements = 3822;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Regulations = 3823;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_AccessRights = 3824;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Behaviour = 3825;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Granularity = 3826;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Pack = 3827;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Module = 3828;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Cell = 3829;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement = 3831;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Id = 3832;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_SubCategory = 3833;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Definition = 3834;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Requirements = 3835;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Regulations = 3836;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_AccessRights = 3837;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Behaviour = 3838;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Granularity = 3839;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Pack = 3840;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Module = 3841;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Cell = 3842;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport = 3844;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Id = 3845;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_SubCategory = 3846;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Definition = 3847;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Requirements = 3848;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Regulations = 3849;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_AccessRights = 3850;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Behaviour = 3851;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Granularity = 3852;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Pack = 3853;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Module = 3854;

        /// <remarks />
        public const uint BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Cell = 3855;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_CriticalRawMaterials = 17;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_CriticalRawMaterials_Id = 18;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_CriticalRawMaterials_SubCategory = 19;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_CriticalRawMaterials_Definition = 20;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_CriticalRawMaterials_Requirements = 21;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_CriticalRawMaterials_Regulations = 22;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_CriticalRawMaterials_AccessRights = 23;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_CriticalRawMaterials_Behaviour = 24;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_CriticalRawMaterials_Granularity = 25;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_CriticalRawMaterials_Pack = 26;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_CriticalRawMaterials_Module = 27;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_CriticalRawMaterials_Cell = 28;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_BatteryChemistry = 30;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_BatteryChemistry_Id = 31;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_BatteryChemistry_SubCategory = 32;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_BatteryChemistry_Definition = 33;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_BatteryChemistry_Requirements = 34;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_BatteryChemistry_Regulations = 35;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_BatteryChemistry_AccessRights = 36;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_BatteryChemistry_Behaviour = 37;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_BatteryChemistry_Granularity = 38;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_BatteryChemistry_Pack = 39;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_BatteryChemistry_Module = 40;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_BatteryChemistry_Cell = 41;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials = 1860;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Id = 1861;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = 1862;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Definition = 1863;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Requirements = 1864;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Regulations = 1865;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = 1866;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = 1867;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Granularity = 1868;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Pack = 1869;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Module = 1870;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Cell = 1871;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials = 1873;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Id = 1874;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = 1875;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Definition = 1876;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Requirements = 1877;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Regulations = 1878;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = 1879;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = 1880;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Granularity = 1881;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Pack = 1882;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Module = 1883;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Cell = 1884;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials = 1886;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Id = 1887;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = 1888;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Definition = 1889;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Requirements = 1890;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Regulations = 1891;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = 1892;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = 1893;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Granularity = 1894;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Pack = 1895;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Module = 1896;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Cell = 1897;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_EngineeringUnits = 1898;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfHazardousSubstances = 82;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Id = 83;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_SubCategory = 84;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Definition = 85;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Requirements = 86;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Regulations = 87;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_AccessRights = 88;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Behaviour = 89;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Granularity = 90;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Pack = 91;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Module = 92;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Cell = 93;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances = 1899;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Id = 1900;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_SubCategory = 1901;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Definition = 1902;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Requirements = 1903;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Regulations = 1904;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_AccessRights = 1905;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Behaviour = 1906;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Granularity = 1907;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Pack = 1908;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Module = 1909;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Cell = 1910;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances = 108;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Id = 109;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_SubCategory = 110;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Definition = 111;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Requirements = 112;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Regulations = 113;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_AccessRights = 114;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Behaviour = 115;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Granularity = 116;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Pack = 117;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Module = 118;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Cell = 119;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances = 121;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Id = 122;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_SubCategory = 123;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Definition = 124;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Requirements = 125;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Regulations = 126;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_AccessRights = 127;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Behaviour = 128;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Granularity = 129;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Pack = 130;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Module = 131;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Cell = 132;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances = 134;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Id = 135;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_SubCategory = 136;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Definition = 137;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Requirements = 138;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Regulations = 139;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_AccessRights = 140;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Behaviour = 141;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Granularity = 142;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Pack = 143;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Module = 144;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Cell = 145;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_EngineeringUnits = 146;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety = 1912;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Id = 1913;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_SubCategory = 1914;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Definition = 1915;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Requirements = 1916;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Regulations = 1917;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_AccessRights = 1918;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Behaviour = 1919;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Granularity = 1920;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Pack = 1921;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Module = 1922;

        /// <remarks />
        public const uint BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Cell = 1923;

        /// <remarks />
        public const uint CarbonFootprintType_BatteryCarbonFootprint = 161;

        /// <remarks />
        public const uint CarbonFootprintType_BatteryCarbonFootprint_Id = 162;

        /// <remarks />
        public const uint CarbonFootprintType_BatteryCarbonFootprint_SubCategory = 163;

        /// <remarks />
        public const uint CarbonFootprintType_BatteryCarbonFootprint_Definition = 164;

        /// <remarks />
        public const uint CarbonFootprintType_BatteryCarbonFootprint_Requirements = 165;

        /// <remarks />
        public const uint CarbonFootprintType_BatteryCarbonFootprint_Regulations = 166;

        /// <remarks />
        public const uint CarbonFootprintType_BatteryCarbonFootprint_AccessRights = 167;

        /// <remarks />
        public const uint CarbonFootprintType_BatteryCarbonFootprint_Behaviour = 168;

        /// <remarks />
        public const uint CarbonFootprintType_BatteryCarbonFootprint_Granularity = 169;

        /// <remarks />
        public const uint CarbonFootprintType_BatteryCarbonFootprint_Pack = 170;

        /// <remarks />
        public const uint CarbonFootprintType_BatteryCarbonFootprint_Module = 171;

        /// <remarks />
        public const uint CarbonFootprintType_BatteryCarbonFootprint_Cell = 172;

        /// <remarks />
        public const uint CarbonFootprintType_BatteryCarbonFootprint_EngineeringUnits = 173;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing = 1925;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Id = 1926;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_SubCategory = 1927;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Definition = 1928;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Requirements = 1929;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Regulations = 1930;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_AccessRights = 1931;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Behaviour = 1932;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Granularity = 1933;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Pack = 1934;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Module = 1935;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Cell = 1936;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_EngineeringUnits = 1937;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction = 1938;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Id = 1939;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_SubCategory = 1940;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Definition = 1941;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Requirements = 1942;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Regulations = 1943;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_AccessRights = 1944;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Behaviour = 1945;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Granularity = 1946;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Pack = 1947;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Module = 1948;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Cell = 1949;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_EngineeringUnits = 1950;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution = 1951;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Id = 1952;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_SubCategory = 1953;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Definition = 1954;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Requirements = 1955;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Regulations = 1956;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_AccessRights = 1957;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Behaviour = 1958;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Granularity = 1959;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Pack = 1960;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Module = 1961;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Cell = 1962;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_EngineeringUnits = 1963;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling = 1964;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Id = 1965;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_SubCategory = 1966;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Definition = 1967;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Requirements = 1968;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Regulations = 1969;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_AccessRights = 1970;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Behaviour = 1971;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Granularity = 1972;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Pack = 1973;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Module = 1974;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Cell = 1975;

        /// <remarks />
        public const uint CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_EngineeringUnits = 1976;

        /// <remarks />
        public const uint CarbonFootprintType_CarbonFootprintPerformanceClass = 226;

        /// <remarks />
        public const uint CarbonFootprintType_CarbonFootprintPerformanceClass_Id = 227;

        /// <remarks />
        public const uint CarbonFootprintType_CarbonFootprintPerformanceClass_SubCategory = 228;

        /// <remarks />
        public const uint CarbonFootprintType_CarbonFootprintPerformanceClass_Definition = 229;

        /// <remarks />
        public const uint CarbonFootprintType_CarbonFootprintPerformanceClass_Requirements = 230;

        /// <remarks />
        public const uint CarbonFootprintType_CarbonFootprintPerformanceClass_Regulations = 231;

        /// <remarks />
        public const uint CarbonFootprintType_CarbonFootprintPerformanceClass_AccessRights = 232;

        /// <remarks />
        public const uint CarbonFootprintType_CarbonFootprintPerformanceClass_Behaviour = 233;

        /// <remarks />
        public const uint CarbonFootprintType_CarbonFootprintPerformanceClass_Granularity = 234;

        /// <remarks />
        public const uint CarbonFootprintType_CarbonFootprintPerformanceClass_Pack = 235;

        /// <remarks />
        public const uint CarbonFootprintType_CarbonFootprintPerformanceClass_Module = 236;

        /// <remarks />
        public const uint CarbonFootprintType_CarbonFootprintPerformanceClass_Cell = 237;

        /// <remarks />
        public const uint CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy = 239;

        /// <remarks />
        public const uint CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Id = 240;

        /// <remarks />
        public const uint CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_SubCategory = 241;

        /// <remarks />
        public const uint CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Definition = 242;

        /// <remarks />
        public const uint CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Requirements = 243;

        /// <remarks />
        public const uint CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Regulations = 244;

        /// <remarks />
        public const uint CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_AccessRights = 245;

        /// <remarks />
        public const uint CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Behaviour = 246;

        /// <remarks />
        public const uint CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Granularity = 247;

        /// <remarks />
        public const uint CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Pack = 248;

        /// <remarks />
        public const uint CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Module = 249;

        /// <remarks />
        public const uint CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Cell = 250;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance = 253;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Id = 254;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_SubCategory = 255;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Definition = 256;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Requirements = 257;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Regulations = 258;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_AccessRights = 259;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Behaviour = 260;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Granularity = 261;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Pack = 262;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Module = 263;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Cell = 264;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack = 266;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Id = 267;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_SubCategory = 268;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Definition = 269;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Requirements = 270;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Regulations = 271;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_AccessRights = 272;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Behaviour = 273;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Granularity = 274;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Pack = 275;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Module = 276;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Cell = 277;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts = 279;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Id = 280;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_SubCategory = 281;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Definition = 282;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Requirements = 283;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Regulations = 284;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_AccessRights = 285;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Behaviour = 286;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Granularity = 287;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Pack = 288;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Module = 289;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Cell = 290;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts = 1977;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Id = 1978;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_SubCategory = 1979;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Definition = 1980;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Requirements = 1981;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Regulations = 1982;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_AccessRights = 1983;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Behaviour = 1984;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Granularity = 1985;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Pack = 1986;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Module = 1987;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Cell = 1988;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts = 305;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Id = 306;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_SubCategory = 307;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Definition = 308;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Requirements = 309;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Regulations = 310;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_AccessRights = 311;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Behaviour = 312;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Granularity = 313;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Pack = 314;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Module = 315;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Cell = 316;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PartNumbersForComponents = 318;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PartNumbersForComponents_Id = 319;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PartNumbersForComponents_SubCategory = 320;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PartNumbersForComponents_Definition = 321;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PartNumbersForComponents_Requirements = 322;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PartNumbersForComponents_Regulations = 323;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PartNumbersForComponents_AccessRights = 324;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PartNumbersForComponents_Behaviour = 325;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PartNumbersForComponents_Granularity = 326;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PartNumbersForComponents_Pack = 327;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PartNumbersForComponents_Module = 328;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_PartNumbersForComponents_Cell = 329;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ExtinguishingAgent = 331;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ExtinguishingAgent_Id = 332;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ExtinguishingAgent_SubCategory = 333;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ExtinguishingAgent_Definition = 334;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ExtinguishingAgent_Requirements = 335;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ExtinguishingAgent_Regulations = 336;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ExtinguishingAgent_AccessRights = 337;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ExtinguishingAgent_Behaviour = 338;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ExtinguishingAgent_Granularity = 339;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ExtinguishingAgent_Pack = 340;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ExtinguishingAgent_Module = 341;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_ExtinguishingAgent_Cell = 342;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions = 1990;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Id = 1991;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_SubCategory = 1992;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Definition = 1993;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Requirements = 1994;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Regulations = 1995;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_AccessRights = 1996;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Behaviour = 1997;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Granularity = 1998;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Pack = 1999;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Module = 2000;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Cell = 2001;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare = 2003;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Id = 2004;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_SubCategory = 2005;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Definition = 2006;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Requirements = 2007;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Regulations = 2008;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_AccessRights = 2009;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Behaviour = 2010;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Granularity = 2011;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Pack = 2012;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Module = 2013;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Cell = 2014;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_EngineeringUnits = 2015;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare = 2016;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Id = 2017;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_SubCategory = 2018;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Definition = 2019;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Requirements = 2020;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Regulations = 2021;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_AccessRights = 2022;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Behaviour = 2023;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Granularity = 2024;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Pack = 2025;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Module = 2026;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Cell = 2027;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_EngineeringUnits = 2028;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare = 2029;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Id = 2030;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_SubCategory = 2031;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Definition = 2032;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Requirements = 2033;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Regulations = 2034;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_AccessRights = 2035;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Behaviour = 2036;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Granularity = 2037;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Pack = 2038;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Module = 2039;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Cell = 2040;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_EngineeringUnits = 2041;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare = 2042;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Id = 2043;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_SubCategory = 2044;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Definition = 2045;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Requirements = 2046;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Regulations = 2047;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_AccessRights = 2048;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Behaviour = 2049;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Granularity = 2050;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Pack = 2051;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Module = 2052;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Cell = 2053;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_EngineeringUnits = 2054;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare = 2055;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Id = 2056;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_SubCategory = 2057;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Definition = 2058;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Requirements = 2059;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Regulations = 2060;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_AccessRights = 2061;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Behaviour = 2062;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Granularity = 2063;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Pack = 2064;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Module = 2065;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Cell = 2066;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_EngineeringUnits = 2067;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare = 2068;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Id = 2069;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_SubCategory = 2070;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Definition = 2071;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Requirements = 2072;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Regulations = 2073;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_AccessRights = 2074;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Behaviour = 2075;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Granularity = 2076;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Pack = 2077;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Module = 2078;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Cell = 2079;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_EngineeringUnits = 2080;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare = 2081;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Id = 2082;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_SubCategory = 2083;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Definition = 2084;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Requirements = 2085;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Regulations = 2086;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_AccessRights = 2087;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Behaviour = 2088;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Granularity = 2089;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Pack = 2090;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Module = 2091;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Cell = 2092;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_EngineeringUnits = 2093;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare = 2094;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Id = 2095;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_SubCategory = 2096;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Definition = 2097;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Requirements = 2098;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Regulations = 2099;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_AccessRights = 2100;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Behaviour = 2101;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Granularity = 2102;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Pack = 2103;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Module = 2104;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Cell = 2105;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_EngineeringUnits = 2106;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RenewableContentShare = 461;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RenewableContentShare_Id = 462;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RenewableContentShare_SubCategory = 463;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RenewableContentShare_Definition = 464;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RenewableContentShare_Requirements = 465;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RenewableContentShare_Regulations = 466;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RenewableContentShare_AccessRights = 467;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RenewableContentShare_Behaviour = 468;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RenewableContentShare_Granularity = 469;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RenewableContentShare_Pack = 470;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RenewableContentShare_Module = 471;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RenewableContentShare_Cell = 472;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RenewableContentShare_EngineeringUnits = 473;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention = 2107;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Id = 2108;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_SubCategory = 2109;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Definition = 2110;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Requirements = 2111;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Regulations = 2112;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_AccessRights = 2113;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Behaviour = 2114;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Granularity = 2115;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Pack = 2116;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Module = 2117;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Cell = 2118;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries = 2120;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Id = 2121;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_SubCategory = 2122;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Definition = 2123;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Requirements = 2124;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Regulations = 2125;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_AccessRights = 2126;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Behaviour = 2127;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Granularity = 2128;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Pack = 2129;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Module = 2130;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Cell = 2131;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations = 2133;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Id = 2134;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_SubCategory = 2135;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Definition = 2136;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Requirements = 2137;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Regulations = 2138;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_AccessRights = 2139;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Behaviour = 2140;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Granularity = 2141;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Pack = 2142;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Module = 2143;

        /// <remarks />
        public const uint CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Cell = 2144;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_ResultsOfTestsReports = 2147;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Id = 2148;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_SubCategory = 2149;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Definition = 2150;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Requirements = 2151;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Regulations = 2152;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_AccessRights = 2153;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Behaviour = 2154;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Granularity = 2155;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Pack = 2156;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Module = 2157;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Cell = 2158;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol = 2160;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Id = 2161;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_SubCategory = 2162;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Definition = 2163;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Requirements = 2164;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Regulations = 2165;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_AccessRights = 2166;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Behaviour = 2167;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Granularity = 2168;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Pack = 2169;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Module = 2170;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Cell = 2171;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols = 2173;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Id = 2174;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_SubCategory = 2175;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Definition = 2176;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Requirements = 2177;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Regulations = 2178;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_AccessRights = 2179;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Behaviour = 2180;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Granularity = 2181;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Pack = 2182;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Module = 2183;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Cell = 2184;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols = 2186;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Id = 2187;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_SubCategory = 2188;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Definition = 2189;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Requirements = 2190;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Regulations = 2191;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_AccessRights = 2192;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Behaviour = 2193;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Granularity = 2194;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Pack = 2195;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Module = 2196;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Cell = 2197;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity = 2199;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Id = 2200;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_SubCategory = 2201;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Definition = 2202;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Requirements = 2203;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Regulations = 2204;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_AccessRights = 2205;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Behaviour = 2206;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Granularity = 2207;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Pack = 2208;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Module = 2209;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Cell = 2210;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity = 2212;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Id = 2213;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_SubCategory = 2214;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Definition = 2215;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Requirements = 2216;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Regulations = 2217;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_AccessRights = 2218;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Behaviour = 2219;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Granularity = 2220;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Pack = 2221;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Module = 2222;

        /// <remarks />
        public const uint Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Cell = 2223;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier = 593;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Id = 594;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_SubCategory = 595;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Definition = 596;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Requirements = 597;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Regulations = 598;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_AccessRights = 599;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Behaviour = 600;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Granularity = 601;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Pack = 602;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Module = 603;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Cell = 604;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification = 2393;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Id = 2394;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_SubCategory = 2395;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Definition = 2396;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Requirements = 2397;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Regulations = 2398;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_AccessRights = 2399;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Behaviour = 2400;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Granularity = 2401;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Pack = 2402;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Module = 2403;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Cell = 2404;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingDate = 619;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Id = 620;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingDate_SubCategory = 621;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Definition = 622;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Requirements = 623;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Regulations = 624;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingDate_AccessRights = 625;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Behaviour = 626;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Granularity = 627;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Pack = 628;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Module = 629;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Cell = 630;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingPlace = 632;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Id = 633;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_SubCategory = 634;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Definition = 635;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Requirements = 636;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Regulations = 637;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_AccessRights = 638;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Behaviour = 639;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Granularity = 640;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Pack = 641;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Module = 642;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Cell = 643;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryCategory = 645;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryCategory_Id = 646;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryCategory_SubCategory = 647;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryCategory_Definition = 648;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryCategory_Requirements = 649;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryCategory_Regulations = 650;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryCategory_AccessRights = 651;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryCategory_Behaviour = 652;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryCategory_Granularity = 653;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryCategory_Pack = 654;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryCategory_Module = 655;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryCategory_Cell = 656;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryWeight = 658;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryWeight_Id = 659;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryWeight_SubCategory = 660;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryWeight_Definition = 661;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryWeight_Requirements = 662;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryWeight_Regulations = 663;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryWeight_AccessRights = 664;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryWeight_Behaviour = 665;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryWeight_Granularity = 666;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryWeight_Pack = 667;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryWeight_Module = 668;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryWeight_Cell = 669;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryWeight_EngineeringUnits = 670;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryStatus = 671;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryStatus_Id = 672;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryStatus_SubCategory = 673;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryStatus_Definition = 674;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryStatus_Requirements = 675;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryStatus_Regulations = 676;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryStatus_AccessRights = 677;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryStatus_Behaviour = 678;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryStatus_Granularity = 679;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryStatus_Pack = 680;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryStatus_Module = 681;

        /// <remarks />
        public const uint GeneralBatteryAndManufacturerInformationType_BatteryStatus_Cell = 682;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary = 685;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Id = 686;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_SubCategory = 687;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Definition = 688;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Requirements = 689;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Regulations = 690;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_AccessRights = 691;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Behaviour = 692;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Granularity = 693;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Pack = 694;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Module = 695;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Cell = 696;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_EngineeringUnits = 697;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary = 698;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Id = 699;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_SubCategory = 700;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Definition = 701;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Requirements = 702;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Regulations = 703;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_AccessRights = 704;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Behaviour = 705;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Granularity = 706;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Pack = 707;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Module = 708;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Cell = 709;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_EngineeringUnits = 710;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InformationOnAccidents = 711;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InformationOnAccidents_Id = 712;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InformationOnAccidents_SubCategory = 713;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InformationOnAccidents_Definition = 714;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InformationOnAccidents_Requirements = 715;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InformationOnAccidents_Regulations = 716;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InformationOnAccidents_AccessRights = 717;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InformationOnAccidents_Behaviour = 718;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InformationOnAccidents_Granularity = 719;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InformationOnAccidents_Pack = 720;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InformationOnAccidents_Module = 721;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InformationOnAccidents_Cell = 722;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfDeepDischargeEvents = 724;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Id = 725;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_SubCategory = 726;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Definition = 727;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Requirements = 728;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Regulations = 729;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_AccessRights = 730;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Behaviour = 731;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Granularity = 732;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Pack = 733;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Module = 734;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Cell = 735;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfOverchargeEvents = 737;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfOverchargeEvents_Id = 738;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfOverchargeEvents_SubCategory = 739;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfOverchargeEvents_Definition = 740;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfOverchargeEvents_Requirements = 741;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfOverchargeEvents_Regulations = 742;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfOverchargeEvents_AccessRights = 743;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfOverchargeEvents_Behaviour = 744;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfOverchargeEvents_Granularity = 745;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfOverchargeEvents_Pack = 746;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfOverchargeEvents_Module = 747;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOfOverchargeEvents_Cell = 748;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified = 2406;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Id = 2407;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_SubCategory = 2408;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Definition = 2409;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Requirements = 2410;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Regulations = 2411;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_AccessRights = 2412;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Behaviour = 2413;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Granularity = 2414;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Pack = 2415;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Module = 2416;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Cell = 2417;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_EngineeringUnits = 2418;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured = 2419;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Id = 2420;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_SubCategory = 2421;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Definition = 2422;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Requirements = 2423;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Regulations = 2424;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_AccessRights = 2425;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Behaviour = 2426;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Granularity = 2427;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Pack = 2428;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Module = 2429;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Cell = 2430;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_EngineeringUnits = 2431;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE = 2432;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Id = 2433;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_SubCategory = 2434;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Definition = 2435;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Requirements = 2436;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Regulations = 2437;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_AccessRights = 2438;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Behaviour = 2439;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Granularity = 2440;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Pack = 2441;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Module = 2442;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Cell = 2443;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_EngineeringUnits = 2444;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialSelf_DischargingRate = 2251;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialSelf_DischargingRate_Id = 2252;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialSelf_DischargingRate_SubCategory = 2253;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialSelf_DischargingRate_Definition = 2254;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialSelf_DischargingRate_Requirements = 2255;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialSelf_DischargingRate_Regulations = 2256;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialSelf_DischargingRate_AccessRights = 2257;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialSelf_DischargingRate_Behaviour = 2258;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialSelf_DischargingRate_Granularity = 2259;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialSelf_DischargingRate_Pack = 2260;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialSelf_DischargingRate_Module = 2261;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialSelf_DischargingRate_Cell = 2262;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialSelf_DischargingRate_EngineeringUnits = 2263;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentSelf_DischargingRate = 2264;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Id = 2265;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentSelf_DischargingRate_SubCategory = 2266;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Definition = 2267;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Requirements = 2268;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Regulations = 2269;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentSelf_DischargingRate_AccessRights = 2270;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Behaviour = 2271;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Granularity = 2272;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Pack = 2273;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Module = 2274;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Cell = 2275;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentSelf_DischargingRate_EngineeringUnits = 2276;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates = 2277;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Id = 2278;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_SubCategory = 2279;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Definition = 2280;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Requirements = 2281;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Regulations = 2282;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_AccessRights = 2283;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Behaviour = 2284;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Granularity = 2285;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Pack = 2286;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Module = 2287;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Cell = 2288;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_EngineeringUnits = 2289;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatedCapacity = 828;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatedCapacity_Id = 829;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatedCapacity_SubCategory = 830;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatedCapacity_Definition = 831;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatedCapacity_Requirements = 832;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatedCapacity_Regulations = 833;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatedCapacity_AccessRights = 834;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatedCapacity_Behaviour = 835;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatedCapacity_Granularity = 836;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatedCapacity_Pack = 837;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatedCapacity_Module = 838;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatedCapacity_Cell = 839;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatedCapacity_EngineeringUnits = 840;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingCapacity = 841;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingCapacity_Id = 842;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingCapacity_SubCategory = 843;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingCapacity_Definition = 844;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingCapacity_Requirements = 845;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingCapacity_Regulations = 846;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingCapacity_AccessRights = 847;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingCapacity_Behaviour = 848;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingCapacity_Granularity = 849;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingCapacity_Pack = 850;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingCapacity_Module = 851;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingCapacity_Cell = 852;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingCapacity_EngineeringUnits = 853;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityFade = 854;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityFade_Id = 855;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityFade_SubCategory = 856;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityFade_Definition = 857;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityFade_Requirements = 858;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityFade_Regulations = 859;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityFade_AccessRights = 860;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityFade_Behaviour = 861;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityFade_Granularity = 862;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityFade_Pack = 863;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityFade_Module = 864;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityFade_Cell = 865;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityFade_EngineeringUnits = 866;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCharge_SoC = 2445;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCharge_SoC_Id = 2446;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCharge_SoC_SubCategory = 2447;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCharge_SoC_Definition = 2448;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCharge_SoC_Requirements = 2449;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCharge_SoC_Regulations = 2450;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCharge_SoC_AccessRights = 2451;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCharge_SoC_Behaviour = 2452;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCharge_SoC_Granularity = 2453;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCharge_SoC_Pack = 2454;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCharge_SoC_Module = 2455;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCharge_SoC_Cell = 2456;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_StateOfCharge_SoC_EngineeringUnits = 2457;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NominalVoltage = 880;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NominalVoltage_Id = 881;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NominalVoltage_SubCategory = 882;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NominalVoltage_Definition = 883;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NominalVoltage_Requirements = 884;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NominalVoltage_Regulations = 885;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NominalVoltage_AccessRights = 886;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NominalVoltage_Behaviour = 887;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NominalVoltage_Granularity = 888;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NominalVoltage_Pack = 889;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NominalVoltage_Module = 890;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NominalVoltage_Cell = 891;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NominalVoltage_EngineeringUnits = 892;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MinimumVoltage = 893;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MinimumVoltage_Id = 894;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MinimumVoltage_SubCategory = 895;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MinimumVoltage_Definition = 896;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MinimumVoltage_Requirements = 897;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MinimumVoltage_Regulations = 898;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MinimumVoltage_AccessRights = 899;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MinimumVoltage_Behaviour = 900;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MinimumVoltage_Granularity = 901;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MinimumVoltage_Pack = 902;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MinimumVoltage_Module = 903;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MinimumVoltage_Cell = 904;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MinimumVoltage_EngineeringUnits = 905;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumVoltage = 906;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumVoltage_Id = 907;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumVoltage_SubCategory = 908;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumVoltage_Definition = 909;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumVoltage_Requirements = 910;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumVoltage_Regulations = 911;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumVoltage_AccessRights = 912;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumVoltage_Behaviour = 913;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumVoltage_Granularity = 914;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumVoltage_Pack = 915;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumVoltage_Module = 916;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumVoltage_Cell = 917;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumVoltage_EngineeringUnits = 918;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_OriginalPowerCapability = 919;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_OriginalPowerCapability_Id = 920;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_OriginalPowerCapability_SubCategory = 921;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_OriginalPowerCapability_Definition = 922;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_OriginalPowerCapability_Requirements = 923;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_OriginalPowerCapability_Regulations = 924;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_OriginalPowerCapability_AccessRights = 925;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_OriginalPowerCapability_Behaviour = 926;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_OriginalPowerCapability_Granularity = 927;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_OriginalPowerCapability_Pack = 928;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_OriginalPowerCapability_Module = 929;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_OriginalPowerCapability_Cell = 930;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_OriginalPowerCapability_EngineeringUnits = 931;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingPowerCapability = 932;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingPowerCapability_Id = 933;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingPowerCapability_SubCategory = 934;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingPowerCapability_Definition = 935;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingPowerCapability_Requirements = 936;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingPowerCapability_Regulations = 937;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingPowerCapability_AccessRights = 938;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingPowerCapability_Behaviour = 939;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingPowerCapability_Granularity = 940;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingPowerCapability_Pack = 941;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingPowerCapability_Module = 942;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingPowerCapability_Cell = 943;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingPowerCapability_EngineeringUnits = 944;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_PowerCapabilityFade = 945;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_PowerCapabilityFade_Id = 946;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_PowerCapabilityFade_SubCategory = 947;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_PowerCapabilityFade_Definition = 948;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_PowerCapabilityFade_Requirements = 949;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_PowerCapabilityFade_Regulations = 950;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_PowerCapabilityFade_AccessRights = 951;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_PowerCapabilityFade_Behaviour = 952;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_PowerCapabilityFade_Granularity = 953;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_PowerCapabilityFade_Pack = 954;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_PowerCapabilityFade_Module = 955;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_PowerCapabilityFade_Cell = 956;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_PowerCapabilityFade_EngineeringUnits = 957;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumPermittedBatteryPower = 958;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Id = 959;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumPermittedBatteryPower_SubCategory = 960;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Definition = 961;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Requirements = 962;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Regulations = 963;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumPermittedBatteryPower_AccessRights = 964;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Behaviour = 965;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Granularity = 966;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Pack = 967;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Module = 968;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Cell = 969;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_MaximumPermittedBatteryPower_EngineeringUnits = 970;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh = 2458;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Id = 2459;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_SubCategory = 2460;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Definition = 2461;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Requirements = 2462;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Regulations = 2463;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_AccessRights = 2464;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Behaviour = 2465;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Granularity = 2466;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Pack = 2467;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Module = 2468;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Cell = 2469;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_EngineeringUnits = 2470;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency = 984;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Id = 985;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_SubCategory = 986;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Definition = 987;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Requirements = 988;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Regulations = 989;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_AccessRights = 990;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Behaviour = 991;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Granularity = 992;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Pack = 993;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Module = 994;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Cell = 995;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_EngineeringUnits = 996;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife = 2290;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Id = 2291;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_SubCategory = 2292;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Definition = 2293;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Requirements = 2294;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Regulations = 2295;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_AccessRights = 2296;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Behaviour = 2297;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Granularity = 2298;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Pack = 2299;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Module = 2300;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Cell = 2301;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_EngineeringUnits = 2302;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency = 1010;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Id = 1011;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_SubCategory = 1012;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Definition = 1013;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Requirements = 1014;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Regulations = 1015;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_AccessRights = 1016;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Behaviour = 1017;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Granularity = 1018;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Pack = 1019;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Module = 1020;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Cell = 1021;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_EngineeringUnits = 1022;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade = 1023;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Id = 1024;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_SubCategory = 1025;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Definition = 1026;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Requirements = 1027;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Regulations = 1028;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_AccessRights = 1029;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Behaviour = 1030;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Granularity = 1031;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Pack = 1032;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Module = 1033;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Cell = 1034;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_EngineeringUnits = 1035;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel = 1036;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Id = 1037;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_SubCategory = 1038;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Definition = 1039;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Requirements = 1040;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Regulations = 1041;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_AccessRights = 1042;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Behaviour = 1043;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Granularity = 1044;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Pack = 1045;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Module = 1046;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Cell = 1047;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_EngineeringUnits = 1048;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel = 1049;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Id = 1050;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_SubCategory = 1051;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Definition = 1052;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Requirements = 1053;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Regulations = 1054;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_AccessRights = 1055;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Behaviour = 1056;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Granularity = 1057;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Pack = 1058;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Module = 1059;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Cell = 1060;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_EngineeringUnits = 1061;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel = 1062;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Id = 1063;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_SubCategory = 1064;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Definition = 1065;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Requirements = 1066;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Regulations = 1067;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_AccessRights = 1068;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Behaviour = 1069;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Granularity = 1070;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Pack = 1071;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Module = 1072;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Cell = 1073;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_EngineeringUnits = 1074;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel = 1075;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Id = 1076;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_SubCategory = 1077;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Definition = 1078;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Requirements = 1079;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Regulations = 1080;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_AccessRights = 1081;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Behaviour = 1082;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Granularity = 1083;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Pack = 1084;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Module = 1085;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Cell = 1086;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_EngineeringUnits = 1087;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel = 1088;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Id = 1089;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_SubCategory = 1090;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Definition = 1091;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Requirements = 1092;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Regulations = 1093;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_AccessRights = 1094;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Behaviour = 1095;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Granularity = 1096;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Pack = 1097;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Module = 1098;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Cell = 1099;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_EngineeringUnits = 1100;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel = 1101;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Id = 1102;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_SubCategory = 1103;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Definition = 1104;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Requirements = 1105;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Regulations = 1106;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_AccessRights = 1107;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Behaviour = 1108;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Granularity = 1109;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Pack = 1110;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Module = 1111;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Cell = 1112;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_EngineeringUnits = 1113;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel = 1114;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Id = 1115;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_SubCategory = 1116;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Definition = 1117;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Requirements = 1118;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Regulations = 1119;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_AccessRights = 1120;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Behaviour = 1121;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Granularity = 1122;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Pack = 1123;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Module = 1124;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Cell = 1125;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_EngineeringUnits = 1126;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel = 1127;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Id = 1128;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_SubCategory = 1129;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Definition = 1130;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Requirements = 1131;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Regulations = 1132;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_AccessRights = 1133;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Behaviour = 1134;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Granularity = 1135;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Pack = 1136;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Module = 1137;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Cell = 1138;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_EngineeringUnits = 1139;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles = 2303;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Id = 2304;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_SubCategory = 2305;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Definition = 2306;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Requirements = 2307;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Regulations = 2308;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_AccessRights = 2309;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Behaviour = 2310;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Granularity = 2311;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Pack = 2312;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Module = 2313;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Cell = 2314;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles = 2316;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Id = 2317;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_SubCategory = 2318;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Definition = 2319;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Requirements = 2320;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Regulations = 2321;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_AccessRights = 2322;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Behaviour = 2323;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Granularity = 2324;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Pack = 2325;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Module = 2326;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Cell = 2327;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_Cycle_LifeReferenceTest = 2329;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Id = 2330;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_Cycle_LifeReferenceTest_SubCategory = 2331;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Definition = 2332;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Requirements = 2333;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Regulations = 2334;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_Cycle_LifeReferenceTest_AccessRights = 2335;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Behaviour = 2336;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Granularity = 2337;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Pack = 2338;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Module = 2339;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Cell = 2340;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest = 2342;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Id = 2343;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_SubCategory = 2344;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Definition = 2345;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Requirements = 2346;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Regulations = 2347;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_AccessRights = 2348;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Behaviour = 2349;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Granularity = 2350;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Pack = 2351;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Module = 2352;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Cell = 2353;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_EngineeringUnits = 2354;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EnergyThroughput = 1192;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EnergyThroughput_Id = 1193;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EnergyThroughput_SubCategory = 1194;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EnergyThroughput_Definition = 1195;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EnergyThroughput_Requirements = 1196;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EnergyThroughput_Regulations = 1197;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EnergyThroughput_AccessRights = 1198;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EnergyThroughput_Behaviour = 1199;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EnergyThroughput_Granularity = 1200;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EnergyThroughput_Pack = 1201;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EnergyThroughput_Module = 1202;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EnergyThroughput_Cell = 1203;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_EnergyThroughput_EngineeringUnits = 1204;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThroughput = 1205;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThroughput_Id = 1206;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThroughput_SubCategory = 1207;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThroughput_Definition = 1208;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThroughput_Requirements = 1209;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThroughput_Regulations = 1210;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThroughput_AccessRights = 1211;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThroughput_Behaviour = 1212;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThroughput_Granularity = 1213;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThroughput_Pack = 1214;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThroughput_Module = 1215;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThroughput_Cell = 1216;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThroughput_EngineeringUnits = 1217;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThresholdForExhaustion = 1218;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Id = 1219;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThresholdForExhaustion_SubCategory = 1220;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Definition = 1221;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Requirements = 1222;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Regulations = 1223;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThresholdForExhaustion_AccessRights = 1224;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Behaviour = 1225;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Granularity = 1226;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Pack = 1227;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Module = 1228;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Cell = 1229;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_CapacityThresholdForExhaustion_EngineeringUnits = 1230;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_SOCEThresholdForExhaustion = 1231;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Id = 1232;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_SOCEThresholdForExhaustion_SubCategory = 1233;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Definition = 1234;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Requirements = 1235;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Regulations = 1236;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_SOCEThresholdForExhaustion_AccessRights = 1237;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Behaviour = 1238;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Granularity = 1239;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Pack = 1240;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Module = 1241;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Cell = 1242;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_SOCEThresholdForExhaustion_EngineeringUnits = 1243;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery = 1244;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Id = 1245;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_SubCategory = 1246;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Definition = 1247;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Requirements = 1248;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Regulations = 1249;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_AccessRights = 1250;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Behaviour = 1251;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Granularity = 1252;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Pack = 1253;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Module = 1254;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Cell = 1255;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_EngineeringUnits = 1256;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService = 1257;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Id = 1258;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_SubCategory = 1259;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Definition = 1260;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Requirements = 1261;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Regulations = 1262;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_AccessRights = 1263;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Behaviour = 1264;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Granularity = 1265;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Pack = 1266;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Module = 1267;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Cell = 1268;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary = 2471;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Id = 2472;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_SubCategory = 2473;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Definition = 2474;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Requirements = 2475;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Regulations = 2476;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_AccessRights = 2477;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Behaviour = 2478;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Granularity = 2479;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Pack = 2480;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Module = 2481;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Cell = 2482;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_EngineeringUnits = 2483;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary = 2484;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Id = 2485;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_SubCategory = 2486;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Definition = 2487;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Requirements = 2488;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Regulations = 2489;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_AccessRights = 2490;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Behaviour = 2491;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Granularity = 2492;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Pack = 2493;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Module = 2494;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Cell = 2495;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_EngineeringUnits = 2496;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary = 1296;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Id = 1297;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_SubCategory = 1298;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Definition = 1299;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Requirements = 1300;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Regulations = 1301;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_AccessRights = 1302;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Behaviour = 1303;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Granularity = 1304;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Pack = 1305;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Module = 1306;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Cell = 1307;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_EngineeringUnits = 1308;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary = 1309;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Id = 1310;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_SubCategory = 1311;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Definition = 1312;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Requirements = 1313;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Regulations = 1314;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_AccessRights = 1315;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Behaviour = 1316;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Granularity = 1317;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Pack = 1318;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Module = 1319;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Cell = 1320;

        /// <remarks />
        public const uint PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_EngineeringUnits = 1321;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport = 1323;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Id = 1324;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_SubCategory = 1325;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Definition = 1326;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Requirements = 1327;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Regulations = 1328;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_AccessRights = 1329;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Behaviour = 1330;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Granularity = 1331;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Pack = 1332;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Module = 1333;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Cell = 1334;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances = 1336;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Id = 1337;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_SubCategory = 1338;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Definition = 1339;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Requirements = 1340;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Regulations = 1341;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_AccessRights = 1342;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Behaviour = 1343;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Granularity = 1344;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Pack = 1345;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Module = 1346;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Cell = 1347;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement = 1349;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Id = 1350;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_SubCategory = 1351;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Definition = 1352;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Requirements = 1353;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Regulations = 1354;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_AccessRights = 1355;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Behaviour = 1356;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Granularity = 1357;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Pack = 1358;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Module = 1359;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Cell = 1360;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_SustainabilityReport = 1362;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_SustainabilityReport_Id = 1363;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_SustainabilityReport_SubCategory = 1364;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_SustainabilityReport_Definition = 1365;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_SustainabilityReport_Requirements = 1366;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_SustainabilityReport_Regulations = 1367;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_SustainabilityReport_AccessRights = 1368;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_SustainabilityReport_Behaviour = 1369;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_SustainabilityReport_Granularity = 1370;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_SustainabilityReport_Pack = 1371;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_SustainabilityReport_Module = 1372;

        /// <remarks />
        public const uint SupplyChainDueDiligenceType_SustainabilityReport_Cell = 1373;

        /// <remarks />
        public const uint BatteryPassport_BinarySchema = 1375;

        /// <remarks />
        public const uint BatteryPassport_BinarySchema_NamespaceUri = 1377;

        /// <remarks />
        public const uint BatteryPassport_BinarySchema_Deprecated = 1378;

        /// <remarks />
        public const uint BatteryPassport_BinarySchema_BatteryPassportDataType = 3873;

        /// <remarks />
        public const uint BatteryPassport_BinarySchema_BatteryMaterialsAndCompositionDataType = 3876;

        /// <remarks />
        public const uint BatteryPassport_BinarySchema_CarbonFootprintDataType = 3879;

        /// <remarks />
        public const uint BatteryPassport_BinarySchema_CircularityAndResourceEfficiencyDataType = 3882;

        /// <remarks />
        public const uint BatteryPassport_BinarySchema_Compliance_LabelsAndCertificationsDataType = 3885;

        /// <remarks />
        public const uint BatteryPassport_BinarySchema_GeneralBatteryAndManufacturerInformationDataType = 3888;

        /// <remarks />
        public const uint BatteryPassport_BinarySchema_PerformanceAndDurabilityDataType = 3891;

        /// <remarks />
        public const uint BatteryPassport_BinarySchema_SupplyChainDueDiligenceDataType = 3894;

        /// <remarks />
        public const uint BatteryPassport_XmlSchema = 1400;

        /// <remarks />
        public const uint BatteryPassport_XmlSchema_NamespaceUri = 1402;

        /// <remarks />
        public const uint BatteryPassport_XmlSchema_Deprecated = 1403;

        /// <remarks />
        public const uint BatteryPassport_XmlSchema_BatteryPassportDataType = 3905;

        /// <remarks />
        public const uint BatteryPassport_XmlSchema_BatteryMaterialsAndCompositionDataType = 3908;

        /// <remarks />
        public const uint BatteryPassport_XmlSchema_CarbonFootprintDataType = 3911;

        /// <remarks />
        public const uint BatteryPassport_XmlSchema_CircularityAndResourceEfficiencyDataType = 3914;

        /// <remarks />
        public const uint BatteryPassport_XmlSchema_Compliance_LabelsAndCertificationsDataType = 3917;

        /// <remarks />
        public const uint BatteryPassport_XmlSchema_GeneralBatteryAndManufacturerInformationDataType = 3920;

        /// <remarks />
        public const uint BatteryPassport_XmlSchema_PerformanceAndDurabilityDataType = 3923;

        /// <remarks />
        public const uint BatteryPassport_XmlSchema_SupplyChainDueDiligenceDataType = 3926;
    }
    #endregion

    #region VariableType Identifiers
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public static partial class VariableTypes
    {
        /// <remarks />
        public const uint SubmodelPropertyType = 3;
    }
    #endregion

    #region DataType Node Identifiers
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public static partial class DataTypeIds
    {
        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportDataType = new ExpandedNodeId(BatteryPassport.DataTypes.BatteryPassportDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionDataType = new ExpandedNodeId(BatteryPassport.DataTypes.BatteryMaterialsAndCompositionDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintDataType = new ExpandedNodeId(BatteryPassport.DataTypes.CarbonFootprintDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyDataType = new ExpandedNodeId(BatteryPassport.DataTypes.CircularityAndResourceEfficiencyDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsDataType = new ExpandedNodeId(BatteryPassport.DataTypes.Compliance_LabelsAndCertificationsDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationDataType = new ExpandedNodeId(BatteryPassport.DataTypes.GeneralBatteryAndManufacturerInformationDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityDataType = new ExpandedNodeId(BatteryPassport.DataTypes.PerformanceAndDurabilityDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceDataType = new ExpandedNodeId(BatteryPassport.DataTypes.SupplyChainDueDiligenceDataType, BatteryPassport.Namespaces.BatteryPassport);
    }
    #endregion

    #region Method Node Identifiers
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public static partial class MethodIds
    {
        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_Open = new ExpandedNodeId(BatteryPassport.Methods.BatteryType_Package_Open, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_Close = new ExpandedNodeId(BatteryPassport.Methods.BatteryType_Package_Close, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_Read = new ExpandedNodeId(BatteryPassport.Methods.BatteryType_Package_Read, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_Write = new ExpandedNodeId(BatteryPassport.Methods.BatteryType_Package_Write, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_GetPosition = new ExpandedNodeId(BatteryPassport.Methods.BatteryType_Package_GetPosition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_SetPosition = new ExpandedNodeId(BatteryPassport.Methods.BatteryType_Package_SetPosition, BatteryPassport.Namespaces.BatteryPassport);
    }
    #endregion

    #region Object Node Identifiers
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public static partial class ObjectIds
    {
        /// <remarks />
        public static readonly ExpandedNodeId Batteries = new ExpandedNodeId(BatteryPassport.Objects.Batteries, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package = new ExpandedNodeId(BatteryPassport.Objects.BatteryType_Package, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState = new ExpandedNodeId(BatteryPassport.Objects.BatteryType_CurrentState, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport = new ExpandedNodeId(BatteryPassport.Objects.BatteryType_Passport, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition = new ExpandedNodeId(BatteryPassport.Objects.BatteryType_Passport_BatteryMaterialsAndComposition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint = new ExpandedNodeId(BatteryPassport.Objects.BatteryType_Passport_CarbonFootprint, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency = new ExpandedNodeId(BatteryPassport.Objects.BatteryType_Passport_CircularityAndResourceEfficiency, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications = new ExpandedNodeId(BatteryPassport.Objects.BatteryType_Passport_Compliance_LabelsAndCertifications, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation = new ExpandedNodeId(BatteryPassport.Objects.BatteryType_Passport_GeneralBatteryAndManufacturerInformation, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability = new ExpandedNodeId(BatteryPassport.Objects.BatteryType_Passport_PerformanceAndDurability, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence = new ExpandedNodeId(BatteryPassport.Objects.BatteryType_Passport_SupplyChainDueDiligence, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition = new ExpandedNodeId(BatteryPassport.Objects.BatteryPassportType_BatteryMaterialsAndComposition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint = new ExpandedNodeId(BatteryPassport.Objects.BatteryPassportType_CarbonFootprint, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency = new ExpandedNodeId(BatteryPassport.Objects.BatteryPassportType_CircularityAndResourceEfficiency, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications = new ExpandedNodeId(BatteryPassport.Objects.BatteryPassportType_Compliance_LabelsAndCertifications, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation = new ExpandedNodeId(BatteryPassport.Objects.BatteryPassportType_GeneralBatteryAndManufacturerInformation, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability = new ExpandedNodeId(BatteryPassport.Objects.BatteryPassportType_PerformanceAndDurability, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence = new ExpandedNodeId(BatteryPassport.Objects.BatteryPassportType_SupplyChainDueDiligence, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportDataType_Encoding_DefaultBinary = new ExpandedNodeId(BatteryPassport.Objects.BatteryPassportDataType_Encoding_DefaultBinary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionDataType_Encoding_DefaultBinary = new ExpandedNodeId(BatteryPassport.Objects.BatteryMaterialsAndCompositionDataType_Encoding_DefaultBinary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintDataType_Encoding_DefaultBinary = new ExpandedNodeId(BatteryPassport.Objects.CarbonFootprintDataType_Encoding_DefaultBinary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyDataType_Encoding_DefaultBinary = new ExpandedNodeId(BatteryPassport.Objects.CircularityAndResourceEfficiencyDataType_Encoding_DefaultBinary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsDataType_Encoding_DefaultBinary = new ExpandedNodeId(BatteryPassport.Objects.Compliance_LabelsAndCertificationsDataType_Encoding_DefaultBinary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationDataType_Encoding_DefaultBinary = new ExpandedNodeId(BatteryPassport.Objects.GeneralBatteryAndManufacturerInformationDataType_Encoding_DefaultBinary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityDataType_Encoding_DefaultBinary = new ExpandedNodeId(BatteryPassport.Objects.PerformanceAndDurabilityDataType_Encoding_DefaultBinary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceDataType_Encoding_DefaultBinary = new ExpandedNodeId(BatteryPassport.Objects.SupplyChainDueDiligenceDataType_Encoding_DefaultBinary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportDataType_Encoding_DefaultXml = new ExpandedNodeId(BatteryPassport.Objects.BatteryPassportDataType_Encoding_DefaultXml, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionDataType_Encoding_DefaultXml = new ExpandedNodeId(BatteryPassport.Objects.BatteryMaterialsAndCompositionDataType_Encoding_DefaultXml, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintDataType_Encoding_DefaultXml = new ExpandedNodeId(BatteryPassport.Objects.CarbonFootprintDataType_Encoding_DefaultXml, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyDataType_Encoding_DefaultXml = new ExpandedNodeId(BatteryPassport.Objects.CircularityAndResourceEfficiencyDataType_Encoding_DefaultXml, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsDataType_Encoding_DefaultXml = new ExpandedNodeId(BatteryPassport.Objects.Compliance_LabelsAndCertificationsDataType_Encoding_DefaultXml, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationDataType_Encoding_DefaultXml = new ExpandedNodeId(BatteryPassport.Objects.GeneralBatteryAndManufacturerInformationDataType_Encoding_DefaultXml, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityDataType_Encoding_DefaultXml = new ExpandedNodeId(BatteryPassport.Objects.PerformanceAndDurabilityDataType_Encoding_DefaultXml, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceDataType_Encoding_DefaultXml = new ExpandedNodeId(BatteryPassport.Objects.SupplyChainDueDiligenceDataType_Encoding_DefaultXml, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportDataType_Encoding_DefaultJson = new ExpandedNodeId(BatteryPassport.Objects.BatteryPassportDataType_Encoding_DefaultJson, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionDataType_Encoding_DefaultJson = new ExpandedNodeId(BatteryPassport.Objects.BatteryMaterialsAndCompositionDataType_Encoding_DefaultJson, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintDataType_Encoding_DefaultJson = new ExpandedNodeId(BatteryPassport.Objects.CarbonFootprintDataType_Encoding_DefaultJson, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyDataType_Encoding_DefaultJson = new ExpandedNodeId(BatteryPassport.Objects.CircularityAndResourceEfficiencyDataType_Encoding_DefaultJson, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsDataType_Encoding_DefaultJson = new ExpandedNodeId(BatteryPassport.Objects.Compliance_LabelsAndCertificationsDataType_Encoding_DefaultJson, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationDataType_Encoding_DefaultJson = new ExpandedNodeId(BatteryPassport.Objects.GeneralBatteryAndManufacturerInformationDataType_Encoding_DefaultJson, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityDataType_Encoding_DefaultJson = new ExpandedNodeId(BatteryPassport.Objects.PerformanceAndDurabilityDataType_Encoding_DefaultJson, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceDataType_Encoding_DefaultJson = new ExpandedNodeId(BatteryPassport.Objects.SupplyChainDueDiligenceDataType_Encoding_DefaultJson, BatteryPassport.Namespaces.BatteryPassport);
    }
    #endregion

    #region ObjectType Node Identifiers
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public static partial class ObjectTypeIds
    {
        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType = new ExpandedNodeId(BatteryPassport.ObjectTypes.BatteryCurrentStateType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType = new ExpandedNodeId(BatteryPassport.ObjectTypes.BatteryType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SubmodelType = new ExpandedNodeId(BatteryPassport.ObjectTypes.SubmodelType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType = new ExpandedNodeId(BatteryPassport.ObjectTypes.BatteryPassportType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType = new ExpandedNodeId(BatteryPassport.ObjectTypes.BatteryMaterialsAndCompositionType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType = new ExpandedNodeId(BatteryPassport.ObjectTypes.CarbonFootprintType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType = new ExpandedNodeId(BatteryPassport.ObjectTypes.CircularityAndResourceEfficiencyType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType = new ExpandedNodeId(BatteryPassport.ObjectTypes.Compliance_LabelsAndCertificationsType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType = new ExpandedNodeId(BatteryPassport.ObjectTypes.GeneralBatteryAndManufacturerInformationType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType = new ExpandedNodeId(BatteryPassport.ObjectTypes.PerformanceAndDurabilityType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType = new ExpandedNodeId(BatteryPassport.ObjectTypes.SupplyChainDueDiligenceType, BatteryPassport.Namespaces.BatteryPassport);
    }
    #endregion

    #region Variable Node Identifiers
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public static partial class VariableIds
    {
        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_Temperature = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_Temperature, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_Temperature_EURange = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_Temperature_EURange, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_Temperature_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_Temperature_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_Voltage = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_Voltage, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_Voltage_EURange = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_Voltage_EURange, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_Voltage_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_Voltage_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_ChargeRemaining = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_ChargeRemaining, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_ChargeRemaining_EURange = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_ChargeRemaining_EURange, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_ChargeRemaining_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_ChargeRemaining_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_TimeRemaining = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_TimeRemaining, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_TimeRemaining_EURange = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_TimeRemaining_EURange, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_PowerOut = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_PowerOut, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_PowerOut_EURange = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_PowerOut_EURange, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_PowerOut_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_PowerOut_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_PowerIn = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_PowerIn, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_PowerIn_EURange = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_PowerIn_EURange, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryCurrentStateType_PowerIn_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryCurrentStateType_PowerIn_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_Size = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Package_Size, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_Writable = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Package_Writable, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_UserWritable = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Package_UserWritable, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_OpenCount = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Package_OpenCount, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_Open_InputArguments = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Package_Open_InputArguments, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_Open_OutputArguments = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Package_Open_OutputArguments, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_Close_InputArguments = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Package_Close_InputArguments, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_Read_InputArguments = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Package_Read_InputArguments, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_Read_OutputArguments = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Package_Read_OutputArguments, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_Write_InputArguments = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Package_Write_InputArguments, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_GetPosition_InputArguments = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Package_GetPosition_InputArguments, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_GetPosition_OutputArguments = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Package_GetPosition_OutputArguments, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Package_SetPosition_InputArguments = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Package_SetPosition_InputArguments, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_Temperature = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_Temperature, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_Temperature_EURange = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_Temperature_EURange, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_Temperature_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_Temperature_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_Voltage = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_Voltage, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_Voltage_EURange = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_Voltage_EURange, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_Voltage_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_Voltage_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_ChargeRemaining = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_ChargeRemaining, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_ChargeRemaining_EURange = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_ChargeRemaining_EURange, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_ChargeRemaining_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_ChargeRemaining_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_TimeRemaining = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_TimeRemaining, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_TimeRemaining_EURange = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_TimeRemaining_EURange, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_PowerOut = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_PowerOut, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_PowerOut_EURange = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_PowerOut_EURange, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_PowerOut_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_PowerOut_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_PowerIn = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_PowerIn, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_PowerIn_EURange = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_PowerIn_EURange, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_CurrentState_PowerIn_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_CurrentState_PowerIn_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_CriticalRawMaterials_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_BatteryChemistry_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_BatteryCarbonFootprint_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_CarbonFootprintPerformanceClass_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_PartNumbersForComponents_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_ExtinguishingAgent_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RenewableContentShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryCategory_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryWeight_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_GeneralBatteryAndManufacturerInformation_BatteryStatus_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InformationOnAccidents_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfDeepDischargeEvents_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOfOverchargeEvents_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialSelf_DischargingRate_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentSelf_DischargingRate_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatedCapacity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatedCapacity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatedCapacity_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatedCapacity_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatedCapacity_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatedCapacity_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatedCapacity_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatedCapacity_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatedCapacity_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingCapacity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingCapacity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingCapacity_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityFade = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityFade, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityFade_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityFade_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityFade_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityFade_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityFade_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityFade_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityFade_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityFade_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityFade_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityFade_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityFade_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityFade_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityFade_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityFade_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityFade_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityFade_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityFade_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityFade_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityFade_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityFade_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityFade_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityFade_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityFade_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityFade_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_StateOfCharge_SoC_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NominalVoltage = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NominalVoltage, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NominalVoltage_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NominalVoltage_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NominalVoltage_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NominalVoltage_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NominalVoltage_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NominalVoltage_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NominalVoltage_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MinimumVoltage = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MinimumVoltage, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MinimumVoltage_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumVoltage = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumVoltage, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumVoltage_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_OriginalPowerCapability_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingPowerCapability_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_PowerCapabilityFade_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_MaximumPermittedBatteryPower_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_Cycle_LifeReferenceTest_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EnergyThroughput = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EnergyThroughput, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_EnergyThroughput_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThroughput = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThroughput, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThroughput_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_CapacityThresholdForExhaustion_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_SOCEThresholdForExhaustion_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_WarrantyPeriodOfTheBattery_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryType_Passport_SupplyChainDueDiligence_SustainabilityReport_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SubmodelPropertyType_Id = new ExpandedNodeId(BatteryPassport.Variables.SubmodelPropertyType_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SubmodelPropertyType_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.SubmodelPropertyType_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SubmodelPropertyType_Definition = new ExpandedNodeId(BatteryPassport.Variables.SubmodelPropertyType_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SubmodelPropertyType_Requirements = new ExpandedNodeId(BatteryPassport.Variables.SubmodelPropertyType_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SubmodelPropertyType_Regulations = new ExpandedNodeId(BatteryPassport.Variables.SubmodelPropertyType_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SubmodelPropertyType_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.SubmodelPropertyType_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SubmodelPropertyType_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.SubmodelPropertyType_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SubmodelPropertyType_Granularity = new ExpandedNodeId(BatteryPassport.Variables.SubmodelPropertyType_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SubmodelPropertyType_Pack = new ExpandedNodeId(BatteryPassport.Variables.SubmodelPropertyType_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SubmodelPropertyType_Module = new ExpandedNodeId(BatteryPassport.Variables.SubmodelPropertyType_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SubmodelPropertyType_Cell = new ExpandedNodeId(BatteryPassport.Variables.SubmodelPropertyType_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SubmodelPropertyType_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.SubmodelPropertyType_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_CriticalRawMaterials_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_BatteryChemistry_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfTheCathode_Anode_ElectrolyteMaterials_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_WeightOfTheCathode_Anode_ElectrolyteMaterials_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_NameOfHazardousSubstances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_RelatedIdentifiersOfHazardousSubstances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_LocationOfHazardousSubstances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ConcentrationRangeOfHazardousSubstances_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_BatteryMaterialsAndComposition_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_BatteryCarbonFootprint_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_CarbonFootprintPerformanceClass_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CarbonFootprint_WebLinkToPublicCarbonFootprintStudy_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForRemovalOfTheBatteryFromTheAppliance_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PostalAddressOfSourcesForSpareParts_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_E_MailAddressOfSourcesForSpareParts_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_WebAddressOfSourcesForSpareParts_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_PartNumbersForComponents_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_ExtinguishingAgent_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_SafetyMeasures_Instructions_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledNickelShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledCobaltShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLithiumShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Pre_ConsumerRecycledLeadShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledNickelShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledCobaltShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLithiumShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_Post_ConsumerRecycledLeadShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RenewableContentShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToWastePrevention_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_CircularityAndResourceEfficiency_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_ResultsOfTestsReports_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_SeparateCollectionSymbol_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_MeaningOfLabelsAndSymbols_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_CadmiumAndLeadSymbols_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_EUDeclarationOfConformity_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_Compliance_LabelsAndCertifications_IDOfEUDeclarationOfConformity_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryUniqueIdentifier_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturersIdentification_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingDate_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_ManufacturingPlace_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryCategory_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryWeight_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_GeneralBatteryAndManufacturerInformation_BatteryStatus_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InformationOnAccidents = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InformationOnAccidents, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InformationOnAccidents_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfDeepDischargeEvents_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOfOverchargeEvents_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CertifiedUsableBatteryEnergy_UBEcertified_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingUsableBatteryEnergy_UBEmeasured_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCertifiedEnergy_SOCE_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialSelf_DischargingRate_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentSelf_DischargingRate_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EvolutionOfSelf_DischargingRates_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatedCapacity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatedCapacity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatedCapacity_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatedCapacity_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatedCapacity_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatedCapacity_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatedCapacity_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatedCapacity_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatedCapacity_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatedCapacity_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatedCapacity_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatedCapacity_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatedCapacity_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatedCapacity_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatedCapacity_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatedCapacity_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatedCapacity_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatedCapacity_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatedCapacity_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatedCapacity_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatedCapacity_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatedCapacity_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatedCapacity_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatedCapacity_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatedCapacity_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatedCapacity_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingCapacity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingCapacity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingCapacity_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingCapacity_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingCapacity_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingCapacity_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingCapacity_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingCapacity_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingCapacity_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityFade = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityFade, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityFade_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityFade_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityFade_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityFade_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityFade_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityFade_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityFade_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityFade_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityFade_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityFade_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityFade_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityFade_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityFade_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityFade_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityFade_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityFade_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityFade_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityFade_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityFade_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityFade_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityFade_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityFade_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityFade_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityFade_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_StateOfCharge_SoC_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NominalVoltage = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NominalVoltage, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NominalVoltage_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NominalVoltage_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NominalVoltage_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NominalVoltage_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NominalVoltage_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NominalVoltage_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NominalVoltage_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NominalVoltage_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NominalVoltage_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NominalVoltage_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NominalVoltage_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NominalVoltage_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NominalVoltage_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NominalVoltage_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NominalVoltage_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NominalVoltage_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NominalVoltage_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NominalVoltage_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NominalVoltage_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NominalVoltage_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NominalVoltage_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NominalVoltage_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NominalVoltage_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NominalVoltage_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MinimumVoltage = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MinimumVoltage, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MinimumVoltage_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MinimumVoltage_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MinimumVoltage_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MinimumVoltage_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MinimumVoltage_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MinimumVoltage_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MinimumVoltage_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumVoltage = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumVoltage, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumVoltage_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumVoltage_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumVoltage_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumVoltage_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumVoltage_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumVoltage_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumVoltage_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_OriginalPowerCapability_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingPowerCapability_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_PowerCapabilityFade_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_MaximumPermittedBatteryPower_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialRoundTripEnergyEfficiency_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyAt50_OfCycleLife_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RemainingRoundTripEnergyEfficiency_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_RoundTripEnergyEfficiencyFade_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryCellLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryCellLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryCellLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryPackLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryPackLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InitialInternalResistanceOnBatteryModuleLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CurrentInternalResistanceOnBatteryModuleLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_InternalResistanceIncreaseOnBatteryModuleLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_ExpectedLifetime_NumberOfCharge_DischargeCycles_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_NumberOf_Full_Charge_DischargeCycles_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_Cycle_LifeReferenceTest_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_C_RateOfRelevantCycle_LifeTest_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EnergyThroughput = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EnergyThroughput, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EnergyThroughput_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EnergyThroughput_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EnergyThroughput_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EnergyThroughput_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EnergyThroughput_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_EnergyThroughput_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_EnergyThroughput_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThroughput = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThroughput, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThroughput_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThroughput_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThroughput_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThroughput_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThroughput_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThroughput_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThroughput_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_CapacityThresholdForExhaustion_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_SOCEThresholdForExhaustion_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_WarrantyPeriodOfTheBattery_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_DateOfPuttingTheBatteryIntoService_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_LowerBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TemperatureRangeIdleState_UpperBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesAboveBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_PerformanceAndDurability_TimeSpentInExtremeTemperaturesBelowBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_InformationOfTheDueDiligenceReport_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_ThirdPartySupplyChainAssurances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_EUTaxonomyDisclosureStatement_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassportType_SupplyChainDueDiligence_SustainabilityReport_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_CriticalRawMaterials = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_CriticalRawMaterials, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_CriticalRawMaterials_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_CriticalRawMaterials_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_CriticalRawMaterials_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_CriticalRawMaterials_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_CriticalRawMaterials_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_CriticalRawMaterials_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_CriticalRawMaterials_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_CriticalRawMaterials_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_CriticalRawMaterials_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_CriticalRawMaterials_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_CriticalRawMaterials_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_CriticalRawMaterials_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_CriticalRawMaterials_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_CriticalRawMaterials_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_CriticalRawMaterials_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_CriticalRawMaterials_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_CriticalRawMaterials_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_CriticalRawMaterials_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_CriticalRawMaterials_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_CriticalRawMaterials_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_CriticalRawMaterials_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_CriticalRawMaterials_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_BatteryChemistry = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_BatteryChemistry, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_BatteryChemistry_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_BatteryChemistry_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_BatteryChemistry_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_BatteryChemistry_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_BatteryChemistry_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_BatteryChemistry_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_BatteryChemistry_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_BatteryChemistry_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_BatteryChemistry_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_BatteryChemistry_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_BatteryChemistry_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_BatteryChemistry_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_BatteryChemistry_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_BatteryChemistry_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_BatteryChemistry_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_BatteryChemistry_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_BatteryChemistry_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_BatteryChemistry_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_BatteryChemistry_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_BatteryChemistry_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_BatteryChemistry_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_BatteryChemistry_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfTheCathode_Anode_ElectrolyteMaterials_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_WeightOfTheCathode_Anode_ElectrolyteMaterials_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfHazardousSubstances = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfHazardousSubstances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_NameOfHazardousSubstances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_HazardClassesAnd_OrCategoriesOfHazardousSubstances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_RelatedIdentifiersOfHazardousSubstances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_LocationOfHazardousSubstances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ConcentrationRangeOfHazardousSubstances_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Id = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Definition = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Requirements = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Regulations = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Granularity = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Pack = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Module = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Cell = new ExpandedNodeId(BatteryPassport.Variables.BatteryMaterialsAndCompositionType_ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_BatteryCarbonFootprint = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_BatteryCarbonFootprint, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_BatteryCarbonFootprint_Id = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_BatteryCarbonFootprint_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_BatteryCarbonFootprint_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_BatteryCarbonFootprint_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_BatteryCarbonFootprint_Definition = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_BatteryCarbonFootprint_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_BatteryCarbonFootprint_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_BatteryCarbonFootprint_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_BatteryCarbonFootprint_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_BatteryCarbonFootprint_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_BatteryCarbonFootprint_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_BatteryCarbonFootprint_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_BatteryCarbonFootprint_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_BatteryCarbonFootprint_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_BatteryCarbonFootprint_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_BatteryCarbonFootprint_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_BatteryCarbonFootprint_Pack = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_BatteryCarbonFootprint_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_BatteryCarbonFootprint_Module = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_BatteryCarbonFootprint_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_BatteryCarbonFootprint_Cell = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_BatteryCarbonFootprint_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_BatteryCarbonFootprint_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_BatteryCarbonFootprint_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Id = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Definition = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Pack = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Module = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Cell = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Id = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Definition = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Pack = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Module = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Cell = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Id = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Definition = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Pack = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Module = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Cell = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Id = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Definition = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Pack = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Module = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Cell = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_CarbonFootprintPerformanceClass = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_CarbonFootprintPerformanceClass, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_CarbonFootprintPerformanceClass_Id = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_CarbonFootprintPerformanceClass_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_CarbonFootprintPerformanceClass_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_CarbonFootprintPerformanceClass_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_CarbonFootprintPerformanceClass_Definition = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_CarbonFootprintPerformanceClass_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_CarbonFootprintPerformanceClass_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_CarbonFootprintPerformanceClass_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_CarbonFootprintPerformanceClass_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_CarbonFootprintPerformanceClass_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_CarbonFootprintPerformanceClass_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_CarbonFootprintPerformanceClass_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_CarbonFootprintPerformanceClass_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_CarbonFootprintPerformanceClass_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_CarbonFootprintPerformanceClass_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_CarbonFootprintPerformanceClass_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_CarbonFootprintPerformanceClass_Pack = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_CarbonFootprintPerformanceClass_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_CarbonFootprintPerformanceClass_Module = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_CarbonFootprintPerformanceClass_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_CarbonFootprintPerformanceClass_Cell = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_CarbonFootprintPerformanceClass_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Id = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Definition = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Pack = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Module = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Cell = new ExpandedNodeId(BatteryPassport.Variables.CarbonFootprintType_WebLinkToPublicCarbonFootprintStudy_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForRemovalOfTheBatteryFromTheAppliance_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ManualForDisassemblyAndDismantlingOfTheBatteryPack_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PostalAddressOfSourcesForSpareParts_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_E_MailAddressOfSourcesForSpareParts_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_WebAddressOfSourcesForSpareParts_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PartNumbersForComponents = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PartNumbersForComponents, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PartNumbersForComponents_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PartNumbersForComponents_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PartNumbersForComponents_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PartNumbersForComponents_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PartNumbersForComponents_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PartNumbersForComponents_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PartNumbersForComponents_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PartNumbersForComponents_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PartNumbersForComponents_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PartNumbersForComponents_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PartNumbersForComponents_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PartNumbersForComponents_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PartNumbersForComponents_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PartNumbersForComponents_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PartNumbersForComponents_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PartNumbersForComponents_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PartNumbersForComponents_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PartNumbersForComponents_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PartNumbersForComponents_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PartNumbersForComponents_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_PartNumbersForComponents_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_PartNumbersForComponents_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ExtinguishingAgent = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ExtinguishingAgent, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ExtinguishingAgent_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ExtinguishingAgent_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ExtinguishingAgent_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ExtinguishingAgent_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ExtinguishingAgent_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ExtinguishingAgent_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ExtinguishingAgent_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ExtinguishingAgent_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ExtinguishingAgent_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ExtinguishingAgent_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ExtinguishingAgent_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ExtinguishingAgent_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ExtinguishingAgent_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ExtinguishingAgent_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ExtinguishingAgent_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ExtinguishingAgent_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ExtinguishingAgent_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ExtinguishingAgent_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ExtinguishingAgent_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ExtinguishingAgent_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_ExtinguishingAgent_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_ExtinguishingAgent_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_SafetyMeasures_Instructions_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledNickelShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledCobaltShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLithiumShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Pre_ConsumerRecycledLeadShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledNickelShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledCobaltShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLithiumShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_Post_ConsumerRecycledLeadShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RenewableContentShare = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RenewableContentShare, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RenewableContentShare_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RenewableContentShare_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RenewableContentShare_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RenewableContentShare_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RenewableContentShare_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RenewableContentShare_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RenewableContentShare_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RenewableContentShare_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RenewableContentShare_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RenewableContentShare_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RenewableContentShare_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RenewableContentShare_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RenewableContentShare_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RenewableContentShare_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RenewableContentShare_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RenewableContentShare_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RenewableContentShare_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RenewableContentShare_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RenewableContentShare_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RenewableContentShare_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RenewableContentShare_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RenewableContentShare_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RenewableContentShare_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RenewableContentShare_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToWastePrevention_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Id = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Definition = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Requirements = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Regulations = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Granularity = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Pack = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Module = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Cell = new ExpandedNodeId(BatteryPassport.Variables.CircularityAndResourceEfficiencyType_InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_ResultsOfTestsReports = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_ResultsOfTestsReports, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Id = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Definition = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Requirements = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Regulations = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Granularity = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Pack = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Module = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Cell = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_ResultsOfTestsReports_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Id = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Definition = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Requirements = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Regulations = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Granularity = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Pack = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Module = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Cell = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_SeparateCollectionSymbol_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Id = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Definition = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Requirements = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Regulations = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Granularity = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Pack = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Module = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Cell = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_MeaningOfLabelsAndSymbols_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Id = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Definition = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Requirements = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Regulations = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Granularity = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Pack = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Module = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Cell = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_CadmiumAndLeadSymbols_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Id = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Definition = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Requirements = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Regulations = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Granularity = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Pack = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Module = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Cell = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_EUDeclarationOfConformity_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Id = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Definition = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Requirements = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Regulations = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Granularity = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Pack = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Module = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Cell = new ExpandedNodeId(BatteryPassport.Variables.Compliance_LabelsAndCertificationsType_IDOfEUDeclarationOfConformity_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Id = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Definition = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Requirements = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Regulations = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Granularity = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Pack = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Module = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Cell = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryUniqueIdentifier_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Id = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Definition = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Requirements = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Regulations = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Granularity = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Pack = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Module = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Cell = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturersIdentification_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingDate = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingDate, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Id = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingDate_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingDate_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Definition = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Requirements = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Regulations = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingDate_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingDate_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Granularity = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Pack = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Module = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Cell = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingDate_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingPlace = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingPlace, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Id = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Definition = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Requirements = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Regulations = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Granularity = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Pack = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Module = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Cell = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_ManufacturingPlace_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryCategory = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryCategory_Id = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryCategory_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryCategory_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryCategory_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryCategory_Definition = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryCategory_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryCategory_Requirements = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryCategory_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryCategory_Regulations = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryCategory_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryCategory_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryCategory_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryCategory_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryCategory_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryCategory_Granularity = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryCategory_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryCategory_Pack = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryCategory_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryCategory_Module = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryCategory_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryCategory_Cell = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryCategory_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryWeight = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryWeight, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryWeight_Id = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryWeight_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryWeight_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryWeight_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryWeight_Definition = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryWeight_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryWeight_Requirements = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryWeight_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryWeight_Regulations = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryWeight_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryWeight_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryWeight_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryWeight_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryWeight_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryWeight_Granularity = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryWeight_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryWeight_Pack = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryWeight_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryWeight_Module = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryWeight_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryWeight_Cell = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryWeight_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryWeight_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryWeight_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryStatus = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryStatus, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryStatus_Id = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryStatus_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryStatus_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryStatus_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryStatus_Definition = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryStatus_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryStatus_Requirements = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryStatus_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryStatus_Regulations = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryStatus_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryStatus_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryStatus_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryStatus_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryStatus_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryStatus_Granularity = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryStatus_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryStatus_Pack = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryStatus_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryStatus_Module = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryStatus_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId GeneralBatteryAndManufacturerInformationType_BatteryStatus_Cell = new ExpandedNodeId(BatteryPassport.Variables.GeneralBatteryAndManufacturerInformationType_BatteryStatus_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesAboveBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentChargingDuringExtremeTemperaturesBelowBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InformationOnAccidents = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InformationOnAccidents, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InformationOnAccidents_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InformationOnAccidents_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InformationOnAccidents_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InformationOnAccidents_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InformationOnAccidents_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InformationOnAccidents_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InformationOnAccidents_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InformationOnAccidents_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InformationOnAccidents_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InformationOnAccidents_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InformationOnAccidents_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InformationOnAccidents_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InformationOnAccidents_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InformationOnAccidents_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InformationOnAccidents_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InformationOnAccidents_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InformationOnAccidents_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InformationOnAccidents_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InformationOnAccidents_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InformationOnAccidents_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InformationOnAccidents_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InformationOnAccidents_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfDeepDischargeEvents = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfDeepDischargeEvents, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfDeepDischargeEvents_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfOverchargeEvents = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfOverchargeEvents, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfOverchargeEvents_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfOverchargeEvents_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfOverchargeEvents_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfOverchargeEvents_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfOverchargeEvents_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfOverchargeEvents_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfOverchargeEvents_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfOverchargeEvents_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfOverchargeEvents_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfOverchargeEvents_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfOverchargeEvents_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfOverchargeEvents_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfOverchargeEvents_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfOverchargeEvents_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfOverchargeEvents_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfOverchargeEvents_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfOverchargeEvents_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfOverchargeEvents_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfOverchargeEvents_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfOverchargeEvents_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOfOverchargeEvents_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOfOverchargeEvents_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CertifiedUsableBatteryEnergy_UBEcertified_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingUsableBatteryEnergy_UBEmeasured_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCertifiedEnergy_SOCE_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialSelf_DischargingRate = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialSelf_DischargingRate, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialSelf_DischargingRate_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialSelf_DischargingRate_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialSelf_DischargingRate_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialSelf_DischargingRate_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialSelf_DischargingRate_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialSelf_DischargingRate_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialSelf_DischargingRate_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialSelf_DischargingRate_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialSelf_DischargingRate_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialSelf_DischargingRate_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialSelf_DischargingRate_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialSelf_DischargingRate_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialSelf_DischargingRate_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialSelf_DischargingRate_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialSelf_DischargingRate_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialSelf_DischargingRate_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialSelf_DischargingRate_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialSelf_DischargingRate_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialSelf_DischargingRate_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialSelf_DischargingRate_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialSelf_DischargingRate_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialSelf_DischargingRate_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialSelf_DischargingRate_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialSelf_DischargingRate_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentSelf_DischargingRate = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentSelf_DischargingRate, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentSelf_DischargingRate_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentSelf_DischargingRate_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentSelf_DischargingRate_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentSelf_DischargingRate_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentSelf_DischargingRate_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentSelf_DischargingRate_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentSelf_DischargingRate_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EvolutionOfSelf_DischargingRates_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatedCapacity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatedCapacity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatedCapacity_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatedCapacity_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatedCapacity_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatedCapacity_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatedCapacity_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatedCapacity_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatedCapacity_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatedCapacity_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatedCapacity_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatedCapacity_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatedCapacity_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatedCapacity_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatedCapacity_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatedCapacity_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatedCapacity_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatedCapacity_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatedCapacity_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatedCapacity_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatedCapacity_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatedCapacity_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatedCapacity_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatedCapacity_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatedCapacity_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatedCapacity_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingCapacity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingCapacity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingCapacity_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingCapacity_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingCapacity_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingCapacity_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingCapacity_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingCapacity_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingCapacity_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingCapacity_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingCapacity_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingCapacity_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingCapacity_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingCapacity_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingCapacity_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingCapacity_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingCapacity_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingCapacity_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingCapacity_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingCapacity_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingCapacity_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingCapacity_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingCapacity_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingCapacity_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingCapacity_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingCapacity_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityFade = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityFade, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityFade_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityFade_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityFade_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityFade_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityFade_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityFade_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityFade_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityFade_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityFade_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityFade_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityFade_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityFade_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityFade_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityFade_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityFade_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityFade_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityFade_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityFade_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityFade_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityFade_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityFade_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityFade_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityFade_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityFade_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCharge_SoC = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCharge_SoC, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCharge_SoC_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCharge_SoC_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCharge_SoC_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCharge_SoC_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCharge_SoC_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCharge_SoC_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCharge_SoC_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCharge_SoC_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCharge_SoC_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCharge_SoC_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCharge_SoC_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCharge_SoC_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCharge_SoC_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCharge_SoC_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCharge_SoC_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCharge_SoC_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCharge_SoC_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCharge_SoC_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCharge_SoC_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCharge_SoC_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCharge_SoC_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCharge_SoC_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_StateOfCharge_SoC_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_StateOfCharge_SoC_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NominalVoltage = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NominalVoltage, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NominalVoltage_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NominalVoltage_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NominalVoltage_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NominalVoltage_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NominalVoltage_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NominalVoltage_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NominalVoltage_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NominalVoltage_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NominalVoltage_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NominalVoltage_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NominalVoltage_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NominalVoltage_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NominalVoltage_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NominalVoltage_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NominalVoltage_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NominalVoltage_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NominalVoltage_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NominalVoltage_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NominalVoltage_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NominalVoltage_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NominalVoltage_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NominalVoltage_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NominalVoltage_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NominalVoltage_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MinimumVoltage = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MinimumVoltage, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MinimumVoltage_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MinimumVoltage_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MinimumVoltage_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MinimumVoltage_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MinimumVoltage_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MinimumVoltage_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MinimumVoltage_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MinimumVoltage_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MinimumVoltage_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MinimumVoltage_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MinimumVoltage_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MinimumVoltage_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MinimumVoltage_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MinimumVoltage_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MinimumVoltage_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MinimumVoltage_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MinimumVoltage_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MinimumVoltage_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MinimumVoltage_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MinimumVoltage_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MinimumVoltage_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MinimumVoltage_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MinimumVoltage_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MinimumVoltage_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumVoltage = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumVoltage, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumVoltage_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumVoltage_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumVoltage_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumVoltage_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumVoltage_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumVoltage_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumVoltage_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumVoltage_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumVoltage_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumVoltage_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumVoltage_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumVoltage_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumVoltage_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumVoltage_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumVoltage_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumVoltage_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumVoltage_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumVoltage_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumVoltage_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumVoltage_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumVoltage_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumVoltage_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumVoltage_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumVoltage_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_OriginalPowerCapability = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_OriginalPowerCapability, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_OriginalPowerCapability_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_OriginalPowerCapability_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_OriginalPowerCapability_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_OriginalPowerCapability_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_OriginalPowerCapability_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_OriginalPowerCapability_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_OriginalPowerCapability_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_OriginalPowerCapability_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_OriginalPowerCapability_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_OriginalPowerCapability_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_OriginalPowerCapability_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_OriginalPowerCapability_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_OriginalPowerCapability_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_OriginalPowerCapability_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_OriginalPowerCapability_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_OriginalPowerCapability_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_OriginalPowerCapability_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_OriginalPowerCapability_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_OriginalPowerCapability_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_OriginalPowerCapability_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_OriginalPowerCapability_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_OriginalPowerCapability_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_OriginalPowerCapability_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_OriginalPowerCapability_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingPowerCapability = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingPowerCapability, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingPowerCapability_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingPowerCapability_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingPowerCapability_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingPowerCapability_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingPowerCapability_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingPowerCapability_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingPowerCapability_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingPowerCapability_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingPowerCapability_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingPowerCapability_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingPowerCapability_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingPowerCapability_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingPowerCapability_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingPowerCapability_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingPowerCapability_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingPowerCapability_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingPowerCapability_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingPowerCapability_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingPowerCapability_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingPowerCapability_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingPowerCapability_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingPowerCapability_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingPowerCapability_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingPowerCapability_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_PowerCapabilityFade = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_PowerCapabilityFade, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_PowerCapabilityFade_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_PowerCapabilityFade_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_PowerCapabilityFade_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_PowerCapabilityFade_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_PowerCapabilityFade_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_PowerCapabilityFade_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_PowerCapabilityFade_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_PowerCapabilityFade_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_PowerCapabilityFade_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_PowerCapabilityFade_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_PowerCapabilityFade_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_PowerCapabilityFade_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_PowerCapabilityFade_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_PowerCapabilityFade_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_PowerCapabilityFade_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_PowerCapabilityFade_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_PowerCapabilityFade_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_PowerCapabilityFade_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_PowerCapabilityFade_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_PowerCapabilityFade_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_PowerCapabilityFade_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_PowerCapabilityFade_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_PowerCapabilityFade_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_PowerCapabilityFade_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumPermittedBatteryPower = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumPermittedBatteryPower, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumPermittedBatteryPower_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumPermittedBatteryPower_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumPermittedBatteryPower_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumPermittedBatteryPower_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumPermittedBatteryPower_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_MaximumPermittedBatteryPower_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_MaximumPermittedBatteryPower_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialRoundTripEnergyEfficiency_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyAt50_OfCycleLife_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RemainingRoundTripEnergyEfficiency_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_RoundTripEnergyEfficiencyFade_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryCellLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryCellLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryCellLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryPackLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryPackLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InitialInternalResistanceOnBatteryModuleLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CurrentInternalResistanceOnBatteryModuleLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_InternalResistanceIncreaseOnBatteryModuleLevel_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_ExpectedLifetime_NumberOfCharge_DischargeCycles_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_NumberOf_Full_Charge_DischargeCycles_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_Cycle_LifeReferenceTest = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_Cycle_LifeReferenceTest, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_Cycle_LifeReferenceTest_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_Cycle_LifeReferenceTest_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_Cycle_LifeReferenceTest_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_Cycle_LifeReferenceTest_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_Cycle_LifeReferenceTest_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_C_RateOfRelevantCycle_LifeTest_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EnergyThroughput = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EnergyThroughput, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EnergyThroughput_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EnergyThroughput_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EnergyThroughput_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EnergyThroughput_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EnergyThroughput_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EnergyThroughput_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EnergyThroughput_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EnergyThroughput_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EnergyThroughput_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EnergyThroughput_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EnergyThroughput_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EnergyThroughput_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EnergyThroughput_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EnergyThroughput_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EnergyThroughput_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EnergyThroughput_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EnergyThroughput_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EnergyThroughput_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EnergyThroughput_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EnergyThroughput_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EnergyThroughput_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EnergyThroughput_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_EnergyThroughput_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_EnergyThroughput_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThroughput = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThroughput, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThroughput_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThroughput_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThroughput_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThroughput_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThroughput_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThroughput_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThroughput_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThroughput_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThroughput_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThroughput_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThroughput_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThroughput_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThroughput_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThroughput_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThroughput_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThroughput_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThroughput_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThroughput_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThroughput_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThroughput_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThroughput_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThroughput_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThroughput_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThroughput_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThresholdForExhaustion = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThresholdForExhaustion, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThresholdForExhaustion_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThresholdForExhaustion_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThresholdForExhaustion_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThresholdForExhaustion_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThresholdForExhaustion_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_CapacityThresholdForExhaustion_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_CapacityThresholdForExhaustion_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_SOCEThresholdForExhaustion = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_SOCEThresholdForExhaustion, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_SOCEThresholdForExhaustion_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_SOCEThresholdForExhaustion_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_SOCEThresholdForExhaustion_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_SOCEThresholdForExhaustion_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_SOCEThresholdForExhaustion_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_SOCEThresholdForExhaustion_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_SOCEThresholdForExhaustion_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_WarrantyPeriodOfTheBattery_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_DateOfPuttingTheBatteryIntoService_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_LowerBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TemperatureRangeIdleState_UpperBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesAboveBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Id = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Definition = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Requirements = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Regulations = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Granularity = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Pack = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Module = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Cell = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_EngineeringUnits = new ExpandedNodeId(BatteryPassport.Variables.PerformanceAndDurabilityType_TimeSpentInExtremeTemperaturesBelowBoundary_EngineeringUnits, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Id = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Definition = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Requirements = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Regulations = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Granularity = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Pack = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Module = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Cell = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_InformationOfTheDueDiligenceReport_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Id = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Definition = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Requirements = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Regulations = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Granularity = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Pack = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Module = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Cell = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_ThirdPartySupplyChainAssurances_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Id = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Definition = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Requirements = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Regulations = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Granularity = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Pack = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Module = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Cell = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_EUTaxonomyDisclosureStatement_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_SustainabilityReport = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_SustainabilityReport, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_SustainabilityReport_Id = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_SustainabilityReport_Id, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_SustainabilityReport_SubCategory = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_SustainabilityReport_SubCategory, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_SustainabilityReport_Definition = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_SustainabilityReport_Definition, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_SustainabilityReport_Requirements = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_SustainabilityReport_Requirements, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_SustainabilityReport_Regulations = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_SustainabilityReport_Regulations, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_SustainabilityReport_AccessRights = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_SustainabilityReport_AccessRights, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_SustainabilityReport_Behaviour = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_SustainabilityReport_Behaviour, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_SustainabilityReport_Granularity = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_SustainabilityReport_Granularity, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_SustainabilityReport_Pack = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_SustainabilityReport_Pack, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_SustainabilityReport_Module = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_SustainabilityReport_Module, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId SupplyChainDueDiligenceType_SustainabilityReport_Cell = new ExpandedNodeId(BatteryPassport.Variables.SupplyChainDueDiligenceType_SustainabilityReport_Cell, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_BinarySchema = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_BinarySchema, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_BinarySchema_NamespaceUri = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_BinarySchema_NamespaceUri, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_BinarySchema_Deprecated = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_BinarySchema_Deprecated, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_BinarySchema_BatteryPassportDataType = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_BinarySchema_BatteryPassportDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_BinarySchema_BatteryMaterialsAndCompositionDataType = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_BinarySchema_BatteryMaterialsAndCompositionDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_BinarySchema_CarbonFootprintDataType = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_BinarySchema_CarbonFootprintDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_BinarySchema_CircularityAndResourceEfficiencyDataType = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_BinarySchema_CircularityAndResourceEfficiencyDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_BinarySchema_Compliance_LabelsAndCertificationsDataType = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_BinarySchema_Compliance_LabelsAndCertificationsDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_BinarySchema_GeneralBatteryAndManufacturerInformationDataType = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_BinarySchema_GeneralBatteryAndManufacturerInformationDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_BinarySchema_PerformanceAndDurabilityDataType = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_BinarySchema_PerformanceAndDurabilityDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_BinarySchema_SupplyChainDueDiligenceDataType = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_BinarySchema_SupplyChainDueDiligenceDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_XmlSchema = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_XmlSchema, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_XmlSchema_NamespaceUri = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_XmlSchema_NamespaceUri, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_XmlSchema_Deprecated = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_XmlSchema_Deprecated, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_XmlSchema_BatteryPassportDataType = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_XmlSchema_BatteryPassportDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_XmlSchema_BatteryMaterialsAndCompositionDataType = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_XmlSchema_BatteryMaterialsAndCompositionDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_XmlSchema_CarbonFootprintDataType = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_XmlSchema_CarbonFootprintDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_XmlSchema_CircularityAndResourceEfficiencyDataType = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_XmlSchema_CircularityAndResourceEfficiencyDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_XmlSchema_Compliance_LabelsAndCertificationsDataType = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_XmlSchema_Compliance_LabelsAndCertificationsDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_XmlSchema_GeneralBatteryAndManufacturerInformationDataType = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_XmlSchema_GeneralBatteryAndManufacturerInformationDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_XmlSchema_PerformanceAndDurabilityDataType = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_XmlSchema_PerformanceAndDurabilityDataType, BatteryPassport.Namespaces.BatteryPassport);

        /// <remarks />
        public static readonly ExpandedNodeId BatteryPassport_XmlSchema_SupplyChainDueDiligenceDataType = new ExpandedNodeId(BatteryPassport.Variables.BatteryPassport_XmlSchema_SupplyChainDueDiligenceDataType, BatteryPassport.Namespaces.BatteryPassport);
    }
    #endregion

    #region VariableType Node Identifiers
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public static partial class VariableTypeIds
    {
        /// <remarks />
        public static readonly ExpandedNodeId SubmodelPropertyType = new ExpandedNodeId(BatteryPassport.VariableTypes.SubmodelPropertyType, BatteryPassport.Namespaces.BatteryPassport);
    }
    #endregion

    #region BrowseName Declarations
    /// <remarks />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public static partial class BrowseNames
    {
        /// <remarks />
        public const string AccessRights = "AccessRights";

        /// <remarks />
        public const string Batteries = "Batteries";

        /// <remarks />
        public const string BatteryCarbonFootprint = "BatteryCarbonFootprint";

        /// <remarks />
        public const string BatteryCategory = "BatteryCategory";

        /// <remarks />
        public const string BatteryChemistry = "BatteryChemistry";

        /// <remarks />
        public const string BatteryCurrentStateType = "BatteryCurrentStateType";

        /// <remarks />
        public const string BatteryMaterialsAndComposition = "BatteryMaterialsAndComposition";

        /// <remarks />
        public const string BatteryMaterialsAndCompositionDataType = "BatteryMaterialsAndCompositionDataType";

        /// <remarks />
        public const string BatteryMaterialsAndCompositionType = "BatteryMaterialsAndCompositionType";

        /// <remarks />
        public const string BatteryPassport_BinarySchema = "BatteryPassport";

        /// <remarks />
        public const string BatteryPassport_XmlSchema = "BatteryPassport";

        /// <remarks />
        public const string BatteryPassportDataType = "BatteryPassportDataType";

        /// <remarks />
        public const string BatteryPassportType = "BatteryPassportType";

        /// <remarks />
        public const string BatteryStatus = "BatteryStatus";

        /// <remarks />
        public const string BatteryType = "BatteryType";

        /// <remarks />
        public const string BatteryUniqueIdentifier = "BatteryUniqueIdentifier";

        /// <remarks />
        public const string BatteryWeight = "BatteryWeight";

        /// <remarks />
        public const string Behaviour = "Behaviour";

        /// <remarks />
        public const string C_RateOfRelevantCycle_LifeTest = "C_RateOfRelevantCycle_LifeTest";

        /// <remarks />
        public const string CadmiumAndLeadSymbols = "CadmiumAndLeadSymbols";

        /// <remarks />
        public const string CapacityFade = "CapacityFade";

        /// <remarks />
        public const string CapacityThresholdForExhaustion = "CapacityThresholdForExhaustion";

        /// <remarks />
        public const string CapacityThroughput = "CapacityThroughput";

        /// <remarks />
        public const string CarbonFootprint = "CarbonFootprint";

        /// <remarks />
        public const string CarbonFootprintDataType = "CarbonFootprintDataType";

        /// <remarks />
        public const string CarbonFootprintPerformanceClass = "CarbonFootprintPerformanceClass";

        /// <remarks />
        public const string CarbonFootprintType = "CarbonFootprintType";

        /// <remarks />
        public const string Cell = "Cell";

        /// <remarks />
        public const string CertifiedUsableBatteryEnergy_UBEcertified = "CertifiedUsableBatteryEnergy_UBEcertified";

        /// <remarks />
        public const string ChargeRemaining = "ChargeRemaining";

        /// <remarks />
        public const string CircularityAndResourceEfficiency = "CircularityAndResourceEfficiency";

        /// <remarks />
        public const string CircularityAndResourceEfficiencyDataType = "CircularityAndResourceEfficiencyDataType";

        /// <remarks />
        public const string CircularityAndResourceEfficiencyType = "CircularityAndResourceEfficiencyType";

        /// <remarks />
        public const string Compliance_LabelsAndCertifications = "Compliance_LabelsAndCertifications";

        /// <remarks />
        public const string Compliance_LabelsAndCertificationsDataType = "Compliance_LabelsAndCertificationsDataType";

        /// <remarks />
        public const string Compliance_LabelsAndCertificationsType = "Compliance_LabelsAndCertificationsType";

        /// <remarks />
        public const string ConcentrationRangeOfHazardousSubstances = "ConcentrationRangeOfHazardousSubstances";

        /// <remarks />
        public const string CriticalRawMaterials = "CriticalRawMaterials";

        /// <remarks />
        public const string CurrentInternalResistanceOnBatteryCellLevel = "CurrentInternalResistanceOnBatteryCellLevel";

        /// <remarks />
        public const string CurrentInternalResistanceOnBatteryModuleLevel = "CurrentInternalResistanceOnBatteryModuleLevel";

        /// <remarks />
        public const string CurrentInternalResistanceOnBatteryPackLevel = "CurrentInternalResistanceOnBatteryPackLevel";

        /// <remarks />
        public const string CurrentSelf_DischargingRate = "CurrentSelf_DischargingRate";

        /// <remarks />
        public const string CurrentState = "CurrentState";

        /// <remarks />
        public const string Cycle_LifeReferenceTest = "Cycle_LifeReferenceTest";

        /// <remarks />
        public const string DateOfPuttingTheBatteryIntoService = "DateOfPuttingTheBatteryIntoService";

        /// <remarks />
        public const string Definition = "Definition";

        /// <remarks />
        public const string E_MailAddressOfSourcesForSpareParts = "E_MailAddressOfSourcesForSpareParts";

        /// <remarks />
        public const string EnergyThroughput = "EnergyThroughput";

        /// <remarks />
        public const string EUDeclarationOfConformity = "EUDeclarationOfConformity";

        /// <remarks />
        public const string EUTaxonomyDisclosureStatement = "EUTaxonomyDisclosureStatement";

        /// <remarks />
        public const string EvolutionOfSelf_DischargingRates = "EvolutionOfSelf_DischargingRates";

        /// <remarks />
        public const string ExpectedLifetime_NumberOfCharge_DischargeCycles = "ExpectedLifetime_NumberOfCharge_DischargeCycles";

        /// <remarks />
        public const string ExtinguishingAgent = "ExtinguishingAgent";

        /// <remarks />
        public const string GeneralBatteryAndManufacturerInformation = "GeneralBatteryAndManufacturerInformation";

        /// <remarks />
        public const string GeneralBatteryAndManufacturerInformationDataType = "GeneralBatteryAndManufacturerInformationDataType";

        /// <remarks />
        public const string GeneralBatteryAndManufacturerInformationType = "GeneralBatteryAndManufacturerInformationType";

        /// <remarks />
        public const string Granularity = "Granularity";

        /// <remarks />
        public const string HazardClassesAnd_OrCategoriesOfHazardousSubstances = "HazardClassesAnd_OrCategoriesOfHazardousSubstances";

        /// <remarks />
        public const string Id = "Id";

        /// <remarks />
        public const string IDOfEUDeclarationOfConformity = "IDOfEUDeclarationOfConformity";

        /// <remarks />
        public const string ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety = "ImpactOfSubstancesOnTheEnvironment_HumanHealth_Safety";

        /// <remarks />
        public const string InformationOfTheDueDiligenceReport = "InformationOfTheDueDiligenceReport";

        /// <remarks />
        public const string InformationOnAccidents = "InformationOnAccidents";

        /// <remarks />
        public const string InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations = "InformationOnSeparateCollection_TakeBack_CollectionPointsAndPreparingForRe_Use_PreparingForRepurposingAndRecyclingOperations";

        /// <remarks />
        public const string InitialInternalResistanceOnBatteryCellLevel = "InitialInternalResistanceOnBatteryCellLevel";

        /// <remarks />
        public const string InitialInternalResistanceOnBatteryModuleLevel = "InitialInternalResistanceOnBatteryModuleLevel";

        /// <remarks />
        public const string InitialInternalResistanceOnBatteryPackLevel = "InitialInternalResistanceOnBatteryPackLevel";

        /// <remarks />
        public const string InitialRoundTripEnergyEfficiency = "InitialRoundTripEnergyEfficiency";

        /// <remarks />
        public const string InitialSelf_DischargingRate = "InitialSelf_DischargingRate";

        /// <remarks />
        public const string InternalResistanceIncreaseOnBatteryCellLevel = "InternalResistanceIncreaseOnBatteryCellLevel";

        /// <remarks />
        public const string InternalResistanceIncreaseOnBatteryModuleLevel = "InternalResistanceIncreaseOnBatteryModuleLevel";

        /// <remarks />
        public const string LocationOfHazardousSubstances = "LocationOfHazardousSubstances";

        /// <remarks />
        public const string ManualForDisassemblyAndDismantlingOfTheBatteryPack = "ManualForDisassemblyAndDismantlingOfTheBatteryPack";

        /// <remarks />
        public const string ManualForRemovalOfTheBatteryFromTheAppliance = "ManualForRemovalOfTheBatteryFromTheAppliance";

        /// <remarks />
        public const string ManufacturersIdentification = "ManufacturersIdentification";

        /// <remarks />
        public const string ManufacturingDate = "ManufacturingDate";

        /// <remarks />
        public const string ManufacturingPlace = "ManufacturingPlace";

        /// <remarks />
        public const string MaximumPermittedBatteryPower = "MaximumPermittedBatteryPower";

        /// <remarks />
        public const string MaximumVoltage = "MaximumVoltage";

        /// <remarks />
        public const string MeaningOfLabelsAndSymbols = "MeaningOfLabelsAndSymbols";

        /// <remarks />
        public const string MinimumVoltage = "MinimumVoltage";

        /// <remarks />
        public const string Module = "Module";

        /// <remarks />
        public const string NameOfHazardousSubstances = "NameOfHazardousSubstances";

        /// <remarks />
        public const string NameOfTheCathode_Anode_ElectrolyteMaterials = "NameOfTheCathode_Anode_ElectrolyteMaterials";

        /// <remarks />
        public const string NominalVoltage = "NominalVoltage";

        /// <remarks />
        public const string NumberOf_Full_Charge_DischargeCycles = "NumberOf_Full_Charge_DischargeCycles";

        /// <remarks />
        public const string NumberOfDeepDischargeEvents = "NumberOfDeepDischargeEvents";

        /// <remarks />
        public const string NumberOfOverchargeEvents = "NumberOfOverchargeEvents";

        /// <remarks />
        public const string OriginalPowerCapability = "OriginalPowerCapability";

        /// <remarks />
        public const string Pack = "Pack";

        /// <remarks />
        public const string Package = "Package";

        /// <remarks />
        public const string PartNumbersForComponents = "PartNumbersForComponents";

        /// <remarks />
        public const string Passport = "Passport";

        /// <remarks />
        public const string PerformanceAndDurability = "PerformanceAndDurability";

        /// <remarks />
        public const string PerformanceAndDurabilityDataType = "PerformanceAndDurabilityDataType";

        /// <remarks />
        public const string PerformanceAndDurabilityType = "PerformanceAndDurabilityType";

        /// <remarks />
        public const string Post_ConsumerRecycledCobaltShare = "Post_ConsumerRecycledCobaltShare";

        /// <remarks />
        public const string Post_ConsumerRecycledLeadShare = "Post_ConsumerRecycledLeadShare";

        /// <remarks />
        public const string Post_ConsumerRecycledLithiumShare = "Post_ConsumerRecycledLithiumShare";

        /// <remarks />
        public const string Post_ConsumerRecycledNickelShare = "Post_ConsumerRecycledNickelShare";

        /// <remarks />
        public const string PostalAddressOfSourcesForSpareParts = "PostalAddressOfSourcesForSpareParts";

        /// <remarks />
        public const string PowerCapabilityFade = "PowerCapabilityFade";

        /// <remarks />
        public const string PowerIn = "PowerIn";

        /// <remarks />
        public const string PowerOut = "PowerOut";

        /// <remarks />
        public const string Pre_ConsumerRecycledCobaltShare = "Pre_ConsumerRecycledCobaltShare";

        /// <remarks />
        public const string Pre_ConsumerRecycledLeadShare = "Pre_ConsumerRecycledLeadShare";

        /// <remarks />
        public const string Pre_ConsumerRecycledLithiumShare = "Pre_ConsumerRecycledLithiumShare";

        /// <remarks />
        public const string Pre_ConsumerRecycledNickelShare = "Pre_ConsumerRecycledNickelShare";

        /// <remarks />
        public const string RatedCapacity = "RatedCapacity";

        /// <remarks />
        public const string RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh = "RatioBetweenNominalAllowedBatteryPower_W_AndBatteryEnergy_Wh";

        /// <remarks />
        public const string Regulations = "Regulations";

        /// <remarks />
        public const string RelatedIdentifiersOfHazardousSubstances = "RelatedIdentifiersOfHazardousSubstances";

        /// <remarks />
        public const string RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials = "RelatedIdentifiersOfTheCathode_Anode_ElectrolyteMaterials";

        /// <remarks />
        public const string RemainingCapacity = "RemainingCapacity";

        /// <remarks />
        public const string RemainingPowerCapability = "RemainingPowerCapability";

        /// <remarks />
        public const string RemainingRoundTripEnergyEfficiency = "RemainingRoundTripEnergyEfficiency";

        /// <remarks />
        public const string RemainingUsableBatteryEnergy_UBEmeasured = "RemainingUsableBatteryEnergy_UBEmeasured";

        /// <remarks />
        public const string RenewableContentShare = "RenewableContentShare";

        /// <remarks />
        public const string Requirements = "Requirements";

        /// <remarks />
        public const string ResultsOfTestsReports = "ResultsOfTestsReports";

        /// <remarks />
        public const string RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries = "RoleOfEnd_UsersInContributingToTheSeparateCollectionOfWasteBatteries";

        /// <remarks />
        public const string RoleOfEnd_UsersInContributingToWastePrevention = "RoleOfEnd_UsersInContributingToWastePrevention";

        /// <remarks />
        public const string RoundTripEnergyEfficiencyAt50_OfCycleLife = "RoundTripEnergyEfficiencyAt50_OfCycleLife";

        /// <remarks />
        public const string RoundTripEnergyEfficiencyFade = "RoundTripEnergyEfficiencyFade";

        /// <remarks />
        public const string SafetyMeasures_Instructions = "SafetyMeasures_Instructions";

        /// <remarks />
        public const string SeparateCollectionSymbol = "SeparateCollectionSymbol";

        /// <remarks />
        public const string ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution = "ShareOfBatteryCarbonFootprintPerLifecycleStage_Distribution";

        /// <remarks />
        public const string ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling = "ShareOfBatteryCarbonFootprintPerLifecycleStage_EndOfLifeAndRecycling";

        /// <remarks />
        public const string ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction = "ShareOfBatteryCarbonFootprintPerLifecycleStage_MainProductProduction";

        /// <remarks />
        public const string ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing = "ShareOfBatteryCarbonFootprintPerLifecycleStage_RawMaterialAcquisitionAndPre_Processing";

        /// <remarks />
        public const string SOCEThresholdForExhaustion = "SOCEThresholdForExhaustion";

        /// <remarks />
        public const string StateOfCertifiedEnergy_SOCE = "StateOfCertifiedEnergy_SOCE";

        /// <remarks />
        public const string StateOfCharge_SoC = "StateOfCharge_SoC";

        /// <remarks />
        public const string SubCategory = "SubCategory";

        /// <remarks />
        public const string SubmodelPropertyType = "SubmodelPropertyType";

        /// <remarks />
        public const string SubmodelType = "SubmodelType";

        /// <remarks />
        public const string SupplyChainDueDiligence = "SupplyChainDueDiligence";

        /// <remarks />
        public const string SupplyChainDueDiligenceDataType = "SupplyChainDueDiligenceDataType";

        /// <remarks />
        public const string SupplyChainDueDiligenceType = "SupplyChainDueDiligenceType";

        /// <remarks />
        public const string SustainabilityReport = "SustainabilityReport";

        /// <remarks />
        public const string Temperature = "Temperature";

        /// <remarks />
        public const string TemperatureRangeIdleState_LowerBoundary = "TemperatureRangeIdleState_LowerBoundary";

        /// <remarks />
        public const string TemperatureRangeIdleState_UpperBoundary = "TemperatureRangeIdleState_UpperBoundary";

        /// <remarks />
        public const string ThirdPartySupplyChainAssurances = "ThirdPartySupplyChainAssurances";

        /// <remarks />
        public const string TimeRemaining = "TimeRemaining";

        /// <remarks />
        public const string TimeSpentChargingDuringExtremeTemperaturesAboveBoundary = "TimeSpentChargingDuringExtremeTemperaturesAboveBoundary";

        /// <remarks />
        public const string TimeSpentChargingDuringExtremeTemperaturesBelowBoundary = "TimeSpentChargingDuringExtremeTemperaturesBelowBoundary";

        /// <remarks />
        public const string TimeSpentInExtremeTemperaturesAboveBoundary = "TimeSpentInExtremeTemperaturesAboveBoundary";

        /// <remarks />
        public const string TimeSpentInExtremeTemperaturesBelowBoundary = "TimeSpentInExtremeTemperaturesBelowBoundary";

        /// <remarks />
        public const string Voltage = "Voltage";

        /// <remarks />
        public const string WarrantyPeriodOfTheBattery = "WarrantyPeriodOfTheBattery";

        /// <remarks />
        public const string WebAddressOfSourcesForSpareParts = "WebAddressOfSourcesForSpareParts";

        /// <remarks />
        public const string WebLinkToPublicCarbonFootprintStudy = "WebLinkToPublicCarbonFootprintStudy";

        /// <remarks />
        public const string WeightOfTheCathode_Anode_ElectrolyteMaterials = "WeightOfTheCathode_Anode_ElectrolyteMaterials";
    }
    #endregion

    #region Namespace Declarations
    /// <remarks />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public static partial class Namespaces
    {
        /// <summary>
        /// The URI for the BatteryPassport namespace (.NET code namespace is 'BatteryPassport').
        /// </summary>
        public const string BatteryPassport = "http://opcfoundation.org/UA/BatteryPassport/";

        /// <summary>
        /// The URI for the OpcUa namespace (.NET code namespace is 'Opc.Ua').
        /// </summary>
        public const string OpcUa = "http://opcfoundation.org/UA/";

        /// <summary>
        /// The URI for the OpcUaXsd namespace (.NET code namespace is 'Opc.Ua').
        /// </summary>
        public const string OpcUaXsd = "http://opcfoundation.org/UA/2008/02/Types.xsd";
    }
    #endregion
}